---
openapi: "3.0.0"

info:
  version: "1.0.0-alpha1"
  description: "API definition for Genexec, a generic execution platform for IaC"
  title: "Genexec OpenAPI"
  contact:
    name: "Genexec"
    email: "gexec@webhippie.de"
    url: "https://gexec.eu"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "https://try.gexec.eu/api/v1"

security:
  - Header: []
  - Bearer: []
  - Basic: []

paths:
  /auth/{provider}/request:
    get:
      summary: "Request the redirect to defined provider"
      operationId: "RequestProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
      security: []
      responses:
        "308":
          description: "Redirect to the provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/{provider}/callback:
    get:
      summary: "Callback to parse the defined provider"
      operationId: "CallbackProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
        - $ref: "#/components/parameters/AuthStateParam"
        - $ref: "#/components/parameters/AuthCodeParam"
      security: []
      responses:
        "308":
          description: "Generated expiring token"
          content:
            text/html:
              schema:
                type: "string"
        "412":
          description: "Failed to initialize provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/providers:
    get:
      summary: "Fetch the available auth providers"
      operationId: "ListProviders"
      tags:
        - "auth"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/ProvidersResponse"

  /auth/login:
    post:
      summary: "Authenticate an user by credentials"
      operationId: "LoginAuth"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/LoginAuthBody"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/LoginResponse"
        "401":
          $ref: "#/components/responses/BadCredentialsError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    get:
      summary: "Refresh an auth token before it expires"
      operationId: "RefreshAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/RefreshResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/verify:
    get:
      summary: "Verify validity for an authentication token"
      operationId: "VerifyAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/VerifyResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/token:
    get:
      summary: "Retrieve an unlimited auth token"
      operationId: "TokenProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/self:
    get:
      summary: "Fetch profile details of the personal account"
      operationId: "ShowProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update your own profile information"
      operationId: "UpdateProfile"
      tags:
        - "profile"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfileBody"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects:
    get:
      summary: "Fetch all available projects"
      operationId: "ListProjects"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new project"
      operationId: "CreateProject"
      tags:
        - "project"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}:
    get:
      summary: "Fetch a specific project"
      operationId: "ShowProject"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific project"
      operationId: "UpdateProject"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific project"
      operationId: "DeleteProject"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/users:
    get:
      summary: "Fetch all users attached to project"
      operationId: "ListProjectUsers"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to project"
      operationId: "AttachProjectToUser"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for project"
      operationId: "PermitProjectUser"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from project"
      operationId: "DeleteProjectFromUser"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/groups:
    get:
      summary: "Fetch all groups attached to project"
      operationId: "ListProjectGroups"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to project"
      operationId: "AttachProjectToGroup"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for project"
      operationId: "PermitProjectGroup"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from project"
      operationId: "DeleteProjectFromGroup"
      tags:
        - "project"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/ProjectGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/events:
    get:
      summary: "Fetch all events for a project"
      operationId: "ListProjectEvents"
      tags:
        - "event"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEventsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/runners:
    get:
      summary: "Fetch all runners for a project"
      operationId: "ListProjectRunners"
      tags:
        - "project"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRunnersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new runner"
      operationId: "CreateProjectRunner"
      tags:
        - "project"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectRunnerBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/runners/{runner_id}:
    get:
      summary: "Fetch a specific runner for a project"
      operationId: "ShowProjectRunner"
      tags:
        - "project"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RunnerParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific runner for a project"
      operationId: "UpdateProjectRunner"
      tags:
        - "project"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RunnerParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectRunnerBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific runner for a project"
      operationId: "DeleteProjectRunner"
      tags:
        - "project"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RunnerParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/credentials:
    get:
      summary: "Fetch all credentials for a project"
      operationId: "ListProjectCredentials"
      tags:
        - "project"
        - "credential"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectCredentialsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new credential"
      operationId: "CreateProjectCredential"
      tags:
        - "project"
        - "credential"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectCredentialBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectCredentialResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/credentials/{credential_id}:
    get:
      summary: "Fetch a specific credential for a project"
      operationId: "ShowProjectCredential"
      tags:
        - "project"
        - "credential"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/CredentialParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectCredentialResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific credential for a project"
      operationId: "UpdateProjectCredential"
      tags:
        - "project"
        - "credential"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/CredentialParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectCredentialBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectCredentialResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific credential for a project"
      operationId: "DeleteProjectCredential"
      tags:
        - "project"
        - "credential"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/CredentialParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/repositories:
    get:
      summary: "Fetch all repositories for a project"
      operationId: "ListProjectRepositories"
      tags:
        - "project"
        - "repository"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRepositoriesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new repository"
      operationId: "CreateProjectRepository"
      tags:
        - "project"
        - "repository"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectRepositoryBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRepositoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/repositories/{repository_id}:
    get:
      summary: "Fetch a specific repository for a project"
      operationId: "ShowProjectRepository"
      tags:
        - "project"
        - "repository"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RepositoryParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRepositoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific repository for a project"
      operationId: "UpdateProjectRepository"
      tags:
        - "project"
        - "repository"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RepositoryParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectRepositoryBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectRepositoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific repository for a project"
      operationId: "DeleteProjectRepository"
      tags:
        - "project"
        - "repository"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/RepositoryParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/inventories:
    get:
      summary: "Fetch all inventories for a project"
      operationId: "ListProjectInventories"
      tags:
        - "project"
        - "inventory"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectInventoriesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new inventory"
      operationId: "CreateProjectInventory"
      tags:
        - "project"
        - "inventory"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectInventoryBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectInventoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/inventories/{inventory_id}:
    get:
      summary: "Fetch a specific inventory for a project"
      operationId: "ShowProjectInventory"
      tags:
        - "project"
        - "inventory"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/InventoryParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectInventoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific inventory for a project"
      operationId: "UpdateProjectInventory"
      tags:
        - "project"
        - "inventory"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/InventoryParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectInventoryBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectInventoryResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific inventory for a project"
      operationId: "DeleteProjectInventory"
      tags:
        - "project"
        - "inventory"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/InventoryParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments:
    get:
      summary: "Fetch all environments for a project"
      operationId: "ListProjectEnvironments"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new environment"
      operationId: "CreateProjectEnvironment"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectEnvironmentBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments/{environment_id}:
    get:
      summary: "Fetch a specific environment for a project"
      operationId: "ShowProjectEnvironment"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific environment for a project"
      operationId: "UpdateProjectEnvironment"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectEnvironmentBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific environment for a project"
      operationId: "DeleteProjectEnvironment"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments/{environment_id}/secrets:
    post:
      summary: "Create a new secret on an environment"
      operationId: "CreateProjectEnvironmentSecret"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectEnvironmentSecretBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentSecretResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments/{environment_id}/secrets/{secret_id}:
    put:
      summary: "Update a secret on an environment for a project"
      operationId: "UpdateProjectEnvironmentSecret"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
        - $ref: "#/components/parameters/SecretParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectEnvironmentSecretBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentSecretResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a secret on an environment for a project"
      operationId: "DeleteProjectEnvironmentSecret"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
        - $ref: "#/components/parameters/SecretParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments/{environment_id}/values:
    post:
      summary: "Create a new value on an environment"
      operationId: "CreateProjectEnvironmentValue"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectEnvironmentValueBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentValueResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/environments/{environment_id}/values/{value_id}:
    put:
      summary: "Update a value on an environment for a project"
      operationId: "UpdateProjectEnvironmentValue"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
        - $ref: "#/components/parameters/ValueParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectEnvironmentValueBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectEnvironmentValueResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a value on an environment for a project"
      operationId: "DeleteProjectEnvironmentValue"
      tags:
        - "project"
        - "environment"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/EnvironmentParam"
        - $ref: "#/components/parameters/ValueParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates:
    get:
      summary: "Fetch all templates for a project"
      operationId: "ListProjectTemplates"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplatesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new template"
      operationId: "CreateProjectTemplate"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectTemplateBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates/{template_id}:
    get:
      summary: "Fetch a specific template for a project"
      operationId: "ShowProjectTemplate"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific template for a project"
      operationId: "UpdateProjectTemplate"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectTemplateBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific template for a project"
      operationId: "DeleteProjectTemplate"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates/{template_id}/surveys:
    post:
      summary: "Create a new survey on a template"
      operationId: "CreateProjectTemplateSurvey"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectTemplateSurveyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateSurveyResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates/{template_id}/surveys/{survey_id}:
    put:
      summary: "Update a survey on a template for a project"
      operationId: "UpdateProjectTemplateSurvey"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
        - $ref: "#/components/parameters/SurveyParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectTemplateSurveyBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateSurveyResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a survey on a template for a project"
      operationId: "DeleteProjectTemplateSurvey"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
        - $ref: "#/components/parameters/SurveyParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates/{template_id}/vaults:
    post:
      summary: "Create a new vault on a template"
      operationId: "CreateProjectTemplateVault"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectTemplateVaultBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateVaultResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/templates/{template_id}/vaults/{vault_id}:
    put:
      summary: "Update a vault on a template for a project"
      operationId: "UpdateProjectTemplateVault"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
        - $ref: "#/components/parameters/VaultParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectTemplateVaultBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectTemplateVaultResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a vault on a template for a project"
      operationId: "DeleteProjectTemplateVault"
      tags:
        - "project"
        - "template"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/TemplateParam"
        - $ref: "#/components/parameters/VaultParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/schedules:
    get:
      summary: "Fetch all schedules for a project"
      operationId: "ListProjectSchedules"
      tags:
        - "project"
        - "schedule"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectSchedulesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new schedule"
      operationId: "CreateProjectSchedule"
      tags:
        - "project"
        - "schedule"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectScheduleBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectScheduleResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/schedules/{schedule_id}:
    get:
      summary: "Fetch a specific schedule for a project"
      operationId: "ShowProjectSchedule"
      tags:
        - "project"
        - "schedule"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ScheduleParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectScheduleResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific schedule for a project"
      operationId: "UpdateProjectSchedule"
      tags:
        - "project"
        - "schedule"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ScheduleParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectScheduleBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectScheduleResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific schedule for a project"
      operationId: "DeleteProjectSchedule"
      tags:
        - "project"
        - "schedule"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ScheduleParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/executions:
    get:
      summary: "Fetch all executions for a project"
      operationId: "ListProjectExecutions"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectExecutionsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new execution"
      operationId: "CreateProjectExecution"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectExecutionBody"
      responses:
        "200":
          $ref: "#/components/responses/ProjectExecutionResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/executions/{execution_id}:
    get:
      summary: "Fetch a specific execution for a project"
      operationId: "ShowProjectExecution"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ExecutionParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectExecutionResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific execution for a project"
      operationId: "DeleteProjectExecution"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ExecutionParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/executions/{execution_id}/purge:
    get:
      summary: "Purge a specific execution for a project"
      operationId: "PurgeProjectExecution"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ExecutionParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /projects/{project_id}/executions/{execution_id}/output:
    get:
      summary: "Output a specific execution for a project"
      operationId: "OutputProjectExecution"
      tags:
        - "project"
        - "execution"
      parameters:
        - $ref: "#/components/parameters/ProjectParam"
        - $ref: "#/components/parameters/ExecutionParam"
      responses:
        "200":
          $ref: "#/components/responses/ProjectOutputResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /events:
    get:
      summary: "Fetch all events"
      operationId: "ListGlobalEvents"
      tags:
        - "event"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GlobalEventsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /runners:
    get:
      summary: "Fetch all runners"
      operationId: "ListGlobalRunners"
      tags:
        - "runner"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GlobalRunnersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new global runner"
      operationId: "CreateGlobalRunner"
      tags:
        - "runner"
      requestBody:
        $ref: "#/components/requestBodies/CreateGlobalRunnerBody"
      responses:
        "200":
          $ref: "#/components/responses/GlobalRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /runners/{runner_id}:
    get:
      summary: "Fetch a specific runner"
      operationId: "ShowGlobalRunner"
      tags:
        - "shared"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/RunnerParam"
      responses:
        "200":
          $ref: "#/components/responses/GlobalRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific runner"
      operationId: "UpdateGlobalRunner"
      tags:
        - "runner"
      parameters:
        - $ref: "#/components/parameters/RunnerParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateGlobalRunnerBody"
      responses:
        "200":
          $ref: "#/components/responses/GlobalRunnerResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific runner"
      operationId: "DeleteGlobalRunner"
      tags:
        - "shared"
        - "runner"
      parameters:
        - $ref: "#/components/parameters/RunnerParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups:
    get:
      summary: "Fetch all available groups"
      operationId: "ListGroups"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new group"
      operationId: "CreateGroup"
      tags:
        - "group"
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}:
    get:
      summary: "Fetch a specific group"
      operationId: "ShowGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific group"
      operationId: "UpdateGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific group"
      operationId: "DeleteGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/users:
    get:
      summary: "Fetch all users attached to group"
      operationId: "ListGroupUsers"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to group"
      operationId: "AttachGroupToUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for group"
      operationId: "PermitGroupUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from group"
      operationId: "DeleteGroupFromUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/projects:
    get:
      summary: "Fetch all projects attached to group"
      operationId: "ListGroupProjects"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupProjectsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a project to group"
      operationId: "AttachGroupToProject"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupProjectPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update project perms for group"
      operationId: "PermitGroupProject"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupProjectPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a project from group"
      operationId: "DeleteGroupFromProject"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupProjectDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      summary: "Fetch all available users"
      operationId: "ListUsers"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new user"
      operationId: "CreateUser"
      tags:
        - "user"
      requestBody:
        $ref: "#/components/requestBodies/CreateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}:
    get:
      summary: "Fetch a specific user"
      operationId: "ShowUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific user"
      operationId: "UpdateUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific user"
      operationId: "DeleteUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/groups:
    get:
      summary: "Fetch all groups attached to user"
      operationId: "ListUserGroups"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to user"
      operationId: "AttachUserToGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for user"
      operationId: "PermitUserGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from user"
      operationId: "DeleteUserFromGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/projects:
    get:
      summary: "Fetch all projects attached to user"
      operationId: "ListUserProjects"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserProjectsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a project to user"
      operationId: "AttachUserToProject"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserProjectPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update project perms for user"
      operationId: "PermitUserProject"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserProjectPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a project from user"
      operationId: "DeleteUserFromProject"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserProjectDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-API-Key
    Bearer:
      type: http
      scheme: bearer
    Basic:
      type: http
      scheme: basic

  parameters:
    SearchQueryParam:
      name: "search"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Search query"

    PagingLimitParam:
      name: "limit"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 100
      description: "Paging limit"
      x-example: 100
    PagingOffsetParam:
      name: "offset"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 0
      description: "Paging offset"
      x-example: 0

    SortColumnParam:
      name: "sort"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Sorting column"
    SortOrderParam:
      name: "order"
      in: "query"
      required: false
      schema:
        type: "string"
        default: "asc"
        enum:
          - "asc"
          - "desc"
      description: "Sorting order"
      x-example: "desc"

    AuthProviderParam:
      in: "path"
      name: "provider"
      description: "An identifier for the auth provider"
      schema:
        type: "string"
      required: true
      x-example: "github"
    AuthStateParam:
      name: "state"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth state"
    AuthCodeParam:
      name: "code"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth code"

    ProjectParam:
      in: "path"
      name: "project_id"
      description: "A project identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "project-1"
      x-go-name: "ProjectID"
    CredentialParam:
      in: "path"
      name: "credential_id"
      description: "A credential identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "credential-1"
      x-go-name: "CredentialID"
    RepositoryParam:
      in: "path"
      name: "repository_id"
      description: "A repository identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "repository-1"
      x-go-name: "RepositoryID"
    InventoryParam:
      in: "path"
      name: "inventory_id"
      description: "A inventory identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "inventory-1"
      x-go-name: "InventoryID"
    EnvironmentParam:
      in: "path"
      name: "environment_id"
      description: "A environment identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "environment-1"
      x-go-name: "EnvironmentID"
    SecretParam:
      in: "path"
      name: "secret_id"
      description: "A secret identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "secret-1"
      x-go-name: "SecretID"
    ValueParam:
      in: "path"
      name: "value_id"
      description: "A value identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "value-1"
      x-go-name: "ValueID"
    TemplateParam:
      in: "path"
      name: "template_id"
      description: "A template identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "template-1"
      x-go-name: "TemplateID"
    SurveyParam:
      in: "path"
      name: "survey_id"
      description: "A survey identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "survey-1"
      x-go-name: "SurveyID"
    VaultParam:
      in: "path"
      name: "vault_id"
      description: "A vault identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "vault-1"
      x-go-name: "VaultID"
    ScheduleParam:
      in: "path"
      name: "schedule_id"
      description: "A schedule identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "schedule-1"
      x-go-name: "ScheduleID"
    RunnerParam:
      in: "path"
      name: "runner_id"
      description: "A runner identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "runner-1"
      x-go-name: "RunnerID"
    ExecutionParam:
      in: "path"
      name: "execution_id"
      description: "A execution identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "execution-1"
      x-go-name: "ExecutionID"
    GroupParam:
      in: "path"
      name: "group_id"
      description: "A group identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "group-1"
      x-go-name: "GroupID"
    UserParam:
      in: "path"
      name: "user_id"
      description: "A user identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "jdoe"
      x-go-name: "UserID"

  requestBodies:
    LoginAuthBody:
      description: "The credentials to authenticate"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "username"
              - "password"
            properties:
              username:
                type: "string"
              password:
                type: "string"
                format: "password"

    UpdateProfileBody:
      description: "The profile data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectBody:
      description: "The project data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              demo:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UpdateProjectBody:
      description: "The project data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    ProjectUserPermBody:
      description: "The project user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    ProjectUserDropBody:
      description: "The project user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"
    ProjectGroupPermBody:
      description: "The project group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    ProjectGroupDropBody:
      description: "The project group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"

    CreateProjectRunnerBody:
      description: "The runner data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              token:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectRunnerBody:
      description: "The runner data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              token:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectCredentialBody:
      description: "The credential data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              override:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              shell:
                x-omitempty: true
                x-nullable: true
                $ref: "#/components/schemas/CredentialShell"
              login:
                x-omitempty: true
                x-nullable: true
                $ref: "#/components/schemas/CredentialLogin"
    UpdateProjectCredentialBody:
      description: "The credential data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              override:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              shell:
                x-omitempty: true
                x-nullable: true
                $ref: "#/components/schemas/CredentialShell"
              login:
                x-omitempty: true
                x-nullable: true
                $ref: "#/components/schemas/CredentialLogin"

    CreateProjectRepositoryBody:
      description: "The repository data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              credential_id:
                type: "string"
                x-go-name: "CredentialID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              url:
                type: "string"
                x-omitempty: true
                x-nullable: true
              branch:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectRepositoryBody:
      description: "The repository data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              credential_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "CredentialID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              url:
                type: "string"
                x-omitempty: true
                x-nullable: true
              branch:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectInventoryBody:
      description: "The inventory data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              repository_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "RepositoryID"
              credential_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "CredentialID"
              become_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "BecomeID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectInventoryBody:
      description: "The inventory data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              repository_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "RepositoryID"
              credential_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "CredentialID"
              become_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "BecomeID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectEnvironmentBody:
      description: "The environment data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              secrets:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/EnvironmentSecret"
              values:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/EnvironmentValue"
    UpdateProjectEnvironmentBody:
      description: "The environment data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              secrets:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/EnvironmentSecret"
              values:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/EnvironmentValue"
    CreateProjectEnvironmentSecretBody:
      description: "The environment secret data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectEnvironmentSecretBody:
      description: "The environment secret data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true
    CreateProjectEnvironmentValueBody:
      description: "The environment value data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectEnvironmentValueBody:
      description: "The environment value data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              content:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectTemplateBody:
      description: "The template data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              repository_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "RepositoryID"
              inventory_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "InventoryID"
              environment_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "EnvironmentID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              playbook:
                type: "string"
                x-omitempty: true
                x-nullable: true
              arguments:
                type: "string"
                x-omitempty: true
                x-nullable: true
              limit:
                type: "string"
                x-omitempty: true
                x-nullable: true
              executor:
                type: "string"
                x-omitempty: true
                x-nullable: true
              branch:
                type: "string"
                x-omitempty: true
                x-nullable: true
              allow_override:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              surveys:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateSurvey"
              vaults:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateVault"
    UpdateProjectTemplateBody:
      description: "The template data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              repository_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "RepositoryID"
              inventory_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "InventoryID"
              environment_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "EnvironmentID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              playbook:
                type: "string"
                x-omitempty: true
                x-nullable: true
              arguments:
                type: "string"
                x-omitempty: true
                x-nullable: true
              limit:
                type: "string"
                x-omitempty: true
                x-nullable: true
              branch:
                type: "string"
                x-omitempty: true
                x-nullable: true
              allow_override:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              surveys:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateSurvey"
              vaults:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateVault"
    CreateProjectTemplateSurveyBody:
      description: "The template data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              title:
                type: "string"
                x-omitempty: true
                x-nullable: true
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              required:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              values:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateValue"
    UpdateProjectTemplateSurveyBody:
      description: "The template data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              title:
                type: "string"
                x-omitempty: true
                x-nullable: true
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              required:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              values:
                type: "array"
                x-omitempty: true
                x-nullable: true
                items:
                  $ref: "#/components/schemas/TemplateValue"
    CreateProjectTemplateVaultBody:
      description: "The template data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              credential_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "CredentialID"
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              script:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateProjectTemplateVaultBody:
      description: "The template data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              credential_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "CredentialID"
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              kind:
                type: "string"
                x-omitempty: true
                x-nullable: true
              script:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateProjectScheduleBody:
      description: "The schedule data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              template_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "TemplateID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              cron:
                type: "string"
                x-omitempty: true
                x-nullable: true
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UpdateProjectScheduleBody:
      description: "The schedule data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              template_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "TemplateID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              cron:
                type: "string"
                x-omitempty: true
                x-nullable: true
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true

    CreateProjectExecutionBody:
      description: "The execution data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              template_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "TemplateID"
              status:
                type: "string"
                x-omitempty: true
                x-nullable: true
              debug:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              playbook:
                type: "string"
                x-omitempty: true
                x-nullable: true
              environment:
                type: "string"
                x-omitempty: true
                x-nullable: true
              secret:
                type: "string"
                x-omitempty: true
                x-nullable: true
              limit:
                type: "string"
                x-omitempty: true
                x-nullable: true
              branch:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateGlobalRunnerBody:
      description: "The runner data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              project_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "ProjectID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              token:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateGlobalRunnerBody:
      description: "The runner data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              project_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "ProjectID"
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              token:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateGroupBody:
      description: "The group data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateGroupBody:
      description: "The group data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    GroupUserPermBody:
      description: "The group user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    GroupUserDropBody:
      description: "The group user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"
    GroupProjectPermBody:
      description: "The group project data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "project"
              - "perm"
            properties:
              project:
                type: "string"
              perm:
                type: "string"
    GroupProjectDropBody:
      description: "The group project data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "project"
            properties:
              project:
                type: "string"

    CreateUserBody:
      description: "The user data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: false
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: true
    UpdateUserBody:
      description: "The user data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UserGroupPermBody:
      description: "The user group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    UserGroupDropBody:
      description: "The user group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"
    UserProjectPermBody:
      description: "The user project data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "project"
              - "perm"
            properties:
              project:
                type: "string"
              perm:
                type: "string"
    UserProjectDropBody:
      description: "The user project data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "project"
            properties:
              project:
                type: "string"

  responses:
    NotFoundError:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    InternalServerError:
      description: "Some internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    SuccessMessage:
      description: "Plain success message"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    ValidationError:
      description: "Failed to validate request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAuthorizedError:
      description: "User is not authorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    AlreadyAttachedError:
      description: "Resource is already attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAttachedError:
      description: "Resource is not attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ActionFailedError:
      description: "Failed to execute action for resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    InvalidTokenError:
      description: "Failed to generate or validate token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    BadCredentialsError:
      description: "Unauthorized with wrong credentials"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    GeneralError:
      description: "Some error unrelated to the handler"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ProvidersResponse:
      description: "A collection of auth providers"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "providers"
            properties:
              total:
                type: integer
                format: int64
              providers:
                type: "array"
                items:
                  $ref: "#/components/schemas/Provider"

    VerifyResponse:
      description: "Metadata of the auth token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthVerify"
    LoginResponse:
      description: "Generated token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    RefreshResponse:
      description: "Refreshed token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    TokenResponse:
      description: "Generated token never expiring"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    ProfileResponse:
      description: "The current profile details"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile"

    ProjectsResponse:
      description: "A collection of projects"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "projects"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              projects:
                type: "array"
                items:
                  $ref: "#/components/schemas/Project"
    ProjectResponse:
      description: "The details for a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Project"
    ProjectUsersResponse:
      description: "A collection of project users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                $ref: "#/components/schemas/Project"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserProject"
    ProjectGroupsResponse:
      description: "A collection of project groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                $ref: "#/components/schemas/Project"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupProject"

    ProjectEventsResponse:
      description: "A collection of events for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "events"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              events:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"

    ProjectRunnersResponse:
      description: "A collection of runners for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "runners"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              runners:
                type: "array"
                items:
                  $ref: "#/components/schemas/Runner"
    ProjectRunnerResponse:
      description: "The details for a runner of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Runner"

    ProjectCredentialsResponse:
      description: "A collection of credentials for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "credentials"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              credentials:
                type: "array"
                items:
                  $ref: "#/components/schemas/Credential"
    ProjectCredentialResponse:
      description: "The details for a credential of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Credential"

    ProjectRepositoriesResponse:
      description: "A collection of repositories for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "repositories"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              repositories:
                type: "array"
                items:
                  $ref: "#/components/schemas/Repository"
    ProjectRepositoryResponse:
      description: "The details for a repository of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Repository"

    ProjectInventoriesResponse:
      description: "A collection of inventories for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "inventories"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              inventories:
                type: "array"
                items:
                  $ref: "#/components/schemas/Inventory"
    ProjectInventoryResponse:
      description: "The details for a inventory of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Inventory"

    ProjectEnvironmentsResponse:
      description: "A collection of environments for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "environments"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              environments:
                type: "array"
                items:
                  $ref: "#/components/schemas/Environment"
    ProjectEnvironmentResponse:
      description: "The details for a environment of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Environment"
    ProjectEnvironmentSecretResponse:
      description: "The details for an environment secret of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvironmentSecret"
    ProjectEnvironmentValueResponse:
      description: "The details for an environment value of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnvironmentValue"

    ProjectTemplatesResponse:
      description: "A collection of templates for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "templates"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              templates:
                type: "array"
                items:
                  $ref: "#/components/schemas/Template"
    ProjectTemplateResponse:
      description: "The details for a template of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Template"
    ProjectTemplateSurveyResponse:
      description: "The details for a template survey of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TemplateSurvey"
    ProjectTemplateVaultResponse:
      description: "The details for a template vault of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TemplateVault"

    ProjectSchedulesResponse:
      description: "A collection of schedules for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "schedules"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              schedules:
                type: "array"
                items:
                  $ref: "#/components/schemas/Schedule"
    ProjectScheduleResponse:
      description: "The details for a schedule of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Schedule"

    ProjectExecutionsResponse:
      description: "A collection of schedules for a project"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "executions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              project:
                readOnly: true
                $ref: "#/components/schemas/Project"
              executions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Execution"
    ProjectExecutionResponse:
      description: "The details for a schedule of a project"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Execution"

    ProjectOutputResponse:
      description: "The logging for a execution of a project"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/Output"

    GlobalEventsResponse:
      description: "A collection of events"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "events"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              events:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"

    GlobalRunnersResponse:
      description: "A collection of runners"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "runners"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              runners:
                type: "array"
                items:
                  $ref: "#/components/schemas/Runner"
    GlobalRunnerResponse:
      description: "The details for a runner"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Runner"

    GroupsResponse:
      description: "A collection of groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
    GroupResponse:
      description: "The details for a group"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    GroupUsersResponse:
      description: "A collection of group users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"
    GroupProjectsResponse:
      description: "A collection of group projects"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "projects"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              projects:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupProject"

    UsersResponse:
      description: "A collection of users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    UserResponse:
      description: "The details for an user"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserGroupsResponse:
      description: "A collection of user groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"
    UserProjectsResponse:
      description: "A collection of user projects"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "projects"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              projects:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserProject"

  schemas:
    AuthToken:
      type: "object"
      required:
        - "token"
      properties:
        token:
          type: "string"
          readOnly: true
        expires_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    AuthVerify:
      type: "object"
      required:
        - "username"
      properties:
        username:
          type: "string"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    Profile:
      title: "Profile"
      description: "Model to represent profile"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          readOnly: true
        active:
          type: "boolean"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"
        groups:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserGroup"
        projects:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserProject"

    Event:
      title: "Event"
      description: "Model to represent event"
      type: "object"
      properties:
        user_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "UserID"
        user_handle:
          type: "string"
          x-omitempty: true
          x-nullable: true
        user_display:
          type: "string"
          x-omitempty: true
          x-nullable: true
        project_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "ProjectID"
        project_display:
          type: "string"
          x-omitempty: true
          x-nullable: true
        object_id:
          type: "string"
          x-go-name: "ObjectID"
        object_display:
          type: "string"
        object_type:
          type: "string"
          enum:
            - "credential"
            - "environment"
            - "execution"
            - "group_project"
            - "group_user"
            - "group"
            - "inventory"
            - "project_group"
            - "project_user"
            - "project"
            - "repository"
            - "runner"
            - "schedule"
            - "template"
            - "user_group"
            - "user_project"
            - "user"
        action:
          type: "string"
          enum:
            - "create"
            - "update"
            - "delete"
        attrs:
          type: "object"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Output:
      title: "Output"
      description: "Model to represent output"
      type: "object"
      properties:
        execution_id:
          type: "string"
          x-go-name: "ExecutionID"
        execution:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Execution"
        content:
          type: "string"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Project:
      title: "Project"
      description: "Model to represent project"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        slug:
          type: "string"
        name:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Credential:
      title: "Credential"
      description: "Model to represent credential"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        slug:
          type: "string"
        name:
          type: "string"
        kind:
          type: "string"
          enum:
            - "empty"
            - "shell"
            - "login"
        override:
          type: "boolean"
        shell:
          x-omitempty: true
          x-nullable: true
          $ref: "#/components/schemas/CredentialShell"
        login:
          x-omitempty: true
          x-nullable: true
          $ref: "#/components/schemas/CredentialLogin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    CredentialShell:
      title: "Credential Shell"
      description: "Model to represent credential shell"
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        private_key:
          type: "string"

    CredentialLogin:
      title: "Credential Login"
      description: "Model to represent credential login"
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"

    Repository:
      title: "Repository"
      description: "Model to represent repository"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        credential_id:
          type: "string"
          x-go-name: "CredentialID"
        credential:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Credential"
        slug:
          type: "string"
        name:
          type: "string"
        url:
          type: "string"
        branch:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Inventory:
      title: "Inventory"
      description: "Model to represent inventory"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        repository_id:
          type: "string"
          x-go-name: "RepositoryID"
        repository:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Repository"
        credential_id:
          type: "string"
          x-go-name: "CredentialID"
        credential:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Credential"
        become_id:
          type: "string"
          x-go-name: "BecomeID"
        become:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Credential"
        slug:
          type: "string"
        name:
          type: "string"
        kind:
          type: "string"
          enum:
            - "static"
            - "file"
        content:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Environment:
      title: "Environment"
      description: "Model to represent environment"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        slug:
          type: "string"
        name:
          type: "string"
        secrets:
          type: "array"
          items:
            $ref: "#/components/schemas/EnvironmentSecret"
        values:
          type: "array"
          items:
            $ref: "#/components/schemas/EnvironmentValue"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    EnvironmentSecret:
      title: "Environment Secret"
      description: "Model to represent environment secret"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        name:
          type: "string"
        kind:
          type: "string"
          enum:
            - "var"
            - "env"
        content:
          type: "string"

    EnvironmentValue:
      title: "Environment Value"
      description: "Model to represent environment value"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        name:
          type: "string"
        kind:
          type: "string"
          enum:
            - "var"
            - "env"
        content:
          type: "string"

    Template:
      title: "Template"
      description: "Model to represent template"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        repository_id:
          type: "string"
          x-go-name: "RepositoryID"
        repository:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Repository"
        inventory_id:
          type: "string"
          x-go-name: "InventoryID"
        inventory:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Inventory"
        environment_id:
          type: "string"
          x-go-name: "EnvironmentID"
        environment:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Environment"
        slug:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        playbook:
          type: "string"
        arguments:
          type: "string"
        limit:
          type: "string"
        executor:
          type: "string"
        branch:
          type: "string"
        allow_override:
          type: "boolean"
        surveys:
          type: "array"
          x-omitempty: true
          x-nullable: true
          items:
            $ref: "#/components/schemas/TemplateSurvey"
        vaults:
          type: "array"
          x-omitempty: true
          x-nullable: true
          items:
            $ref: "#/components/schemas/TemplateVault"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    TemplateSurvey:
      title: "Template Survey"
      description: "Model to represent template survey"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        name:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        kind:
          type: "string"
          enum:
            - "string"
            - "number"
            - "enum"
            - "secret"
        required:
          type: "boolean"
        values:
          type: "array"
          items:
            $ref: "#/components/schemas/TemplateValue"

    TemplateValue:
      title: "Template Value"
      description: "Model to represent template value"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        name:
          type: "string"
        value:
          type: "string"

    TemplateVault:
      title: "Template Vault"
      description: "Model to represent template vault"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        credential_id:
          type: "string"
          x-go-name: "CredentialID"
          x-omitempty: true
          x-nullable: true
        credential:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Credential"
        name:
          type: "string"
        kind:
          type: "string"
          enum:
            - "password"
            - "script"
        script:
          type: "string"
          x-omitempty: true
          x-nullable: true

    Schedule:
      title: "Schedule"
      description: "Model to represent schedule"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        template_id:
          type: "string"
          x-go-name: "TemplateID"
        template:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Template"
        slug:
          type: "string"
        name:
          type: "string"
        cron:
          type: "string"
        active:
          type: "boolean"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Runner:
      title: "Runner"
      description: "Model to represent runner"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        project:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Project"
        slug:
          type: "string"
        name:
          type: "string"
        token:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Execution:
      title: "Execution"
      description: "Model to represent execution"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        template_id:
          type: "string"
          x-go-name: "TemplateID"
        template:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Template"
        name:
          type: "string"
        status:
          type: "string"
        debug:
          type: "boolean"
        playbook:
          type: "string"
        environment:
          type: "string"
        secret:
          type: "string"
        limit:
          type: "string"
        branch:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Group:
      title: "Group"
      description: "Model to represent group"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    GroupProject:
      title: "Group Project"
      description: "Model to represent group project"
      type: "object"
      required:
        - "group_id"
        - "project_id"
      properties:
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        project:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Project"
        perm:
          type: "string"
          default: "user"
          enum:
            - "owner"
            - "user"
            - "admin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    User:
      title: "User"
      description: "Model to represent user"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        active:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"

    UserAuth:
      title: "User Auth"
      description: "Model to represent user auth"
      type: "object"
      properties:
        provider:
          type: "string"
        ref:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserGroup:
      title: "User Group"
      description: "Model to represent user group"
      type: "object"
      required:
        - "user_id"
        - "group_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        perm:
          type: "string"
          default: "user"
          enum:
            - "owner"
            - "user"
            - "admin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserProject:
      title: "User Project"
      description: "Model to represent user project"
      type: "object"
      required:
        - "user_id"
        - "project_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        project_id:
          type: "string"
          x-go-name: "ProjectID"
        project:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Project"
        perm:
          type: "string"
          default: "user"
          enum:
            - "owner"
            - "user"
            - "admin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Provider:
      title: "Provider"
      description: "Model to represent auth provider"
      type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
        driver:
          type: "string"
          readOnly: true
        display:
          type: "string"
          readOnly: true
        icon:
          type: "string"
          readOnly: true

    Backup:
      title: "Backup"
      description: "Structure of general project backup"
      type: "object"
      properties:
        meta:
          type: "object"
          properties:
            name:
              type: "string"
            version:
              type: "string"
        credentials:
          type: "array"
          items:
            type: "object"
            properties: {}
        repositories:
          type: "array"
          items:
            type: "object"
            properties: {}
        inventories:
          type: "array"
          items:
            type: "object"
            properties: {}
        environments:
          type: "array"
          items:
            type: "object"
            properties: {}
        templates:
          type: "array"
          items:
            type: "object"
            properties: {}
        schedules:
          type: "array"
          items:
            type: "object"
            properties: {}
        runners:
          type: "array"
          items:
            type: "object"
            properties: {}

    Notification:
      title: "Notification"
      description: "Generic response for errors and validations"
      type: "object"
      properties:
        status:
          type: "integer"
          x-omitempty: true
        message:
          type: "string"
          x-omitempty: true
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/Validation"

    Validation:
      title: "Validation"
      description: "General structure to show validation errors"
      type: "object"
      properties:
        field:
          type: "string"
        message:
          type: "string"

...
