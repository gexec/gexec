// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// contextKey provides a type for use with context.WithValue.
type contextKey string

const (
	BasicScopes  contextKey = "Basic.Scopes"
	BearerScopes contextKey = "Bearer.Scopes"
	HeaderScopes contextKey = "Header.Scopes"
)

// Defines values for CredentialKind.
const (
	Empty CredentialKind = "empty"
	Login CredentialKind = "login"
	Ssh   CredentialKind = "ssh"
)

// Defines values for EnvironmentSecretKind.
const (
	Env EnvironmentSecretKind = "env"
	Var EnvironmentSecretKind = "var"
)

// Defines values for InventoryKind.
const (
	File      InventoryKind = "file"
	Static    InventoryKind = "static"
	Workspace InventoryKind = "workspace"
)

// Defines values for TeamProjectPerm.
const (
	TeamProjectPermAdmin TeamProjectPerm = "admin"
	TeamProjectPermOwner TeamProjectPerm = "owner"
	TeamProjectPermUser  TeamProjectPerm = "user"
)

// Defines values for TemplateSurveyKind.
const (
	Enum   TemplateSurveyKind = "enum"
	Number TemplateSurveyKind = "number"
	Secret TemplateSurveyKind = "secret"
	String TemplateSurveyKind = "string"
)

// Defines values for TemplateVaultKind.
const (
	Password TemplateVaultKind = "password"
	Script   TemplateVaultKind = "script"
)

// Defines values for UserProjectPerm.
const (
	UserProjectPermAdmin UserProjectPerm = "admin"
	UserProjectPermOwner UserProjectPerm = "owner"
	UserProjectPermUser  UserProjectPerm = "user"
)

// Defines values for UserTeamPerm.
const (
	UserTeamPermAdmin UserTeamPerm = "admin"
	UserTeamPermOwner UserTeamPerm = "owner"
	UserTeamPermUser  UserTeamPerm = "user"
)

// Defines values for SortOrderParam.
const (
	SortOrderParamAsc  SortOrderParam = "asc"
	SortOrderParamDesc SortOrderParam = "desc"
)

// Defines values for ListProjectsParamsOrder.
const (
	ListProjectsParamsOrderAsc  ListProjectsParamsOrder = "asc"
	ListProjectsParamsOrderDesc ListProjectsParamsOrder = "desc"
)

// Defines values for ListProjectCredentialsParamsOrder.
const (
	ListProjectCredentialsParamsOrderAsc  ListProjectCredentialsParamsOrder = "asc"
	ListProjectCredentialsParamsOrderDesc ListProjectCredentialsParamsOrder = "desc"
)

// Defines values for ListProjectEnvironmentsParamsOrder.
const (
	ListProjectEnvironmentsParamsOrderAsc  ListProjectEnvironmentsParamsOrder = "asc"
	ListProjectEnvironmentsParamsOrderDesc ListProjectEnvironmentsParamsOrder = "desc"
)

// Defines values for ListProjectInventoriesParamsOrder.
const (
	ListProjectInventoriesParamsOrderAsc  ListProjectInventoriesParamsOrder = "asc"
	ListProjectInventoriesParamsOrderDesc ListProjectInventoriesParamsOrder = "desc"
)

// Defines values for ListProjectRepositoriesParamsOrder.
const (
	ListProjectRepositoriesParamsOrderAsc  ListProjectRepositoriesParamsOrder = "asc"
	ListProjectRepositoriesParamsOrderDesc ListProjectRepositoriesParamsOrder = "desc"
)

// Defines values for ListProjectSchedulesParamsOrder.
const (
	ListProjectSchedulesParamsOrderAsc  ListProjectSchedulesParamsOrder = "asc"
	ListProjectSchedulesParamsOrderDesc ListProjectSchedulesParamsOrder = "desc"
)

// Defines values for ListProjectTasksParamsOrder.
const (
	ListProjectTasksParamsOrderAsc  ListProjectTasksParamsOrder = "asc"
	ListProjectTasksParamsOrderDesc ListProjectTasksParamsOrder = "desc"
)

// Defines values for ListProjectTeamsParamsOrder.
const (
	ListProjectTeamsParamsOrderAsc  ListProjectTeamsParamsOrder = "asc"
	ListProjectTeamsParamsOrderDesc ListProjectTeamsParamsOrder = "desc"
)

// Defines values for ListProjectTemplatesParamsOrder.
const (
	ListProjectTemplatesParamsOrderAsc  ListProjectTemplatesParamsOrder = "asc"
	ListProjectTemplatesParamsOrderDesc ListProjectTemplatesParamsOrder = "desc"
)

// Defines values for ListProjectUsersParamsOrder.
const (
	ListProjectUsersParamsOrderAsc  ListProjectUsersParamsOrder = "asc"
	ListProjectUsersParamsOrderDesc ListProjectUsersParamsOrder = "desc"
)

// Defines values for ListRunnersParamsOrder.
const (
	ListRunnersParamsOrderAsc  ListRunnersParamsOrder = "asc"
	ListRunnersParamsOrderDesc ListRunnersParamsOrder = "desc"
)

// Defines values for ListTeamsParamsOrder.
const (
	ListTeamsParamsOrderAsc  ListTeamsParamsOrder = "asc"
	ListTeamsParamsOrderDesc ListTeamsParamsOrder = "desc"
)

// Defines values for ListTeamProjectsParamsOrder.
const (
	ListTeamProjectsParamsOrderAsc  ListTeamProjectsParamsOrder = "asc"
	ListTeamProjectsParamsOrderDesc ListTeamProjectsParamsOrder = "desc"
)

// Defines values for ListTeamUsersParamsOrder.
const (
	ListTeamUsersParamsOrderAsc  ListTeamUsersParamsOrder = "asc"
	ListTeamUsersParamsOrderDesc ListTeamUsersParamsOrder = "desc"
)

// Defines values for ListUsersParamsOrder.
const (
	ListUsersParamsOrderAsc  ListUsersParamsOrder = "asc"
	ListUsersParamsOrderDesc ListUsersParamsOrder = "desc"
)

// Defines values for ListUserProjectsParamsOrder.
const (
	ListUserProjectsParamsOrderAsc  ListUserProjectsParamsOrder = "asc"
	ListUserProjectsParamsOrderDesc ListUserProjectsParamsOrder = "desc"
)

// Defines values for ListUserTeamsParamsOrder.
const (
	ListUserTeamsParamsOrderAsc  ListUserTeamsParamsOrder = "asc"
	ListUserTeamsParamsOrderDesc ListUserTeamsParamsOrder = "desc"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Token     *string    `json:"token,omitempty"`
}

// AuthVerify defines model for AuthVerify.
type AuthVerify struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Username  *string    `json:"username,omitempty"`
}

// Credential Model to represent credential
type Credential struct {
	CreatedAt *time.Time      `json:"created_at,omitempty"`
	Id        *string         `json:"id,omitempty"`
	Kind      *CredentialKind `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login     *CredentialLogin `json:"login,omitempty"`
	Name      *string          `json:"name,omitempty"`
	Override  *bool            `json:"override,omitempty"`
	ProjectId *string          `json:"project_id,omitempty"`

	// Shell Model to represent credential shell
	Shell     *CredentialShell `json:"shell,omitempty"`
	Slug      *string          `json:"slug,omitempty"`
	UpdatedAt *time.Time       `json:"updated_at,omitempty"`
}

// CredentialKind defines model for Credential.Kind.
type CredentialKind string

// CredentialLogin Model to represent credential login
type CredentialLogin struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// CredentialShell Model to represent credential shell
type CredentialShell struct {
	Password   *string `json:"password,omitempty"`
	PrivateKey *string `json:"private_key,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// Environment Model to represent environment
type Environment struct {
	Content   *[]EnvironmentSecret `json:"content,omitempty"`
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Id        *string              `json:"id,omitempty"`
	Name      *string              `json:"name,omitempty"`
	ProjectId *string              `json:"project_id,omitempty"`
	Secrets   *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug      *string              `json:"slug,omitempty"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
}

// EnvironmentSecret Model to represent environment secret
type EnvironmentSecret struct {
	Content *string                `json:"content,omitempty"`
	Id      *string                `json:"id,omitempty"`
	Kind    *EnvironmentSecretKind `json:"kind,omitempty"`
	Name    *string                `json:"name,omitempty"`
}

// EnvironmentSecretKind defines model for EnvironmentSecret.Kind.
type EnvironmentSecretKind string

// Event Model to represent event
type Event struct {
	Action         *string    `json:"action,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	Description    *string    `json:"description,omitempty"`
	ObjectDisplay  *string    `json:"object_display,omitempty"`
	ObjectId       *string    `json:"object_id,omitempty"`
	ObjectType     *string    `json:"object_type,omitempty"`
	ProjectDisplay *string    `json:"project_display,omitempty"`
	ProjectId      *string    `json:"project_id,omitempty"`
	UserDisplay    *string    `json:"user_display,omitempty"`
	UserId         *string    `json:"user_id,omitempty"`
}

// Inventory Model to represent inventory
type Inventory struct {
	// Become Model to represent credential
	Become    *Credential `json:"become,omitempty"`
	BecomeId  *string     `json:"become_id,omitempty"`
	Content   *string     `json:"content,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`

	// Credential Model to represent credential
	Credential   *Credential    `json:"credential,omitempty"`
	CredentialId *string        `json:"credential_id,omitempty"`
	Id           *string        `json:"id,omitempty"`
	Kind         *InventoryKind `json:"kind,omitempty"`
	Name         *string        `json:"name,omitempty"`
	ProjectId    *string        `json:"project_id,omitempty"`

	// Repository Model to represent repository
	Repository   *Repository `json:"repository,omitempty"`
	RepositoryId *string     `json:"repository_id,omitempty"`
	Slug         *string     `json:"slug,omitempty"`
	UpdatedAt    *time.Time  `json:"updated_at,omitempty"`
}

// InventoryKind defines model for Inventory.Kind.
type InventoryKind string

// Logging Model to represent logging
type Logging struct {
	Output *string `json:"output,omitempty"`

	// Task Model to represent task
	Task   *Task      `json:"task,omitempty"`
	TaskId *string    `json:"task_id,omitempty"`
	Time   *time.Time `json:"time,omitempty"`
}

// Notification Generic response for errors and validations
type Notification struct {
	Errors  *[]Validation `json:"errors,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// Profile Model to represent profile
type Profile struct {
	Active    *bool          `json:"active,omitempty"`
	Admin     *bool          `json:"admin,omitempty"`
	Auths     *[]UserAuth    `json:"auths,omitempty"`
	CreatedAt *time.Time     `json:"created_at,omitempty"`
	Email     *string        `json:"email,omitempty"`
	Fullname  *string        `json:"fullname,omitempty"`
	Id        *string        `json:"id,omitempty"`
	Password  *string        `json:"password,omitempty"`
	Profile   *string        `json:"profile,omitempty"`
	Projects  *[]UserProject `json:"projects,omitempty"`
	Teams     *[]UserTeam    `json:"teams,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
	Username  *string        `json:"username,omitempty"`
}

// Project Model to represent project
type Project struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Provider Model to represent auth provider
type Provider struct {
	Display *string `json:"display,omitempty"`
	Driver  *string `json:"driver,omitempty"`
	Icon    *string `json:"icon,omitempty"`
	Name    *string `json:"name,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// Repository Model to represent repository
type Repository struct {
	Branch    *string    `json:"branch,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Credential Model to represent credential
	Credential   *Credential `json:"credential,omitempty"`
	CredentialId *string     `json:"credential_id,omitempty"`
	Id           *string     `json:"id,omitempty"`
	Name         *string     `json:"name,omitempty"`
	ProjectId    *string     `json:"project_id,omitempty"`
	Slug         *string     `json:"slug,omitempty"`
	UpdatedAt    *time.Time  `json:"updated_at,omitempty"`
	Url          *string     `json:"url,omitempty"`
}

// Runner Model to represent runner
type Runner struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	Token     *string    `json:"token,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Schedule Model to represent schedule
type Schedule struct {
	Active    *bool      `json:"active,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Cron      *string    `json:"cron,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	ProjectId *string    `json:"project_id,omitempty"`
	Slug      *string    `json:"slug,omitempty"`

	// Template Model to represent template
	Template   *Template  `json:"template,omitempty"`
	TemplateId *string    `json:"template_id,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// Task Model to represent task
type Task struct {
	Branch      *string    `json:"branch,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Debug       *bool      `json:"debug,omitempty"`
	Environment *string    `json:"environment,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Limit       *string    `json:"limit,omitempty"`
	Playbook    *string    `json:"playbook,omitempty"`
	ProjectId   *string    `json:"project_id,omitempty"`
	Secret      *string    `json:"secret,omitempty"`
	Status      *string    `json:"status,omitempty"`

	// Template Model to represent template
	Template   *Template  `json:"template,omitempty"`
	TemplateId *string    `json:"template_id,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// Team Model to represent team
type Team struct {
	Auths     *[]TeamAuth `json:"auths,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Id        *string     `json:"id,omitempty"`
	Name      *string     `json:"name,omitempty"`
	Slug      *string     `json:"slug,omitempty"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
}

// TeamAuth Model to represent team auth
type TeamAuth struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Provider  *string    `json:"provider,omitempty"`
	Ref       *string    `json:"ref,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TeamProject Model to represent team project
type TeamProject struct {
	CreatedAt *time.Time       `json:"created_at,omitempty"`
	Perm      *TeamProjectPerm `json:"perm,omitempty"`

	// Project Model to represent project
	Project   *Project `json:"project,omitempty"`
	ProjectId string   `json:"project_id"`

	// Team Model to represent team
	Team      *Team      `json:"team,omitempty"`
	TeamId    string     `json:"team_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TeamProjectPerm defines model for TeamProject.Perm.
type TeamProjectPerm string

// Template Model to represent template
type Template struct {
	AllowOverride *bool      `json:"allow_override,omitempty"`
	Arguments     *string    `json:"arguments,omitempty"`
	Branch        *string    `json:"branch,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Description   *string    `json:"description,omitempty"`

	// Environment Model to represent environment
	Environment   *Environment `json:"environment,omitempty"`
	EnvironmentId *string      `json:"environment_id,omitempty"`
	Executor      *string      `json:"executor,omitempty"`
	Id            *string      `json:"id,omitempty"`

	// Inventory Model to represent inventory
	Inventory   *Inventory `json:"inventory,omitempty"`
	InventoryId *string    `json:"inventory_id,omitempty"`
	Limit       *string    `json:"limit,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Playbook    *string    `json:"playbook,omitempty"`
	ProjectId   *string    `json:"project_id,omitempty"`

	// Repository Model to represent repository
	Repository   *Repository       `json:"repository,omitempty"`
	RepositoryId *string           `json:"repository_id,omitempty"`
	Slug         *string           `json:"slug,omitempty"`
	Survey       *[]TemplateSurvey `json:"survey,omitempty"`
	UpdatedAt    *time.Time        `json:"updated_at,omitempty"`
	Vaults       *[]TemplateVault  `json:"vaults,omitempty"`
}

// TemplateSurvey Model to represent template survey
type TemplateSurvey struct {
	// Credential Model to represent credential
	Credential   *Credential         `json:"credential,omitempty"`
	CredentialId *string             `json:"credential_id,omitempty"`
	Description  *string             `json:"description,omitempty"`
	Id           *string             `json:"id,omitempty"`
	Kind         *TemplateSurveyKind `json:"kind,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Required     *bool               `json:"required,omitempty"`
	Title        *string             `json:"title,omitempty"`
	Values       *[]TemplateValue    `json:"values,omitempty"`
}

// TemplateSurveyKind defines model for TemplateSurvey.Kind.
type TemplateSurveyKind string

// TemplateValue Model to represent template value
type TemplateValue struct {
	Id    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// TemplateVault Model to represent template vault
type TemplateVault struct {
	// Credential Model to represent credential
	Credential   *Credential        `json:"credential,omitempty"`
	CredentialId *string            `json:"credential_id,omitempty"`
	Id           *string            `json:"id,omitempty"`
	Kind         *TemplateVaultKind `json:"kind,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Script       *string            `json:"script,omitempty"`
}

// TemplateVaultKind defines model for TemplateVault.Kind.
type TemplateVaultKind string

// User Model to represent user
type User struct {
	Active    *bool       `json:"active,omitempty"`
	Admin     *bool       `json:"admin,omitempty"`
	Auths     *[]UserAuth `json:"auths,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Email     *string     `json:"email,omitempty"`
	Fullname  *string     `json:"fullname,omitempty"`
	Id        *string     `json:"id,omitempty"`
	Password  *string     `json:"password,omitempty"`
	Profile   *string     `json:"profile,omitempty"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
	Username  *string     `json:"username,omitempty"`
}

// UserAuth Model to represent user auth
type UserAuth struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Provider  *string    `json:"provider,omitempty"`
	Ref       *string    `json:"ref,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserProject Model to represent user project
type UserProject struct {
	CreatedAt *time.Time       `json:"created_at,omitempty"`
	Perm      *UserProjectPerm `json:"perm,omitempty"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	ProjectId string     `json:"project_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserId string `json:"user_id"`
}

// UserProjectPerm defines model for UserProject.Perm.
type UserProjectPerm string

// UserTeam Model to represent user team
type UserTeam struct {
	CreatedAt *time.Time    `json:"created_at,omitempty"`
	Perm      *UserTeamPerm `json:"perm,omitempty"`

	// Team Model to represent team
	Team      *Team      `json:"team,omitempty"`
	TeamId    string     `json:"team_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserId string `json:"user_id"`
}

// UserTeamPerm defines model for UserTeam.Perm.
type UserTeamPerm string

// Validation General structure to show validation errors
type Validation struct {
	Field   *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
}

// AuthCodeParam defines model for AuthCodeParam.
type AuthCodeParam = string

// AuthProviderParam defines model for AuthProviderParam.
type AuthProviderParam = string

// AuthStateParam defines model for AuthStateParam.
type AuthStateParam = string

// CredentialParam defines model for CredentialParam.
type CredentialParam = string

// EnvironmentParam defines model for EnvironmentParam.
type EnvironmentParam = string

// InventoryParam defines model for InventoryParam.
type InventoryParam = string

// PagingLimitParam defines model for PagingLimitParam.
type PagingLimitParam = int

// PagingOffsetParam defines model for PagingOffsetParam.
type PagingOffsetParam = int

// ProjectParam defines model for ProjectParam.
type ProjectParam = string

// RepositoryParam defines model for RepositoryParam.
type RepositoryParam = string

// RunnerParam defines model for RunnerParam.
type RunnerParam = string

// ScheduleParam defines model for ScheduleParam.
type ScheduleParam = string

// SearchQueryParam defines model for SearchQueryParam.
type SearchQueryParam = string

// SortColumnParam defines model for SortColumnParam.
type SortColumnParam = string

// SortOrderParam defines model for SortOrderParam.
type SortOrderParam string

// TaskParam defines model for TaskParam.
type TaskParam = string

// TeamParam defines model for TeamParam.
type TeamParam = string

// TemplateParam defines model for TemplateParam.
type TemplateParam = string

// UserParam defines model for UserParam.
type UserParam = string

// ActionFailedError Generic response for errors and validations
type ActionFailedError = Notification

// AlreadyAttachedError Generic response for errors and validations
type AlreadyAttachedError = Notification

// BadCredentialsError Generic response for errors and validations
type BadCredentialsError = Notification

// CallbackResponse defines model for CallbackResponse.
type CallbackResponse = AuthToken

// EventsResponse defines model for EventsResponse.
type EventsResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

// InternalServerError Generic response for errors and validations
type InternalServerError = Notification

// InvalidTokenError Generic response for errors and validations
type InvalidTokenError = Notification

// LoginResponse defines model for LoginResponse.
type LoginResponse = AuthToken

// NotAttachedError Generic response for errors and validations
type NotAttachedError = Notification

// NotAuthorizedError Generic response for errors and validations
type NotAuthorizedError = Notification

// NotFoundError Generic response for errors and validations
type NotFoundError = Notification

// ProfileResponse Model to represent profile
type ProfileResponse = Profile

// ProjectCredentialResponse Model to represent credential
type ProjectCredentialResponse = Credential

// ProjectCredentialsResponse defines model for ProjectCredentialsResponse.
type ProjectCredentialsResponse struct {
	Credentials []Credential `json:"credentials"`
	Limit       int64        `json:"limit"`
	Offset      int64        `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectEnvironmentsResponse defines model for ProjectEnvironmentsResponse.
type ProjectEnvironmentsResponse struct {
	Environments []Environment `json:"environments"`
	Limit        int64         `json:"limit"`
	Offset       int64         `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectEnvironmentyResponse Model to represent environment
type ProjectEnvironmentyResponse = Environment

// ProjectInventoriesResponse defines model for ProjectInventoriesResponse.
type ProjectInventoriesResponse struct {
	Inventories []Inventory `json:"inventories"`
	Limit       int64       `json:"limit"`
	Offset      int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectInventoryResponse Model to represent inventory
type ProjectInventoryResponse = Inventory

// ProjectLoggingResponse Model to represent logging
type ProjectLoggingResponse = Logging

// ProjectRepositoriesResponse defines model for ProjectRepositoriesResponse.
type ProjectRepositoriesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project      *Project     `json:"project,omitempty"`
	Repositories []Repository `json:"repositories"`
	Total        int64        `json:"total"`
}

// ProjectRepositoryResponse Model to represent repository
type ProjectRepositoryResponse = Repository

// ProjectResponse Model to represent project
type ProjectResponse = Project

// ProjectScheduleResponse Model to represent schedule
type ProjectScheduleResponse = Schedule

// ProjectSchedulesResponse defines model for ProjectSchedulesResponse.
type ProjectSchedulesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Schedules []Schedule `json:"schedules"`
	Total     int64      `json:"total"`
}

// ProjectTaskResponse Model to represent task
type ProjectTaskResponse = Task

// ProjectTasksResponse defines model for ProjectTasksResponse.
type ProjectTasksResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Tasks   []Task   `json:"tasks"`
	Total   int64    `json:"total"`
}

// ProjectTeamsResponse defines model for ProjectTeamsResponse.
type ProjectTeamsResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Teams   []TeamProject `json:"teams"`
	Total   int64         `json:"total"`
}

// ProjectTemplateResponse Model to represent template
type ProjectTemplateResponse = Template

// ProjectTemplatesResponse defines model for ProjectTemplatesResponse.
type ProjectTemplatesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Templates []Template `json:"templates"`
	Total     int64      `json:"total"`
}

// ProjectUsersResponse defines model for ProjectUsersResponse.
type ProjectUsersResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Total   int64         `json:"total"`
	Users   []UserProject `json:"users"`
}

// ProjectsResponse defines model for ProjectsResponse.
type ProjectsResponse struct {
	Limit    int64     `json:"limit"`
	Offset   int64     `json:"offset"`
	Projects []Project `json:"projects"`
	Total    int64     `json:"total"`
}

// ProviderInitError Generic response for errors and validations
type ProviderInitError = Notification

// ProviderResponse defines model for ProviderResponse.
type ProviderResponse = []Provider

// RefreshResponse defines model for RefreshResponse.
type RefreshResponse = AuthToken

// RunnerResponse Model to represent runner
type RunnerResponse = Runner

// RunnersResponse defines model for RunnersResponse.
type RunnersResponse struct {
	Limit   int64    `json:"limit"`
	Offset  int64    `json:"offset"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

// SuccessMessage Generic response for errors and validations
type SuccessMessage = Notification

// TeamProjectsResponse defines model for TeamProjectsResponse.
type TeamProjectsResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []TeamProject `json:"projects"`

	// Team Model to represent team
	Team  *Team `json:"team,omitempty"`
	Total int64 `json:"total"`
}

// TeamResponse Model to represent team
type TeamResponse = Team

// TeamUsersResponse defines model for TeamUsersResponse.
type TeamUsersResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Team Model to represent team
	Team  *Team      `json:"team,omitempty"`
	Total int64      `json:"total"`
	Users []UserTeam `json:"users"`
}

// TeamsResponse defines model for TeamsResponse.
type TeamsResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Teams  []Team `json:"teams"`
	Total  int64  `json:"total"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse = AuthToken

// UserProjectsResponse defines model for UserProjectsResponse.
type UserProjectsResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []UserProject `json:"projects"`
	Total    int64         `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UserResponse Model to represent user
type UserResponse = User

// UserTeamsResponse defines model for UserTeamsResponse.
type UserTeamsResponse struct {
	Limit  int64      `json:"limit"`
	Offset int64      `json:"offset"`
	Teams  []UserTeam `json:"teams"`
	Total  int64      `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Total  int64  `json:"total"`
	Users  []User `json:"users"`
}

// ValidationError Generic response for errors and validations
type ValidationError = Notification

// VerifyResponse defines model for VerifyResponse.
type VerifyResponse = AuthVerify

// CreateProjectBody defines model for CreateProjectBody.
type CreateProjectBody struct {
	Name string  `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// CreateProjectCredentialBody defines model for CreateProjectCredentialBody.
type CreateProjectCredentialBody struct {
	Kind string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     string           `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// CreateProjectEnvironmentBody defines model for CreateProjectEnvironmentBody.
type CreateProjectEnvironmentBody struct {
	Content *[]EnvironmentSecret `json:"content,omitempty"`
	Name    string               `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
}

// CreateProjectInventoryBody defines model for CreateProjectInventoryBody.
type CreateProjectInventoryBody struct {
	BecomeId     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Kind         string  `json:"kind,omitempty"`
	Name         string  `json:"name,omitempty"`
	RepositoryId string  `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// CreateProjectRepositoryBody defines model for CreateProjectRepositoryBody.
type CreateProjectRepositoryBody struct {
	Branch       string  `json:"branch,omitempty"`
	CredentialId string  `json:"credential_id"`
	Name         string  `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          string  `json:"url,omitempty"`
}

// CreateProjectScheduleBody defines model for CreateProjectScheduleBody.
type CreateProjectScheduleBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       string  `json:"cron,omitempty"`
	Name       string  `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateId string  `json:"template_id,omitempty"`
}

// CreateProjectTaskBody defines model for CreateProjectTaskBody.
type CreateProjectTaskBody struct {
	Branch      *string `json:"branch,omitempty"`
	Debug       *bool   `json:"debug,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Limit       *string `json:"limit,omitempty"`
	Playbook    *string `json:"playbook,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Status      *string `json:"status,omitempty"`
	TemplateId  string  `json:"template_id,omitempty"`
}

// CreateProjectTemplateBody defines model for CreateProjectTemplateBody.
type CreateProjectTemplateBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentId string            `json:"environment_id,omitempty"`
	Executor      string            `json:"executor,omitempty"`
	InventoryId   string            `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          string            `json:"name"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryId  string            `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Survey        *[]TemplateSurvey `json:"survey,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// CreateRunnerBody defines model for CreateRunnerBody.
type CreateRunnerBody struct {
	Name  string  `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// CreateTeamBody defines model for CreateTeamBody.
type CreateTeamBody struct {
	Name string  `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// CreateUserBody defines model for CreateUserBody.
type CreateUserBody struct {
	Active   *bool  `json:"active,omitempty"`
	Admin    *bool  `json:"admin,omitempty"`
	Email    string `json:"email,omitempty"`
	Fullname string `json:"fullname,omitempty"`
	Password string `json:"password,omitempty"`
	Username string `json:"username,omitempty"`
}

// LoginAuthBody defines model for LoginAuthBody.
type LoginAuthBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ProjectTeamDropBody defines model for ProjectTeamDropBody.
type ProjectTeamDropBody struct {
	Team string `json:"team"`
}

// ProjectTeamPermBody defines model for ProjectTeamPermBody.
type ProjectTeamPermBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// ProjectUserDropBody defines model for ProjectUserDropBody.
type ProjectUserDropBody struct {
	User string `json:"user"`
}

// ProjectUserPermBody defines model for ProjectUserPermBody.
type ProjectUserPermBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// TeamProjectDropBody defines model for TeamProjectDropBody.
type TeamProjectDropBody struct {
	Project string `json:"project"`
}

// TeamProjectPermBody defines model for TeamProjectPermBody.
type TeamProjectPermBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// TeamUserDropBody defines model for TeamUserDropBody.
type TeamUserDropBody struct {
	User string `json:"user"`
}

// TeamUserPermBody defines model for TeamUserPermBody.
type TeamUserPermBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// UpdateProfileBody defines model for UpdateProfileBody.
type UpdateProfileBody struct {
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UpdateProjectBody defines model for UpdateProjectBody.
type UpdateProjectBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateProjectCredentialBody defines model for UpdateProjectCredentialBody.
type UpdateProjectCredentialBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// UpdateProjectEnvironmentBody defines model for UpdateProjectEnvironmentBody.
type UpdateProjectEnvironmentBody struct {
	Content *[]EnvironmentSecret `json:"content,omitempty"`
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
}

// UpdateProjectInventoryBody defines model for UpdateProjectInventoryBody.
type UpdateProjectInventoryBody struct {
	BecomeId     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryId *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// UpdateProjectRepositoryBody defines model for UpdateProjectRepositoryBody.
type UpdateProjectRepositoryBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// UpdateProjectScheduleBody defines model for UpdateProjectScheduleBody.
type UpdateProjectScheduleBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateId *string `json:"template_id,omitempty"`
}

// UpdateProjectTemplateBody defines model for UpdateProjectTemplateBody.
type UpdateProjectTemplateBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentId *string           `json:"environment_id,omitempty"`
	Executor      *string           `json:"executor,omitempty"`
	InventoryId   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryId  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Survey        *[]TemplateSurvey `json:"survey,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// UpdateRunnerBody defines model for UpdateRunnerBody.
type UpdateRunnerBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// UpdateTeamBody defines model for UpdateTeamBody.
type UpdateTeamBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateUserBody defines model for UpdateUserBody.
type UpdateUserBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserProjectDropBody defines model for UserProjectDropBody.
type UserProjectDropBody struct {
	Project string `json:"project"`
}

// UserProjectPermBody defines model for UserProjectPermBody.
type UserProjectPermBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// UserTeamDropBody defines model for UserTeamDropBody.
type UserTeamDropBody struct {
	Team string `json:"team"`
}

// UserTeamPermBody defines model for UserTeamPermBody.
type UserTeamPermBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// LoginAuthJSONBody defines parameters for LoginAuth.
type LoginAuthJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CallbackProviderParams defines parameters for CallbackProvider.
type CallbackProviderParams struct {
	// State Auth state
	State *AuthStateParam `form:"state,omitempty" json:"state,omitempty"`

	// Code Auth code
	Code *AuthCodeParam `form:"code,omitempty" json:"code,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateProfileJSONBody defines parameters for UpdateProfile.
type UpdateProfileJSONBody struct {
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ListProjectsParams defines parameters for ListProjects.
type ListProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectsParamsOrder defines parameters for ListProjects.
type ListProjectsParamsOrder string

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Name string  `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// ListProjectCredentialsParams defines parameters for ListProjectCredentials.
type ListProjectCredentialsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectCredentialsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectCredentialsParamsOrder defines parameters for ListProjectCredentials.
type ListProjectCredentialsParamsOrder string

// CreateProjectCredentialJSONBody defines parameters for CreateProjectCredential.
type CreateProjectCredentialJSONBody struct {
	Kind string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     string           `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// UpdateProjectCredentialJSONBody defines parameters for UpdateProjectCredential.
type UpdateProjectCredentialJSONBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// ListProjectEnvironmentsParams defines parameters for ListProjectEnvironments.
type ListProjectEnvironmentsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectEnvironmentsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectEnvironmentsParamsOrder defines parameters for ListProjectEnvironments.
type ListProjectEnvironmentsParamsOrder string

// CreateProjectEnvironmentJSONBody defines parameters for CreateProjectEnvironment.
type CreateProjectEnvironmentJSONBody struct {
	Content *[]EnvironmentSecret `json:"content,omitempty"`
	Name    string               `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
}

// UpdateProjectEnvironmentJSONBody defines parameters for UpdateProjectEnvironment.
type UpdateProjectEnvironmentJSONBody struct {
	Content *[]EnvironmentSecret `json:"content,omitempty"`
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
}

// ListProjectInventoriesParams defines parameters for ListProjectInventories.
type ListProjectInventoriesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectInventoriesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectInventoriesParamsOrder defines parameters for ListProjectInventories.
type ListProjectInventoriesParamsOrder string

// CreateProjectInventoryJSONBody defines parameters for CreateProjectInventory.
type CreateProjectInventoryJSONBody struct {
	BecomeId     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Kind         string  `json:"kind,omitempty"`
	Name         string  `json:"name,omitempty"`
	RepositoryId string  `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// UpdateProjectInventoryJSONBody defines parameters for UpdateProjectInventory.
type UpdateProjectInventoryJSONBody struct {
	BecomeId     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryId *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// ListProjectRepositoriesParams defines parameters for ListProjectRepositories.
type ListProjectRepositoriesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectRepositoriesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectRepositoriesParamsOrder defines parameters for ListProjectRepositories.
type ListProjectRepositoriesParamsOrder string

// CreateProjectRepositoryJSONBody defines parameters for CreateProjectRepository.
type CreateProjectRepositoryJSONBody struct {
	Branch       string  `json:"branch,omitempty"`
	CredentialId string  `json:"credential_id"`
	Name         string  `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          string  `json:"url,omitempty"`
}

// UpdateProjectRepositoryJSONBody defines parameters for UpdateProjectRepository.
type UpdateProjectRepositoryJSONBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialId *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// ListProjectSchedulesParams defines parameters for ListProjectSchedules.
type ListProjectSchedulesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectSchedulesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectSchedulesParamsOrder defines parameters for ListProjectSchedules.
type ListProjectSchedulesParamsOrder string

// CreateProjectScheduleJSONBody defines parameters for CreateProjectSchedule.
type CreateProjectScheduleJSONBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       string  `json:"cron,omitempty"`
	Name       string  `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateId string  `json:"template_id,omitempty"`
}

// UpdateProjectScheduleJSONBody defines parameters for UpdateProjectSchedule.
type UpdateProjectScheduleJSONBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateId *string `json:"template_id,omitempty"`
}

// ListProjectTasksParams defines parameters for ListProjectTasks.
type ListProjectTasksParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectTasksParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectTasksParamsOrder defines parameters for ListProjectTasks.
type ListProjectTasksParamsOrder string

// CreateProjectTaskJSONBody defines parameters for CreateProjectTask.
type CreateProjectTaskJSONBody struct {
	Branch      *string `json:"branch,omitempty"`
	Debug       *bool   `json:"debug,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Limit       *string `json:"limit,omitempty"`
	Playbook    *string `json:"playbook,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Status      *string `json:"status,omitempty"`
	TemplateId  string  `json:"template_id,omitempty"`
}

// DeleteProjectFromTeamJSONBody defines parameters for DeleteProjectFromTeam.
type DeleteProjectFromTeamJSONBody struct {
	Team string `json:"team"`
}

// ListProjectTeamsParams defines parameters for ListProjectTeams.
type ListProjectTeamsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectTeamsParamsOrder defines parameters for ListProjectTeams.
type ListProjectTeamsParamsOrder string

// AttachProjectToTeamJSONBody defines parameters for AttachProjectToTeam.
type AttachProjectToTeamJSONBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// PermitProjectTeamJSONBody defines parameters for PermitProjectTeam.
type PermitProjectTeamJSONBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// ListProjectTemplatesParams defines parameters for ListProjectTemplates.
type ListProjectTemplatesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectTemplatesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectTemplatesParamsOrder defines parameters for ListProjectTemplates.
type ListProjectTemplatesParamsOrder string

// CreateProjectTemplateJSONBody defines parameters for CreateProjectTemplate.
type CreateProjectTemplateJSONBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentId string            `json:"environment_id,omitempty"`
	Executor      string            `json:"executor,omitempty"`
	InventoryId   string            `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          string            `json:"name"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryId  string            `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Survey        *[]TemplateSurvey `json:"survey,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// UpdateProjectTemplateJSONBody defines parameters for UpdateProjectTemplate.
type UpdateProjectTemplateJSONBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentId *string           `json:"environment_id,omitempty"`
	Executor      *string           `json:"executor,omitempty"`
	InventoryId   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryId  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Survey        *[]TemplateSurvey `json:"survey,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// DeleteProjectFromUserJSONBody defines parameters for DeleteProjectFromUser.
type DeleteProjectFromUserJSONBody struct {
	User string `json:"user"`
}

// ListProjectUsersParams defines parameters for ListProjectUsers.
type ListProjectUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectUsersParamsOrder defines parameters for ListProjectUsers.
type ListProjectUsersParamsOrder string

// AttachProjectToUserJSONBody defines parameters for AttachProjectToUser.
type AttachProjectToUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// PermitProjectUserJSONBody defines parameters for PermitProjectUser.
type PermitProjectUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// ListRunnersParams defines parameters for ListRunners.
type ListRunnersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListRunnersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListRunnersParamsOrder defines parameters for ListRunners.
type ListRunnersParamsOrder string

// CreateRunnerJSONBody defines parameters for CreateRunner.
type CreateRunnerJSONBody struct {
	Name  string  `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// UpdateRunnerJSONBody defines parameters for UpdateRunner.
type UpdateRunnerJSONBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamsParamsOrder defines parameters for ListTeams.
type ListTeamsParamsOrder string

// CreateTeamJSONBody defines parameters for CreateTeam.
type CreateTeamJSONBody struct {
	Name string  `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateTeamJSONBody defines parameters for UpdateTeam.
type UpdateTeamJSONBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// DeleteTeamFromProjectJSONBody defines parameters for DeleteTeamFromProject.
type DeleteTeamFromProjectJSONBody struct {
	Project string `json:"project"`
}

// ListTeamProjectsParams defines parameters for ListTeamProjects.
type ListTeamProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamProjectsParamsOrder defines parameters for ListTeamProjects.
type ListTeamProjectsParamsOrder string

// AttachTeamToProjectJSONBody defines parameters for AttachTeamToProject.
type AttachTeamToProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// PermitTeamProjectJSONBody defines parameters for PermitTeamProject.
type PermitTeamProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// DeleteTeamFromUserJSONBody defines parameters for DeleteTeamFromUser.
type DeleteTeamFromUserJSONBody struct {
	User string `json:"user"`
}

// ListTeamUsersParams defines parameters for ListTeamUsers.
type ListTeamUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamUsersParamsOrder defines parameters for ListTeamUsers.
type ListTeamUsersParamsOrder string

// AttachTeamToUserJSONBody defines parameters for AttachTeamToUser.
type AttachTeamToUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// PermitTeamUserJSONBody defines parameters for PermitTeamUser.
type PermitTeamUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUsersParamsOrder defines parameters for ListUsers.
type ListUsersParamsOrder string

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Active   *bool  `json:"active,omitempty"`
	Admin    *bool  `json:"admin,omitempty"`
	Email    string `json:"email,omitempty"`
	Fullname string `json:"fullname,omitempty"`
	Password string `json:"password,omitempty"`
	Username string `json:"username,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// DeleteUserFromProjectJSONBody defines parameters for DeleteUserFromProject.
type DeleteUserFromProjectJSONBody struct {
	Project string `json:"project"`
}

// ListUserProjectsParams defines parameters for ListUserProjects.
type ListUserProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserProjectsParamsOrder defines parameters for ListUserProjects.
type ListUserProjectsParamsOrder string

// AttachUserToProjectJSONBody defines parameters for AttachUserToProject.
type AttachUserToProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// PermitUserProjectJSONBody defines parameters for PermitUserProject.
type PermitUserProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// DeleteUserFromTeamJSONBody defines parameters for DeleteUserFromTeam.
type DeleteUserFromTeamJSONBody struct {
	Team string `json:"team"`
}

// ListUserTeamsParams defines parameters for ListUserTeams.
type ListUserTeamsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserTeamsParamsOrder defines parameters for ListUserTeams.
type ListUserTeamsParamsOrder string

// AttachUserToTeamJSONBody defines parameters for AttachUserToTeam.
type AttachUserToTeamJSONBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// PermitUserTeamJSONBody defines parameters for PermitUserTeam.
type PermitUserTeamJSONBody struct {
	Perm string `json:"perm"`
	Team string `json:"team"`
}

// LoginAuthJSONRequestBody defines body for LoginAuth for application/json ContentType.
type LoginAuthJSONRequestBody LoginAuthJSONBody

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody UpdateProfileJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// CreateProjectCredentialJSONRequestBody defines body for CreateProjectCredential for application/json ContentType.
type CreateProjectCredentialJSONRequestBody CreateProjectCredentialJSONBody

// UpdateProjectCredentialJSONRequestBody defines body for UpdateProjectCredential for application/json ContentType.
type UpdateProjectCredentialJSONRequestBody UpdateProjectCredentialJSONBody

// CreateProjectEnvironmentJSONRequestBody defines body for CreateProjectEnvironment for application/json ContentType.
type CreateProjectEnvironmentJSONRequestBody CreateProjectEnvironmentJSONBody

// UpdateProjectEnvironmentJSONRequestBody defines body for UpdateProjectEnvironment for application/json ContentType.
type UpdateProjectEnvironmentJSONRequestBody UpdateProjectEnvironmentJSONBody

// CreateProjectInventoryJSONRequestBody defines body for CreateProjectInventory for application/json ContentType.
type CreateProjectInventoryJSONRequestBody CreateProjectInventoryJSONBody

// UpdateProjectInventoryJSONRequestBody defines body for UpdateProjectInventory for application/json ContentType.
type UpdateProjectInventoryJSONRequestBody UpdateProjectInventoryJSONBody

// CreateProjectRepositoryJSONRequestBody defines body for CreateProjectRepository for application/json ContentType.
type CreateProjectRepositoryJSONRequestBody CreateProjectRepositoryJSONBody

// UpdateProjectRepositoryJSONRequestBody defines body for UpdateProjectRepository for application/json ContentType.
type UpdateProjectRepositoryJSONRequestBody UpdateProjectRepositoryJSONBody

// CreateProjectScheduleJSONRequestBody defines body for CreateProjectSchedule for application/json ContentType.
type CreateProjectScheduleJSONRequestBody CreateProjectScheduleJSONBody

// UpdateProjectScheduleJSONRequestBody defines body for UpdateProjectSchedule for application/json ContentType.
type UpdateProjectScheduleJSONRequestBody UpdateProjectScheduleJSONBody

// CreateProjectTaskJSONRequestBody defines body for CreateProjectTask for application/json ContentType.
type CreateProjectTaskJSONRequestBody CreateProjectTaskJSONBody

// DeleteProjectFromTeamJSONRequestBody defines body for DeleteProjectFromTeam for application/json ContentType.
type DeleteProjectFromTeamJSONRequestBody DeleteProjectFromTeamJSONBody

// AttachProjectToTeamJSONRequestBody defines body for AttachProjectToTeam for application/json ContentType.
type AttachProjectToTeamJSONRequestBody AttachProjectToTeamJSONBody

// PermitProjectTeamJSONRequestBody defines body for PermitProjectTeam for application/json ContentType.
type PermitProjectTeamJSONRequestBody PermitProjectTeamJSONBody

// CreateProjectTemplateJSONRequestBody defines body for CreateProjectTemplate for application/json ContentType.
type CreateProjectTemplateJSONRequestBody CreateProjectTemplateJSONBody

// UpdateProjectTemplateJSONRequestBody defines body for UpdateProjectTemplate for application/json ContentType.
type UpdateProjectTemplateJSONRequestBody UpdateProjectTemplateJSONBody

// DeleteProjectFromUserJSONRequestBody defines body for DeleteProjectFromUser for application/json ContentType.
type DeleteProjectFromUserJSONRequestBody DeleteProjectFromUserJSONBody

// AttachProjectToUserJSONRequestBody defines body for AttachProjectToUser for application/json ContentType.
type AttachProjectToUserJSONRequestBody AttachProjectToUserJSONBody

// PermitProjectUserJSONRequestBody defines body for PermitProjectUser for application/json ContentType.
type PermitProjectUserJSONRequestBody PermitProjectUserJSONBody

// CreateRunnerJSONRequestBody defines body for CreateRunner for application/json ContentType.
type CreateRunnerJSONRequestBody CreateRunnerJSONBody

// UpdateRunnerJSONRequestBody defines body for UpdateRunner for application/json ContentType.
type UpdateRunnerJSONRequestBody UpdateRunnerJSONBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody CreateTeamJSONBody

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody UpdateTeamJSONBody

// DeleteTeamFromProjectJSONRequestBody defines body for DeleteTeamFromProject for application/json ContentType.
type DeleteTeamFromProjectJSONRequestBody DeleteTeamFromProjectJSONBody

// AttachTeamToProjectJSONRequestBody defines body for AttachTeamToProject for application/json ContentType.
type AttachTeamToProjectJSONRequestBody AttachTeamToProjectJSONBody

// PermitTeamProjectJSONRequestBody defines body for PermitTeamProject for application/json ContentType.
type PermitTeamProjectJSONRequestBody PermitTeamProjectJSONBody

// DeleteTeamFromUserJSONRequestBody defines body for DeleteTeamFromUser for application/json ContentType.
type DeleteTeamFromUserJSONRequestBody DeleteTeamFromUserJSONBody

// AttachTeamToUserJSONRequestBody defines body for AttachTeamToUser for application/json ContentType.
type AttachTeamToUserJSONRequestBody AttachTeamToUserJSONBody

// PermitTeamUserJSONRequestBody defines body for PermitTeamUser for application/json ContentType.
type PermitTeamUserJSONRequestBody PermitTeamUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// DeleteUserFromProjectJSONRequestBody defines body for DeleteUserFromProject for application/json ContentType.
type DeleteUserFromProjectJSONRequestBody DeleteUserFromProjectJSONBody

// AttachUserToProjectJSONRequestBody defines body for AttachUserToProject for application/json ContentType.
type AttachUserToProjectJSONRequestBody AttachUserToProjectJSONBody

// PermitUserProjectJSONRequestBody defines body for PermitUserProject for application/json ContentType.
type PermitUserProjectJSONRequestBody PermitUserProjectJSONBody

// DeleteUserFromTeamJSONRequestBody defines body for DeleteUserFromTeam for application/json ContentType.
type DeleteUserFromTeamJSONRequestBody DeleteUserFromTeamJSONBody

// AttachUserToTeamJSONRequestBody defines body for AttachUserToTeam for application/json ContentType.
type AttachUserToTeamJSONRequestBody AttachUserToTeamJSONBody

// PermitUserTeamJSONRequestBody defines body for PermitUserTeam for application/json ContentType.
type PermitUserTeamJSONRequestBody PermitUserTeamJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(w http.ResponseWriter, r *http.Request)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ListProvider(w http.ResponseWriter, r *http.Request)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(w http.ResponseWriter, r *http.Request)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(w http.ResponseWriter, r *http.Request)
	// Callback for available auth providers
	// (GET /auth/{provider})
	CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams)
	// Fetch all available events
	// (GET /events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(w http.ResponseWriter, r *http.Request)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(w http.ResponseWriter, r *http.Request)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(w http.ResponseWriter, r *http.Request)
	// Fetch all available projects
	// (GET /projects)
	ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams)
	// Create a new project
	// (POST /projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Delete a specific project
	// (DELETE /projects/{project_id})
	DeleteProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch a specific project
	// (GET /projects/{project_id})
	ShowProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Update a specific project
	// (PUT /projects/{project_id})
	UpdateProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch all credentials for a project
	// (GET /projects/{project_id}/credentials)
	ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectCredentialsParams)
	// Create a new credential
	// (POST /projects/{project_id}/credentials)
	CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific credential for a project
	// (DELETE /projects/{project_id}/credentials/{credential_id})
	DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam)
	// Fetch a specific credential for a project
	// (GET /projects/{project_id}/credentials/{credential_id})
	ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam)
	// Update a specific credential for a project
	// (PUT /projects/{project_id}/credentials/{credential_id})
	UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam)
	// Fetch all environments for a project
	// (GET /projects/{project_id}/environments)
	ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectEnvironmentsParams)
	// Create a new environment
	// (POST /projects/{project_id}/environments)
	CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id})
	DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam)
	// Fetch a specific environment for a project
	// (GET /projects/{project_id}/environments/{environment_id})
	ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam)
	// Update a specific environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id})
	UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam)
	// Fetch all inventories for a project
	// (GET /projects/{project_id}/inventories)
	ListProjectInventories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectInventoriesParams)
	// Create a new inventory
	// (POST /projects/{project_id}/inventories)
	CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific inventory for a project
	// (DELETE /projects/{project_id}/inventories/{inventory_id})
	DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam)
	// Fetch a specific inventory for a project
	// (GET /projects/{project_id}/inventories/{inventory_id})
	ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam)
	// Update a specific inventory for a project
	// (PUT /projects/{project_id}/inventories/{inventory_id})
	UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam)
	// Fetch all repositories for a project
	// (GET /projects/{project_id}/repositories)
	ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectRepositoriesParams)
	// Create a new repository
	// (POST /projects/{project_id}/repositories)
	CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific repository for a project
	// (DELETE /projects/{project_id}/repositories/{repository_id})
	DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam)
	// Fetch a specific repository for a project
	// (GET /projects/{project_id}/repositories/{repository_id})
	ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam)
	// Update a specific repository for a project
	// (PUT /projects/{project_id}/repositories/{repository_id})
	UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam)
	// Fetch all schedules for a project
	// (GET /projects/{project_id}/schedules)
	ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectSchedulesParams)
	// Create a new schedule
	// (POST /projects/{project_id}/schedules)
	CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific schedule for a project
	// (DELETE /projects/{project_id}/schedules/{schedule_id})
	DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam)
	// Fetch a specific schedule for a project
	// (GET /projects/{project_id}/schedules/{schedule_id})
	ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam)
	// Update a specific schedule for a project
	// (PUT /projects/{project_id}/schedules/{schedule_id})
	UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam)
	// Fetch all tasks for a project
	// (GET /projects/{project_id}/tasks)
	ListProjectTasks(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTasksParams)
	// Create a new task
	// (POST /projects/{project_id}/tasks)
	CreateProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific task for a project
	// (DELETE /projects/{project_id}/tasks/{task_id})
	DeleteProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam)
	// Fetch a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id})
	ShowProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam)
	// Output a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id}/output)
	OutputProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam)
	// Stop a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id}/stop)
	StopProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam)
	// Unlink a team from project
	// (DELETE /projects/{project_id}/teams)
	DeleteProjectFromTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch all teams attached to project
	// (GET /projects/{project_id}/teams)
	ListProjectTeams(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTeamsParams)
	// Attach a team to project
	// (POST /projects/{project_id}/teams)
	AttachProjectToTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Update team perms for project
	// (PUT /projects/{project_id}/teams)
	PermitProjectTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch all templates for a project
	// (GET /projects/{project_id}/templates)
	ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTemplatesParams)
	// Create a new template
	// (POST /projects/{project_id}/templates)
	CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Delete a specific template for a project
	// (DELETE /projects/{project_id}/templates/{template_id})
	DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam)
	// Fetch a specific template for a project
	// (GET /projects/{project_id}/templates/{template_id})
	ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam)
	// Update a specific template for a project
	// (PUT /projects/{project_id}/templates/{template_id})
	UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam)
	// Unlink a user from project
	// (DELETE /projects/{project_id}/users)
	DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch all users attached to project
	// (GET /projects/{project_id}/users)
	ListProjectUsers(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectUsersParams)
	// Attach a user to project
	// (POST /projects/{project_id}/users)
	AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Update user perms for project
	// (PUT /projects/{project_id}/users)
	PermitProjectUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam)
	// Fetch all available runners
	// (GET /runners)
	ListRunners(w http.ResponseWriter, r *http.Request, params ListRunnersParams)
	// Create a new runner
	// (POST /runners)
	CreateRunner(w http.ResponseWriter, r *http.Request)
	// Delete a specific runner
	// (DELETE /runners/{runner_id})
	DeleteRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam)
	// Fetch a specific runner
	// (GET /runners/{runner_id})
	ShowRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam)
	// Update a specific runner
	// (PUT /runners/{runner_id})
	UpdateRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam)
	// Fetch all available teams
	// (GET /teams)
	ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams)
	// Create a new team
	// (POST /teams)
	CreateTeam(w http.ResponseWriter, r *http.Request)
	// Delete a specific team
	// (DELETE /teams/{team_id})
	DeleteTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Fetch a specific team
	// (GET /teams/{team_id})
	ShowTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Update a specific team
	// (PUT /teams/{team_id})
	UpdateTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Unlink a project from team
	// (DELETE /teams/{team_id}/projects)
	DeleteTeamFromProject(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Fetch all projects attached to team
	// (GET /teams/{team_id}/projects)
	ListTeamProjects(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamProjectsParams)
	// Attach a project to team
	// (POST /teams/{team_id}/projects)
	AttachTeamToProject(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Update project perms for team
	// (PUT /teams/{team_id}/projects)
	PermitTeamProject(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Unlink a user from team
	// (DELETE /teams/{team_id}/users)
	DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Fetch all users attached to team
	// (GET /teams/{team_id}/users)
	ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamUsersParams)
	// Attach a user to team
	// (POST /teams/{team_id}/users)
	AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Update user perms for team
	// (PUT /teams/{team_id}/users)
	PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId TeamParam)
	// Fetch all available users
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Unlink a project from user
	// (DELETE /users/{user_id}/projects)
	DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Fetch all projects attached to user
	// (GET /users/{user_id}/projects)
	ListUserProjects(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserProjectsParams)
	// Attach a project to user
	// (POST /users/{user_id}/projects)
	AttachUserToProject(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Update project perms for user
	// (PUT /users/{user_id}/projects)
	PermitUserProject(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Unlink a team from user
	// (DELETE /users/{user_id}/teams)
	DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Fetch all teams attached to user
	// (GET /users/{user_id}/teams)
	ListUserTeams(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserTeamsParams)
	// Attach a team to user
	// (POST /users/{user_id}/teams)
	AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Update team perms for user
	// (PUT /users/{user_id}/teams)
	PermitUserTeam(w http.ResponseWriter, r *http.Request, userId UserParam)
	// Handler for websocket connection
	// (GET /ws)
	Websockets(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate an user by credentials
// (POST /auth/login)
func (_ Unimplemented) LoginAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available auth providers
// (GET /auth/providers)
func (_ Unimplemented) ListProvider(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh an auth token before it expires
// (GET /auth/refresh)
func (_ Unimplemented) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify validity for an authentication token
// (GET /auth/verify)
func (_ Unimplemented) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Callback for available auth providers
// (GET /auth/{provider})
func (_ Unimplemented) CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available events
// (GET /events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch profile details of the personal account
// (GET /profile/self)
func (_ Unimplemented) ShowProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update your own profile information
// (PUT /profile/self)
func (_ Unimplemented) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an unlimited auth token
// (GET /profile/token)
func (_ Unimplemented) TokenProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available projects
// (GET /projects)
func (_ Unimplemented) ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project
// (POST /projects)
func (_ Unimplemented) CreateProject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific project
// (DELETE /projects/{project_id})
func (_ Unimplemented) DeleteProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific project
// (GET /projects/{project_id})
func (_ Unimplemented) ShowProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific project
// (PUT /projects/{project_id})
func (_ Unimplemented) UpdateProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all credentials for a project
// (GET /projects/{project_id}/credentials)
func (_ Unimplemented) ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectCredentialsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new credential
// (POST /projects/{project_id}/credentials)
func (_ Unimplemented) CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific credential for a project
// (DELETE /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific credential for a project
// (GET /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific credential for a project
// (PUT /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all environments for a project
// (GET /projects/{project_id}/environments)
func (_ Unimplemented) ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectEnvironmentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new environment
// (POST /projects/{project_id}/environments)
func (_ Unimplemented) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific environment for a project
// (DELETE /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific environment for a project
// (GET /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific environment for a project
// (PUT /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all inventories for a project
// (GET /projects/{project_id}/inventories)
func (_ Unimplemented) ListProjectInventories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectInventoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new inventory
// (POST /projects/{project_id}/inventories)
func (_ Unimplemented) CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific inventory for a project
// (DELETE /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific inventory for a project
// (GET /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific inventory for a project
// (PUT /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all repositories for a project
// (GET /projects/{project_id}/repositories)
func (_ Unimplemented) ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectRepositoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new repository
// (POST /projects/{project_id}/repositories)
func (_ Unimplemented) CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific repository for a project
// (DELETE /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific repository for a project
// (GET /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific repository for a project
// (PUT /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all schedules for a project
// (GET /projects/{project_id}/schedules)
func (_ Unimplemented) ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectSchedulesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new schedule
// (POST /projects/{project_id}/schedules)
func (_ Unimplemented) CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific schedule for a project
// (DELETE /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific schedule for a project
// (GET /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific schedule for a project
// (PUT /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all tasks for a project
// (GET /projects/{project_id}/tasks)
func (_ Unimplemented) ListProjectTasks(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /projects/{project_id}/tasks)
func (_ Unimplemented) CreateProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific task for a project
// (DELETE /projects/{project_id}/tasks/{task_id})
func (_ Unimplemented) DeleteProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific task for a project
// (GET /projects/{project_id}/tasks/{task_id})
func (_ Unimplemented) ShowProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Output a specific task for a project
// (GET /projects/{project_id}/tasks/{task_id}/output)
func (_ Unimplemented) OutputProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop a specific task for a project
// (GET /projects/{project_id}/tasks/{task_id}/stop)
func (_ Unimplemented) StopProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a team from project
// (DELETE /projects/{project_id}/teams)
func (_ Unimplemented) DeleteProjectFromTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all teams attached to project
// (GET /projects/{project_id}/teams)
func (_ Unimplemented) ListProjectTeams(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a team to project
// (POST /projects/{project_id}/teams)
func (_ Unimplemented) AttachProjectToTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update team perms for project
// (PUT /projects/{project_id}/teams)
func (_ Unimplemented) PermitProjectTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all templates for a project
// (GET /projects/{project_id}/templates)
func (_ Unimplemented) ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTemplatesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new template
// (POST /projects/{project_id}/templates)
func (_ Unimplemented) CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific template for a project
// (DELETE /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific template for a project
// (GET /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific template for a project
// (PUT /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from project
// (DELETE /projects/{project_id}/users)
func (_ Unimplemented) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to project
// (GET /projects/{project_id}/users)
func (_ Unimplemented) ListProjectUsers(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to project
// (POST /projects/{project_id}/users)
func (_ Unimplemented) AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for project
// (PUT /projects/{project_id}/users)
func (_ Unimplemented) PermitProjectUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available runners
// (GET /runners)
func (_ Unimplemented) ListRunners(w http.ResponseWriter, r *http.Request, params ListRunnersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new runner
// (POST /runners)
func (_ Unimplemented) CreateRunner(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific runner
// (DELETE /runners/{runner_id})
func (_ Unimplemented) DeleteRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific runner
// (GET /runners/{runner_id})
func (_ Unimplemented) ShowRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific runner
// (PUT /runners/{runner_id})
func (_ Unimplemented) UpdateRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available teams
// (GET /teams)
func (_ Unimplemented) ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new team
// (POST /teams)
func (_ Unimplemented) CreateTeam(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific team
// (DELETE /teams/{team_id})
func (_ Unimplemented) DeleteTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific team
// (GET /teams/{team_id})
func (_ Unimplemented) ShowTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific team
// (PUT /teams/{team_id})
func (_ Unimplemented) UpdateTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a project from team
// (DELETE /teams/{team_id}/projects)
func (_ Unimplemented) DeleteTeamFromProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all projects attached to team
// (GET /teams/{team_id}/projects)
func (_ Unimplemented) ListTeamProjects(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a project to team
// (POST /teams/{team_id}/projects)
func (_ Unimplemented) AttachTeamToProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project perms for team
// (PUT /teams/{team_id}/projects)
func (_ Unimplemented) PermitTeamProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from team
// (DELETE /teams/{team_id}/users)
func (_ Unimplemented) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to team
// (GET /teams/{team_id}/users)
func (_ Unimplemented) ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to team
// (POST /teams/{team_id}/users)
func (_ Unimplemented) AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for team
// (PUT /teams/{team_id}/users)
func (_ Unimplemented) PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available users
// (GET /users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific user
// (DELETE /users/{user_id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific user
// (GET /users/{user_id})
func (_ Unimplemented) ShowUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific user
// (PUT /users/{user_id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a project from user
// (DELETE /users/{user_id}/projects)
func (_ Unimplemented) DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all projects attached to user
// (GET /users/{user_id}/projects)
func (_ Unimplemented) ListUserProjects(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a project to user
// (POST /users/{user_id}/projects)
func (_ Unimplemented) AttachUserToProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project perms for user
// (PUT /users/{user_id}/projects)
func (_ Unimplemented) PermitUserProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a team from user
// (DELETE /users/{user_id}/teams)
func (_ Unimplemented) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all teams attached to user
// (GET /users/{user_id}/teams)
func (_ Unimplemented) ListUserTeams(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a team to user
// (POST /users/{user_id}/teams)
func (_ Unimplemented) AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update team perms for user
// (PUT /users/{user_id}/teams)
func (_ Unimplemented) PermitUserTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Handler for websocket connection
// (GET /ws)
func (_ Unimplemented) Websockets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginAuth operation middleware
func (siw *ServerInterfaceWrapper) LoginAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProvider operation middleware
func (siw *ServerInterfaceWrapper) ListProvider(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProvider(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshAuth operation middleware
func (siw *ServerInterfaceWrapper) RefreshAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyAuth operation middleware
func (siw *ServerInterfaceWrapper) VerifyAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CallbackProvider operation middleware
func (siw *ServerInterfaceWrapper) CallbackProvider(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider AuthProviderParam

	err = runtime.BindStyledParameterWithOptions("simple", "provider", chi.URLParam(r, "provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackProviderParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CallbackProvider(w, r, provider, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProfile operation middleware
func (siw *ServerInterfaceWrapper) ShowProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TokenProfile operation middleware
func (siw *ServerInterfaceWrapper) TokenProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProject(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProject operation middleware
func (siw *ServerInterfaceWrapper) ShowProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProject(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProject(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectCredentials operation middleware
func (siw *ServerInterfaceWrapper) ListProjectCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectCredentialsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectCredentials(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectCredential(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialId CredentialParam

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectCredential(w, r, projectId, credentialId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialId CredentialParam

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectCredential(w, r, projectId, credentialId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialId CredentialParam

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectCredential(w, r, projectId, credentialId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListProjectEnvironments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectEnvironmentsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectEnvironments(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectEnvironment(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentId EnvironmentParam

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectEnvironment(w, r, projectId, environmentId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentId EnvironmentParam

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectEnvironment(w, r, projectId, environmentId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentId EnvironmentParam

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectEnvironment(w, r, projectId, environmentId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectInventories operation middleware
func (siw *ServerInterfaceWrapper) ListProjectInventories(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectInventoriesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectInventories(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectInventory(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryId InventoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectInventory(w, r, projectId, inventoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryId InventoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectInventory(w, r, projectId, inventoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryId InventoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectInventory(w, r, projectId, inventoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectRepositories operation middleware
func (siw *ServerInterfaceWrapper) ListProjectRepositories(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectRepositoriesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectRepositories(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectRepository(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId RepositoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectRepository(w, r, projectId, repositoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId RepositoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectRepository(w, r, projectId, repositoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId RepositoryParam

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectRepository(w, r, projectId, repositoryId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectSchedules operation middleware
func (siw *ServerInterfaceWrapper) ListProjectSchedules(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectSchedulesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectSchedules(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectSchedule(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleId ScheduleParam

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectSchedule(w, r, projectId, scheduleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleId ScheduleParam

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectSchedule(w, r, projectId, scheduleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleId ScheduleParam

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectSchedule(w, r, projectId, scheduleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectTasks operation middleware
func (siw *ServerInterfaceWrapper) ListProjectTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectTasksParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectTasks(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectTask operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectTask(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId TaskParam

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectTask(w, r, projectId, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectTask operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId TaskParam

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectTask(w, r, projectId, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// OutputProjectTask operation middleware
func (siw *ServerInterfaceWrapper) OutputProjectTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId TaskParam

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OutputProjectTask(w, r, projectId, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StopProjectTask operation middleware
func (siw *ServerInterfaceWrapper) StopProjectTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId TaskParam

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopProjectTask(w, r, projectId, taskId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectFromTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectFromTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectFromTeam(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectTeams operation middleware
func (siw *ServerInterfaceWrapper) ListProjectTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectTeams(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachProjectToTeam operation middleware
func (siw *ServerInterfaceWrapper) AttachProjectToTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachProjectToTeam(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitProjectTeam operation middleware
func (siw *ServerInterfaceWrapper) PermitProjectTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitProjectTeam(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectTemplates operation middleware
func (siw *ServerInterfaceWrapper) ListProjectTemplates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectTemplatesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectTemplates(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectTemplate(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateId TemplateParam

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectTemplate(w, r, projectId, templateId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateId TemplateParam

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectTemplate(w, r, projectId, templateId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateId TemplateParam

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectTemplate(w, r, projectId, templateId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectFromUser(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectUsers operation middleware
func (siw *ServerInterfaceWrapper) ListProjectUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectUsers(w, r, projectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachProjectToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachProjectToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachProjectToUser(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitProjectUser operation middleware
func (siw *ServerInterfaceWrapper) PermitProjectUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectParam

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitProjectUser(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRunners operation middleware
func (siw *ServerInterfaceWrapper) ListRunners(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunnersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunners(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRunner operation middleware
func (siw *ServerInterfaceWrapper) CreateRunner(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRunner(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRunner operation middleware
func (siw *ServerInterfaceWrapper) DeleteRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerId RunnerParam

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRunner(w, r, runnerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowRunner operation middleware
func (siw *ServerInterfaceWrapper) ShowRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerId RunnerParam

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowRunner(w, r, runnerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunner operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerId RunnerParam

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunner(w, r, runnerId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeams(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTeam(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowTeam operation middleware
func (siw *ServerInterfaceWrapper) ShowTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTeam operation middleware
func (siw *ServerInterfaceWrapper) UpdateTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamFromProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamFromProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamFromProject(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeamProjects operation middleware
func (siw *ServerInterfaceWrapper) ListTeamProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeamProjects(w, r, teamId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachTeamToProject operation middleware
func (siw *ServerInterfaceWrapper) AttachTeamToProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTeamToProject(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitTeamProject operation middleware
func (siw *ServerInterfaceWrapper) PermitTeamProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitTeamProject(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamFromUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeamUsers operation middleware
func (siw *ServerInterfaceWrapper) ListTeamUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeamUsers(w, r, teamId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachTeamToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachTeamToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTeamToUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitTeamUser operation middleware
func (siw *ServerInterfaceWrapper) PermitTeamUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId TeamParam

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitTeamUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowUser operation middleware
func (siw *ServerInterfaceWrapper) ShowUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromProject(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserProjects operation middleware
func (siw *ServerInterfaceWrapper) ListUserProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserProjects(w, r, userId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToProject operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToProject(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserProject operation middleware
func (siw *ServerInterfaceWrapper) PermitUserProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserProject(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserTeams operation middleware
func (siw *ServerInterfaceWrapper) ListUserTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserTeams(w, r, userId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToTeam operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserTeam operation middleware
func (siw *ServerInterfaceWrapper) PermitUserTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// Websockets operation middleware
func (siw *ServerInterfaceWrapper) Websockets(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Websockets(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/providers", wrapper.ListProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/refresh", wrapper.RefreshAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/verify", wrapper.VerifyAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}", wrapper.CallbackProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/self", wrapper.ShowProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/profile/self", wrapper.UpdateProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/token", wrapper.TokenProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.ListProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}", wrapper.DeleteProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}", wrapper.ShowProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}", wrapper.UpdateProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/credentials", wrapper.ListProjectCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/credentials", wrapper.CreateProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.DeleteProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.ShowProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.UpdateProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/environments", wrapper.ListProjectEnvironments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/environments", wrapper.CreateProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.DeleteProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.ShowProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.UpdateProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/inventories", wrapper.ListProjectInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/inventories", wrapper.CreateProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.DeleteProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.ShowProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.UpdateProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/repositories", wrapper.ListProjectRepositories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/repositories", wrapper.CreateProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.DeleteProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.ShowProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.UpdateProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/schedules", wrapper.ListProjectSchedules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/schedules", wrapper.CreateProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.DeleteProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.ShowProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.UpdateProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/tasks", wrapper.ListProjectTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/tasks", wrapper.CreateProjectTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/tasks/{task_id}", wrapper.DeleteProjectTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/tasks/{task_id}", wrapper.ShowProjectTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/tasks/{task_id}/output", wrapper.OutputProjectTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/tasks/{task_id}/stop", wrapper.StopProjectTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/teams", wrapper.DeleteProjectFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/teams", wrapper.ListProjectTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/teams", wrapper.AttachProjectToTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/teams", wrapper.PermitProjectTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/templates", wrapper.ListProjectTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/templates", wrapper.CreateProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.DeleteProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.ShowProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.UpdateProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/users", wrapper.DeleteProjectFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/users", wrapper.ListProjectUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/users", wrapper.AttachProjectToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/users", wrapper.PermitProjectUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runners", wrapper.ListRunners)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/runners", wrapper.CreateRunner)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/runners/{runner_id}", wrapper.DeleteRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runners/{runner_id}", wrapper.ShowRunner)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/runners/{runner_id}", wrapper.UpdateRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams", wrapper.ListTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams", wrapper.CreateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}", wrapper.DeleteTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}", wrapper.ShowTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}", wrapper.UpdateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}/projects", wrapper.DeleteTeamFromProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}/projects", wrapper.ListTeamProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams/{team_id}/projects", wrapper.AttachTeamToProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}/projects", wrapper.PermitTeamProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}/users", wrapper.DeleteTeamFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}/users", wrapper.ListTeamUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams/{team_id}/users", wrapper.AttachTeamToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}/users", wrapper.PermitTeamUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}", wrapper.ShowUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/projects", wrapper.DeleteUserFromProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/projects", wrapper.ListUserProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/projects", wrapper.AttachUserToProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/projects", wrapper.PermitUserProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/teams", wrapper.DeleteUserFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/teams", wrapper.ListUserTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/teams", wrapper.AttachUserToTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/teams", wrapper.PermitUserTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ws", wrapper.Websockets)
	})

	return r
}

type ActionFailedErrorJSONResponse Notification

type AlreadyAttachedErrorJSONResponse Notification

type BadCredentialsErrorJSONResponse Notification

type CallbackResponseJSONResponse AuthToken

type EventsResponseJSONResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

type InternalServerErrorJSONResponse Notification

type InvalidTokenErrorJSONResponse Notification

type LoginResponseJSONResponse AuthToken

type NotAttachedErrorJSONResponse Notification

type NotAuthorizedErrorJSONResponse Notification

type NotFoundErrorJSONResponse Notification

type ProfileResponseJSONResponse Profile

type ProjectCredentialResponseJSONResponse Credential

type ProjectCredentialsResponseJSONResponse struct {
	Credentials []Credential `json:"credentials"`
	Limit       int64        `json:"limit"`
	Offset      int64        `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectEnvironmentsResponseJSONResponse struct {
	Environments []Environment `json:"environments"`
	Limit        int64         `json:"limit"`
	Offset       int64         `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectEnvironmentyResponseJSONResponse Environment

type ProjectInventoriesResponseJSONResponse struct {
	Inventories []Inventory `json:"inventories"`
	Limit       int64       `json:"limit"`
	Offset      int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectInventoryResponseJSONResponse Inventory

type ProjectLoggingResponseJSONResponse Logging

type ProjectRepositoriesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project      *Project     `json:"project,omitempty"`
	Repositories []Repository `json:"repositories"`
	Total        int64        `json:"total"`
}

type ProjectRepositoryResponseJSONResponse Repository

type ProjectResponseJSONResponse Project

type ProjectScheduleResponseJSONResponse Schedule

type ProjectSchedulesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Schedules []Schedule `json:"schedules"`
	Total     int64      `json:"total"`
}

type ProjectTaskResponseJSONResponse Task

type ProjectTasksResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Tasks   []Task   `json:"tasks"`
	Total   int64    `json:"total"`
}

type ProjectTeamsResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Teams   []TeamProject `json:"teams"`
	Total   int64         `json:"total"`
}

type ProjectTemplateResponseJSONResponse Template

type ProjectTemplatesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Templates []Template `json:"templates"`
	Total     int64      `json:"total"`
}

type ProjectUsersResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Total   int64         `json:"total"`
	Users   []UserProject `json:"users"`
}

type ProjectsResponseJSONResponse struct {
	Limit    int64     `json:"limit"`
	Offset   int64     `json:"offset"`
	Projects []Project `json:"projects"`
	Total    int64     `json:"total"`
}

type ProviderInitErrorJSONResponse Notification

type ProviderResponseJSONResponse []Provider

type RefreshResponseJSONResponse AuthToken

type RunnerResponseJSONResponse Runner

type RunnersResponseJSONResponse struct {
	Limit   int64    `json:"limit"`
	Offset  int64    `json:"offset"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

type SuccessMessageJSONResponse Notification

type TeamProjectsResponseJSONResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []TeamProject `json:"projects"`

	// Team Model to represent team
	Team  *Team `json:"team,omitempty"`
	Total int64 `json:"total"`
}

type TeamResponseJSONResponse Team

type TeamUsersResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Team Model to represent team
	Team  *Team      `json:"team,omitempty"`
	Total int64      `json:"total"`
	Users []UserTeam `json:"users"`
}

type TeamsResponseJSONResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Teams  []Team `json:"teams"`
	Total  int64  `json:"total"`
}

type TokenResponseJSONResponse AuthToken

type UpgradeConnectionResponse struct {
}

type UserProjectsResponseJSONResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []UserProject `json:"projects"`
	Total    int64         `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

type UserResponseJSONResponse User

type UserTeamsResponseJSONResponse struct {
	Limit  int64      `json:"limit"`
	Offset int64      `json:"offset"`
	Teams  []UserTeam `json:"teams"`
	Total  int64      `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

type UsersResponseJSONResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Total  int64  `json:"total"`
	Users  []User `json:"users"`
}

type ValidationErrorJSONResponse Notification

type VerifyResponseJSONResponse AuthVerify

type LoginAuthRequestObject struct {
	Body *LoginAuthJSONRequestBody
}

type LoginAuthResponseObject interface {
	VisitLoginAuthResponse(w http.ResponseWriter) error
}

type LoginAuth200JSONResponse struct{ LoginResponseJSONResponse }

func (response LoginAuth200JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth401JSONResponse struct {
	BadCredentialsErrorJSONResponse
}

func (response LoginAuth401JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response LoginAuth500JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProviderRequestObject struct {
}

type ListProviderResponseObject interface {
	VisitListProviderResponse(w http.ResponseWriter) error
}

type ListProvider200JSONResponse struct{ ProviderResponseJSONResponse }

func (response ListProvider200JSONResponse) VisitListProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProvider500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProvider500JSONResponse) VisitListProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuthRequestObject struct {
}

type RefreshAuthResponseObject interface {
	VisitRefreshAuthResponse(w http.ResponseWriter) error
}

type RefreshAuth200JSONResponse struct{ RefreshResponseJSONResponse }

func (response RefreshAuth200JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth401JSONResponse struct{ InvalidTokenErrorJSONResponse }

func (response RefreshAuth401JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response RefreshAuth500JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuthRequestObject struct {
}

type VerifyAuthResponseObject interface {
	VisitVerifyAuthResponse(w http.ResponseWriter) error
}

type VerifyAuth200JSONResponse struct{ VerifyResponseJSONResponse }

func (response VerifyAuth200JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth401JSONResponse struct{ InvalidTokenErrorJSONResponse }

func (response VerifyAuth401JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response VerifyAuth500JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CallbackProviderRequestObject struct {
	Provider AuthProviderParam `json:"provider"`
	Params   CallbackProviderParams
}

type CallbackProviderResponseObject interface {
	VisitCallbackProviderResponse(w http.ResponseWriter) error
}

type CallbackProvider200JSONResponse struct{ CallbackResponseJSONResponse }

func (response CallbackProvider200JSONResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CallbackProvider404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CallbackProvider404JSONResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CallbackProvider412JSONResponse struct{ ProviderInitErrorJSONResponse }

func (response CallbackProvider412JSONResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type CallbackProvider500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CallbackProvider500JSONResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListEventsRequestObject struct {
	Params ListEventsParams
}

type ListEventsResponseObject interface {
	VisitListEventsResponse(w http.ResponseWriter) error
}

type ListEvents200JSONResponse struct{ EventsResponseJSONResponse }

func (response ListEvents200JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListEvents403JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListEvents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListEvents500JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfileRequestObject struct {
}

type ShowProfileResponseObject interface {
	VisitShowProfileResponse(w http.ResponseWriter) error
}

type ShowProfile200JSONResponse struct{ ProfileResponseJSONResponse }

func (response ShowProfile200JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProfile403JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProfile500JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfileRequestObject struct {
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile200JSONResponse struct{ ProfileResponseJSONResponse }

func (response UpdateProfile200JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProfile403JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProfile422JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProfile500JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfileRequestObject struct {
}

type TokenProfileResponseObject interface {
	VisitTokenProfileResponse(w http.ResponseWriter) error
}

type TokenProfile200JSONResponse struct{ TokenResponseJSONResponse }

func (response TokenProfile200JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response TokenProfile403JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response TokenProfile500JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectsRequestObject struct {
	Params ListProjectsParams
}

type ListProjectsResponseObject interface {
	VisitListProjectsResponse(w http.ResponseWriter) error
}

type ListProjects200JSONResponse struct{ ProjectsResponseJSONResponse }

func (response ListProjects200JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjects403JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjects500JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRequestObject struct {
	Body *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(w http.ResponseWriter) error
}

type CreateProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response CreateProject200JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProject403JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProject422JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProject500JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProject200JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProject400JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProject403JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
}

type ShowProjectResponseObject interface {
	VisitShowProjectResponse(w http.ResponseWriter) error
}

type ShowProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response ShowProject200JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProject403JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProject404JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProject500JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *UpdateProjectJSONRequestBody
}

type UpdateProjectResponseObject interface {
	VisitUpdateProjectResponse(w http.ResponseWriter) error
}

type UpdateProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response UpdateProject200JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProject403JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProject404JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProject422JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProject500JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentialsRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectCredentialsParams
}

type ListProjectCredentialsResponseObject interface {
	VisitListProjectCredentialsResponse(w http.ResponseWriter) error
}

type ListProjectCredentials200JSONResponse struct {
	ProjectCredentialsResponseJSONResponse
}

func (response ListProjectCredentials200JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectCredentials403JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectCredentials404JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectCredentials500JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredentialRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectCredentialJSONRequestBody
}

type CreateProjectCredentialResponseObject interface {
	VisitCreateProjectCredentialResponse(w http.ResponseWriter) error
}

type CreateProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response CreateProjectCredential200JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectCredential403JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectCredential404JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectCredential422JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectCredential500JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredentialRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	CredentialId CredentialParam `json:"credential_id"`
}

type DeleteProjectCredentialResponseObject interface {
	VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error
}

type DeleteProjectCredential200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectCredential200JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectCredential400JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectCredential403JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectCredential404JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectCredential500JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredentialRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	CredentialId CredentialParam `json:"credential_id"`
}

type ShowProjectCredentialResponseObject interface {
	VisitShowProjectCredentialResponse(w http.ResponseWriter) error
}

type ShowProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response ShowProjectCredential200JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectCredential403JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectCredential404JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectCredential500JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredentialRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	CredentialId CredentialParam `json:"credential_id"`
	Body         *UpdateProjectCredentialJSONRequestBody
}

type UpdateProjectCredentialResponseObject interface {
	VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error
}

type UpdateProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response UpdateProjectCredential200JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectCredential403JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectCredential404JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectCredential422JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectCredential500JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironmentsRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectEnvironmentsParams
}

type ListProjectEnvironmentsResponseObject interface {
	VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error
}

type ListProjectEnvironments200JSONResponse struct {
	ProjectEnvironmentsResponseJSONResponse
}

func (response ListProjectEnvironments200JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectEnvironments403JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectEnvironments404JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectEnvironments500JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectEnvironmentJSONRequestBody
}

type CreateProjectEnvironmentResponseObject interface {
	VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error
}

type CreateProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentyResponseJSONResponse
}

func (response CreateProjectEnvironment200JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectEnvironment403JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectEnvironment404JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectEnvironment422JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectEnvironment500JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentRequestObject struct {
	ProjectId     ProjectParam     `json:"project_id"`
	EnvironmentId EnvironmentParam `json:"environment_id"`
}

type DeleteProjectEnvironmentResponseObject interface {
	VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error
}

type DeleteProjectEnvironment200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectEnvironment200JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectEnvironment400JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectEnvironment403JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectEnvironment404JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectEnvironment500JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironmentRequestObject struct {
	ProjectId     ProjectParam     `json:"project_id"`
	EnvironmentId EnvironmentParam `json:"environment_id"`
}

type ShowProjectEnvironmentResponseObject interface {
	VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error
}

type ShowProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentyResponseJSONResponse
}

func (response ShowProjectEnvironment200JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectEnvironment403JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectEnvironment404JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectEnvironment500JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentRequestObject struct {
	ProjectId     ProjectParam     `json:"project_id"`
	EnvironmentId EnvironmentParam `json:"environment_id"`
	Body          *UpdateProjectEnvironmentJSONRequestBody
}

type UpdateProjectEnvironmentResponseObject interface {
	VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error
}

type UpdateProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentyResponseJSONResponse
}

func (response UpdateProjectEnvironment200JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectEnvironment403JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectEnvironment404JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectEnvironment422JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectEnvironment500JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventoriesRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectInventoriesParams
}

type ListProjectInventoriesResponseObject interface {
	VisitListProjectInventoriesResponse(w http.ResponseWriter) error
}

type ListProjectInventories200JSONResponse struct {
	ProjectInventoriesResponseJSONResponse
}

func (response ListProjectInventories200JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectInventories403JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectInventories404JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectInventories500JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventoryRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectInventoryJSONRequestBody
}

type CreateProjectInventoryResponseObject interface {
	VisitCreateProjectInventoryResponse(w http.ResponseWriter) error
}

type CreateProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response CreateProjectInventory200JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectInventory403JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectInventory404JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectInventory422JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectInventory500JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventoryRequestObject struct {
	ProjectId   ProjectParam   `json:"project_id"`
	InventoryId InventoryParam `json:"inventory_id"`
}

type DeleteProjectInventoryResponseObject interface {
	VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error
}

type DeleteProjectInventory200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectInventory200JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectInventory400JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectInventory403JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectInventory404JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectInventory500JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventoryRequestObject struct {
	ProjectId   ProjectParam   `json:"project_id"`
	InventoryId InventoryParam `json:"inventory_id"`
}

type ShowProjectInventoryResponseObject interface {
	VisitShowProjectInventoryResponse(w http.ResponseWriter) error
}

type ShowProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response ShowProjectInventory200JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectInventory403JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectInventory404JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectInventory500JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventoryRequestObject struct {
	ProjectId   ProjectParam   `json:"project_id"`
	InventoryId InventoryParam `json:"inventory_id"`
	Body        *UpdateProjectInventoryJSONRequestBody
}

type UpdateProjectInventoryResponseObject interface {
	VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error
}

type UpdateProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response UpdateProjectInventory200JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectInventory403JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectInventory404JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectInventory422JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectInventory500JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositoriesRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectRepositoriesParams
}

type ListProjectRepositoriesResponseObject interface {
	VisitListProjectRepositoriesResponse(w http.ResponseWriter) error
}

type ListProjectRepositories200JSONResponse struct {
	ProjectRepositoriesResponseJSONResponse
}

func (response ListProjectRepositories200JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectRepositories403JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectRepositories404JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectRepositories500JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepositoryRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectRepositoryJSONRequestBody
}

type CreateProjectRepositoryResponseObject interface {
	VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error
}

type CreateProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response CreateProjectRepository200JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectRepository403JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectRepository404JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectRepository422JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectRepository500JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepositoryRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	RepositoryId RepositoryParam `json:"repository_id"`
}

type DeleteProjectRepositoryResponseObject interface {
	VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error
}

type DeleteProjectRepository200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectRepository200JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectRepository400JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectRepository403JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectRepository404JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectRepository500JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepositoryRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	RepositoryId RepositoryParam `json:"repository_id"`
}

type ShowProjectRepositoryResponseObject interface {
	VisitShowProjectRepositoryResponse(w http.ResponseWriter) error
}

type ShowProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response ShowProjectRepository200JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectRepository403JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectRepository404JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectRepository500JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepositoryRequestObject struct {
	ProjectId    ProjectParam    `json:"project_id"`
	RepositoryId RepositoryParam `json:"repository_id"`
	Body         *UpdateProjectRepositoryJSONRequestBody
}

type UpdateProjectRepositoryResponseObject interface {
	VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error
}

type UpdateProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response UpdateProjectRepository200JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectRepository403JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectRepository404JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectRepository422JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectRepository500JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedulesRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectSchedulesParams
}

type ListProjectSchedulesResponseObject interface {
	VisitListProjectSchedulesResponse(w http.ResponseWriter) error
}

type ListProjectSchedules200JSONResponse struct {
	ProjectSchedulesResponseJSONResponse
}

func (response ListProjectSchedules200JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectSchedules403JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectSchedules404JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectSchedules500JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectScheduleRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectScheduleJSONRequestBody
}

type CreateProjectScheduleResponseObject interface {
	VisitCreateProjectScheduleResponse(w http.ResponseWriter) error
}

type CreateProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response CreateProjectSchedule200JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectSchedule403JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectSchedule404JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectSchedule422JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectSchedule500JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectScheduleRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	ScheduleId ScheduleParam `json:"schedule_id"`
}

type DeleteProjectScheduleResponseObject interface {
	VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error
}

type DeleteProjectSchedule200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectSchedule200JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectSchedule400JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectSchedule403JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectSchedule404JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectSchedule500JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectScheduleRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	ScheduleId ScheduleParam `json:"schedule_id"`
}

type ShowProjectScheduleResponseObject interface {
	VisitShowProjectScheduleResponse(w http.ResponseWriter) error
}

type ShowProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response ShowProjectSchedule200JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectSchedule403JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectSchedule404JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectSchedule500JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectScheduleRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	ScheduleId ScheduleParam `json:"schedule_id"`
	Body       *UpdateProjectScheduleJSONRequestBody
}

type UpdateProjectScheduleResponseObject interface {
	VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error
}

type UpdateProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response UpdateProjectSchedule200JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectSchedule403JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectSchedule404JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectSchedule422JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectSchedule500JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTasksRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectTasksParams
}

type ListProjectTasksResponseObject interface {
	VisitListProjectTasksResponse(w http.ResponseWriter) error
}

type ListProjectTasks200JSONResponse struct {
	ProjectTasksResponseJSONResponse
}

func (response ListProjectTasks200JSONResponse) VisitListProjectTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTasks403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectTasks403JSONResponse) VisitListProjectTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTasks404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectTasks404JSONResponse) VisitListProjectTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTasks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectTasks500JSONResponse) VisitListProjectTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTaskRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectTaskJSONRequestBody
}

type CreateProjectTaskResponseObject interface {
	VisitCreateProjectTaskResponse(w http.ResponseWriter) error
}

type CreateProjectTask200JSONResponse struct {
	ProjectTaskResponseJSONResponse
}

func (response CreateProjectTask200JSONResponse) VisitCreateProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTask403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectTask403JSONResponse) VisitCreateProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTask404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectTask404JSONResponse) VisitCreateProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTask422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectTask422JSONResponse) VisitCreateProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTask500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectTask500JSONResponse) VisitCreateProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTaskRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	TaskId    TaskParam    `json:"task_id"`
}

type DeleteProjectTaskResponseObject interface {
	VisitDeleteProjectTaskResponse(w http.ResponseWriter) error
}

type DeleteProjectTask200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectTask200JSONResponse) VisitDeleteProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTask400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectTask400JSONResponse) VisitDeleteProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTask403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectTask403JSONResponse) VisitDeleteProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTask404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectTask404JSONResponse) VisitDeleteProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTask500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectTask500JSONResponse) VisitDeleteProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTaskRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	TaskId    TaskParam    `json:"task_id"`
}

type ShowProjectTaskResponseObject interface {
	VisitShowProjectTaskResponse(w http.ResponseWriter) error
}

type ShowProjectTask200JSONResponse struct {
	ProjectTaskResponseJSONResponse
}

func (response ShowProjectTask200JSONResponse) VisitShowProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTask403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectTask403JSONResponse) VisitShowProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTask404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectTask404JSONResponse) VisitShowProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTask500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectTask500JSONResponse) VisitShowProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectTaskRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	TaskId    TaskParam    `json:"task_id"`
}

type OutputProjectTaskResponseObject interface {
	VisitOutputProjectTaskResponse(w http.ResponseWriter) error
}

type OutputProjectTask200JSONResponse struct {
	ProjectLoggingResponseJSONResponse
}

func (response OutputProjectTask200JSONResponse) VisitOutputProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectTask403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response OutputProjectTask403JSONResponse) VisitOutputProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectTask404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response OutputProjectTask404JSONResponse) VisitOutputProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectTask500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response OutputProjectTask500JSONResponse) VisitOutputProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StopProjectTaskRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	TaskId    TaskParam    `json:"task_id"`
}

type StopProjectTaskResponseObject interface {
	VisitStopProjectTaskResponse(w http.ResponseWriter) error
}

type StopProjectTask200JSONResponse struct{ SuccessMessageJSONResponse }

func (response StopProjectTask200JSONResponse) VisitStopProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StopProjectTask400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response StopProjectTask400JSONResponse) VisitStopProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopProjectTask403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response StopProjectTask403JSONResponse) VisitStopProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StopProjectTask404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response StopProjectTask404JSONResponse) VisitStopProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StopProjectTask500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response StopProjectTask500JSONResponse) VisitStopProjectTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromTeamRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *DeleteProjectFromTeamJSONRequestBody
}

type DeleteProjectFromTeamResponseObject interface {
	VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error
}

type DeleteProjectFromTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectFromTeam200JSONResponse) VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectFromTeam403JSONResponse) VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectFromTeam404JSONResponse) VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromTeam412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteProjectFromTeam412JSONResponse) VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectFromTeam500JSONResponse) VisitDeleteProjectFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTeamsRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectTeamsParams
}

type ListProjectTeamsResponseObject interface {
	VisitListProjectTeamsResponse(w http.ResponseWriter) error
}

type ListProjectTeams200JSONResponse struct {
	ProjectTeamsResponseJSONResponse
}

func (response ListProjectTeams200JSONResponse) VisitListProjectTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTeams403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectTeams403JSONResponse) VisitListProjectTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTeams404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectTeams404JSONResponse) VisitListProjectTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTeams500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectTeams500JSONResponse) VisitListProjectTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeamRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *AttachProjectToTeamJSONRequestBody
}

type AttachProjectToTeamResponseObject interface {
	VisitAttachProjectToTeamResponse(w http.ResponseWriter) error
}

type AttachProjectToTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachProjectToTeam200JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachProjectToTeam403JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachProjectToTeam404JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeam412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachProjectToTeam412JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachProjectToTeam422JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachProjectToTeam500JSONResponse) VisitAttachProjectToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeamRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *PermitProjectTeamJSONRequestBody
}

type PermitProjectTeamResponseObject interface {
	VisitPermitProjectTeamResponse(w http.ResponseWriter) error
}

type PermitProjectTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitProjectTeam200JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitProjectTeam403JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitProjectTeam404JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeam412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitProjectTeam412JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitProjectTeam422JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitProjectTeam500JSONResponse) VisitPermitProjectTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplatesRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectTemplatesParams
}

type ListProjectTemplatesResponseObject interface {
	VisitListProjectTemplatesResponse(w http.ResponseWriter) error
}

type ListProjectTemplates200JSONResponse struct {
	ProjectTemplatesResponseJSONResponse
}

func (response ListProjectTemplates200JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectTemplates403JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectTemplates404JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectTemplates500JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *CreateProjectTemplateJSONRequestBody
}

type CreateProjectTemplateResponseObject interface {
	VisitCreateProjectTemplateResponse(w http.ResponseWriter) error
}

type CreateProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response CreateProjectTemplate200JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectTemplate403JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectTemplate404JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectTemplate422JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectTemplate500JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	TemplateId TemplateParam `json:"template_id"`
}

type DeleteProjectTemplateResponseObject interface {
	VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error
}

type DeleteProjectTemplate200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectTemplate200JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectTemplate400JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectTemplate403JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectTemplate404JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectTemplate500JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplateRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	TemplateId TemplateParam `json:"template_id"`
}

type ShowProjectTemplateResponseObject interface {
	VisitShowProjectTemplateResponse(w http.ResponseWriter) error
}

type ShowProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response ShowProjectTemplate200JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectTemplate403JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectTemplate404JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectTemplate500JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateRequestObject struct {
	ProjectId  ProjectParam  `json:"project_id"`
	TemplateId TemplateParam `json:"template_id"`
	Body       *UpdateProjectTemplateJSONRequestBody
}

type UpdateProjectTemplateResponseObject interface {
	VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error
}

type UpdateProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response UpdateProjectTemplate200JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectTemplate403JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectTemplate404JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectTemplate422JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectTemplate500JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUserRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *DeleteProjectFromUserJSONRequestBody
}

type DeleteProjectFromUserResponseObject interface {
	VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error
}

type DeleteProjectFromUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectFromUser200JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectFromUser403JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectFromUser404JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteProjectFromUser412JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectFromUser500JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsersRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Params    ListProjectUsersParams
}

type ListProjectUsersResponseObject interface {
	VisitListProjectUsersResponse(w http.ResponseWriter) error
}

type ListProjectUsers200JSONResponse struct {
	ProjectUsersResponseJSONResponse
}

func (response ListProjectUsers200JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectUsers403JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectUsers404JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectUsers500JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUserRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *AttachProjectToUserJSONRequestBody
}

type AttachProjectToUserResponseObject interface {
	VisitAttachProjectToUserResponse(w http.ResponseWriter) error
}

type AttachProjectToUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachProjectToUser200JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachProjectToUser403JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachProjectToUser404JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachProjectToUser412JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachProjectToUser422JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachProjectToUser500JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUserRequestObject struct {
	ProjectId ProjectParam `json:"project_id"`
	Body      *PermitProjectUserJSONRequestBody
}

type PermitProjectUserResponseObject interface {
	VisitPermitProjectUserResponse(w http.ResponseWriter) error
}

type PermitProjectUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitProjectUser200JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitProjectUser403JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitProjectUser404JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitProjectUser412JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitProjectUser422JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitProjectUser500JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRunnersRequestObject struct {
	Params ListRunnersParams
}

type ListRunnersResponseObject interface {
	VisitListRunnersResponse(w http.ResponseWriter) error
}

type ListRunners200JSONResponse struct{ RunnersResponseJSONResponse }

func (response ListRunners200JSONResponse) VisitListRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRunners403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListRunners403JSONResponse) VisitListRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListRunners500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListRunners500JSONResponse) VisitListRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunnerRequestObject struct {
	Body *CreateRunnerJSONRequestBody
}

type CreateRunnerResponseObject interface {
	VisitCreateRunnerResponse(w http.ResponseWriter) error
}

type CreateRunner200JSONResponse struct{ RunnerResponseJSONResponse }

func (response CreateRunner200JSONResponse) VisitCreateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateRunner403JSONResponse) VisitCreateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateRunner422JSONResponse) VisitCreateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateRunner500JSONResponse) VisitCreateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunnerRequestObject struct {
	RunnerId RunnerParam `json:"runner_id"`
}

type DeleteRunnerResponseObject interface {
	VisitDeleteRunnerResponse(w http.ResponseWriter) error
}

type DeleteRunner200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteRunner200JSONResponse) VisitDeleteRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunner400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteRunner400JSONResponse) VisitDeleteRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteRunner403JSONResponse) VisitDeleteRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteRunner404JSONResponse) VisitDeleteRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteRunner500JSONResponse) VisitDeleteRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowRunnerRequestObject struct {
	RunnerId RunnerParam `json:"runner_id"`
}

type ShowRunnerResponseObject interface {
	VisitShowRunnerResponse(w http.ResponseWriter) error
}

type ShowRunner200JSONResponse struct{ RunnerResponseJSONResponse }

func (response ShowRunner200JSONResponse) VisitShowRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowRunner403JSONResponse) VisitShowRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowRunner404JSONResponse) VisitShowRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowRunner500JSONResponse) VisitShowRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunnerRequestObject struct {
	RunnerId RunnerParam `json:"runner_id"`
	Body     *UpdateRunnerJSONRequestBody
}

type UpdateRunnerResponseObject interface {
	VisitUpdateRunnerResponse(w http.ResponseWriter) error
}

type UpdateRunner200JSONResponse struct{ RunnerResponseJSONResponse }

func (response UpdateRunner200JSONResponse) VisitUpdateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateRunner403JSONResponse) VisitUpdateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateRunner404JSONResponse) VisitUpdateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateRunner422JSONResponse) VisitUpdateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateRunner500JSONResponse) VisitUpdateRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamsRequestObject struct {
	Params ListTeamsParams
}

type ListTeamsResponseObject interface {
	VisitListTeamsResponse(w http.ResponseWriter) error
}

type ListTeams200JSONResponse struct{ TeamsResponseJSONResponse }

func (response ListTeams200JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeams403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListTeams403JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeams500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListTeams500JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam200JSONResponse struct{ TeamResponseJSONResponse }

func (response CreateTeam200JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateTeam403JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateTeam422JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateTeam500JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	TeamId TeamParam `json:"team_id"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteTeam200JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteTeam400JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteTeam403JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteTeam404JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteTeam500JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeamRequestObject struct {
	TeamId TeamParam `json:"team_id"`
}

type ShowTeamResponseObject interface {
	VisitShowTeamResponse(w http.ResponseWriter) error
}

type ShowTeam200JSONResponse struct{ TeamResponseJSONResponse }

func (response ShowTeam200JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowTeam403JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowTeam404JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowTeam500JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeamRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *UpdateTeamJSONRequestBody
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(w http.ResponseWriter) error
}

type UpdateTeam200JSONResponse struct{ TeamResponseJSONResponse }

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateTeam403JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateTeam404JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateTeam422JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateTeam500JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromProjectRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *DeleteTeamFromProjectJSONRequestBody
}

type DeleteTeamFromProjectResponseObject interface {
	VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error
}

type DeleteTeamFromProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteTeamFromProject200JSONResponse) VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteTeamFromProject403JSONResponse) VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteTeamFromProject404JSONResponse) VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteTeamFromProject412JSONResponse) VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteTeamFromProject500JSONResponse) VisitDeleteTeamFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamProjectsRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Params ListTeamProjectsParams
}

type ListTeamProjectsResponseObject interface {
	VisitListTeamProjectsResponse(w http.ResponseWriter) error
}

type ListTeamProjects200JSONResponse struct {
	TeamProjectsResponseJSONResponse
}

func (response ListTeamProjects200JSONResponse) VisitListTeamProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListTeamProjects403JSONResponse) VisitListTeamProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamProjects404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListTeamProjects404JSONResponse) VisitListTeamProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListTeamProjects500JSONResponse) VisitListTeamProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProjectRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *AttachTeamToProjectJSONRequestBody
}

type AttachTeamToProjectResponseObject interface {
	VisitAttachTeamToProjectResponse(w http.ResponseWriter) error
}

type AttachTeamToProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachTeamToProject200JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachTeamToProject403JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachTeamToProject404JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProject412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachTeamToProject412JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachTeamToProject422JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachTeamToProject500JSONResponse) VisitAttachTeamToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProjectRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *PermitTeamProjectJSONRequestBody
}

type PermitTeamProjectResponseObject interface {
	VisitPermitTeamProjectResponse(w http.ResponseWriter) error
}

type PermitTeamProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitTeamProject200JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitTeamProject403JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitTeamProject404JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitTeamProject412JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitTeamProject422JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitTeamProject500JSONResponse) VisitPermitTeamProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUserRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *DeleteTeamFromUserJSONRequestBody
}

type DeleteTeamFromUserResponseObject interface {
	VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error
}

type DeleteTeamFromUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteTeamFromUser200JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteTeamFromUser403JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteTeamFromUser404JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteTeamFromUser412JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteTeamFromUser500JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsersRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Params ListTeamUsersParams
}

type ListTeamUsersResponseObject interface {
	VisitListTeamUsersResponse(w http.ResponseWriter) error
}

type ListTeamUsers200JSONResponse struct{ TeamUsersResponseJSONResponse }

func (response ListTeamUsers200JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListTeamUsers403JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListTeamUsers404JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListTeamUsers500JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUserRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *AttachTeamToUserJSONRequestBody
}

type AttachTeamToUserResponseObject interface {
	VisitAttachTeamToUserResponse(w http.ResponseWriter) error
}

type AttachTeamToUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachTeamToUser200JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachTeamToUser403JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachTeamToUser404JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachTeamToUser412JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachTeamToUser422JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachTeamToUser500JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUserRequestObject struct {
	TeamId TeamParam `json:"team_id"`
	Body   *PermitTeamUserJSONRequestBody
}

type PermitTeamUserResponseObject interface {
	VisitPermitTeamUserResponse(w http.ResponseWriter) error
}

type PermitTeamUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitTeamUser200JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitTeamUser403JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitTeamUser404JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitTeamUser412JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitTeamUser422JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitTeamUser500JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
	Params ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse struct{ UsersResponseJSONResponse }

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUsers403JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse struct{ UserResponseJSONResponse }

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateUser403JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	UserId UserParam `json:"user_id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUser403JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowUserRequestObject struct {
	UserId UserParam `json:"user_id"`
}

type ShowUserResponseObject interface {
	VisitShowUserResponse(w http.ResponseWriter) error
}

type ShowUser200JSONResponse struct{ UserResponseJSONResponse }

func (response ShowUser200JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowUser403JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowUser404JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowUser500JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse struct{ UserResponseJSONResponse }

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateUser403JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateUser422JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProjectRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *DeleteUserFromProjectJSONRequestBody
}

type DeleteUserFromProjectResponseObject interface {
	VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error
}

type DeleteUserFromProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUserFromProject200JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUserFromProject403JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUserFromProject404JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteUserFromProject412JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUserFromProject500JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjectsRequestObject struct {
	UserId UserParam `json:"user_id"`
	Params ListUserProjectsParams
}

type ListUserProjectsResponseObject interface {
	VisitListUserProjectsResponse(w http.ResponseWriter) error
}

type ListUserProjects200JSONResponse struct {
	UserProjectsResponseJSONResponse
}

func (response ListUserProjects200JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUserProjects403JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListUserProjects404JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUserProjects500JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProjectRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *AttachUserToProjectJSONRequestBody
}

type AttachUserToProjectResponseObject interface {
	VisitAttachUserToProjectResponse(w http.ResponseWriter) error
}

type AttachUserToProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachUserToProject200JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachUserToProject403JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachUserToProject404JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachUserToProject412JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachUserToProject422JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachUserToProject500JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProjectRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *PermitUserProjectJSONRequestBody
}

type PermitUserProjectResponseObject interface {
	VisitPermitUserProjectResponse(w http.ResponseWriter) error
}

type PermitUserProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitUserProject200JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitUserProject403JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitUserProject404JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitUserProject412JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitUserProject422JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitUserProject500JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeamRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *DeleteUserFromTeamJSONRequestBody
}

type DeleteUserFromTeamResponseObject interface {
	VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error
}

type DeleteUserFromTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUserFromTeam200JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUserFromTeam403JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUserFromTeam404JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteUserFromTeam412JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUserFromTeam500JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeamsRequestObject struct {
	UserId UserParam `json:"user_id"`
	Params ListUserTeamsParams
}

type ListUserTeamsResponseObject interface {
	VisitListUserTeamsResponse(w http.ResponseWriter) error
}

type ListUserTeams200JSONResponse struct{ UserTeamsResponseJSONResponse }

func (response ListUserTeams200JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUserTeams403JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListUserTeams404JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUserTeams500JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeamRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *AttachUserToTeamJSONRequestBody
}

type AttachUserToTeamResponseObject interface {
	VisitAttachUserToTeamResponse(w http.ResponseWriter) error
}

type AttachUserToTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachUserToTeam200JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachUserToTeam403JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachUserToTeam404JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachUserToTeam412JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachUserToTeam422JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachUserToTeam500JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeamRequestObject struct {
	UserId UserParam `json:"user_id"`
	Body   *PermitUserTeamJSONRequestBody
}

type PermitUserTeamResponseObject interface {
	VisitPermitUserTeamResponse(w http.ResponseWriter) error
}

type PermitUserTeam200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitUserTeam200JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitUserTeam403JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitUserTeam404JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitUserTeam412JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitUserTeam422JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitUserTeam500JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WebsocketsRequestObject struct {
}

type WebsocketsResponseObject interface {
	VisitWebsocketsResponse(w http.ResponseWriter) error
}

type Websockets101Response = UpgradeConnectionResponse

func (response Websockets101Response) VisitWebsocketsResponse(w http.ResponseWriter) error {
	w.WriteHeader(101)
	return nil
}

type Websockets403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response Websockets403JSONResponse) VisitWebsocketsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Websockets500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Websockets500JSONResponse) VisitWebsocketsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(ctx context.Context, request LoginAuthRequestObject) (LoginAuthResponseObject, error)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ListProvider(ctx context.Context, request ListProviderRequestObject) (ListProviderResponseObject, error)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(ctx context.Context, request RefreshAuthRequestObject) (RefreshAuthResponseObject, error)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(ctx context.Context, request VerifyAuthRequestObject) (VerifyAuthResponseObject, error)
	// Callback for available auth providers
	// (GET /auth/{provider})
	CallbackProvider(ctx context.Context, request CallbackProviderRequestObject) (CallbackProviderResponseObject, error)
	// Fetch all available events
	// (GET /events)
	ListEvents(ctx context.Context, request ListEventsRequestObject) (ListEventsResponseObject, error)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(ctx context.Context, request ShowProfileRequestObject) (ShowProfileResponseObject, error)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(ctx context.Context, request TokenProfileRequestObject) (TokenProfileResponseObject, error)
	// Fetch all available projects
	// (GET /projects)
	ListProjects(ctx context.Context, request ListProjectsRequestObject) (ListProjectsResponseObject, error)
	// Create a new project
	// (POST /projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)
	// Delete a specific project
	// (DELETE /projects/{project_id})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Fetch a specific project
	// (GET /projects/{project_id})
	ShowProject(ctx context.Context, request ShowProjectRequestObject) (ShowProjectResponseObject, error)
	// Update a specific project
	// (PUT /projects/{project_id})
	UpdateProject(ctx context.Context, request UpdateProjectRequestObject) (UpdateProjectResponseObject, error)
	// Fetch all credentials for a project
	// (GET /projects/{project_id}/credentials)
	ListProjectCredentials(ctx context.Context, request ListProjectCredentialsRequestObject) (ListProjectCredentialsResponseObject, error)
	// Create a new credential
	// (POST /projects/{project_id}/credentials)
	CreateProjectCredential(ctx context.Context, request CreateProjectCredentialRequestObject) (CreateProjectCredentialResponseObject, error)
	// Delete a specific credential for a project
	// (DELETE /projects/{project_id}/credentials/{credential_id})
	DeleteProjectCredential(ctx context.Context, request DeleteProjectCredentialRequestObject) (DeleteProjectCredentialResponseObject, error)
	// Fetch a specific credential for a project
	// (GET /projects/{project_id}/credentials/{credential_id})
	ShowProjectCredential(ctx context.Context, request ShowProjectCredentialRequestObject) (ShowProjectCredentialResponseObject, error)
	// Update a specific credential for a project
	// (PUT /projects/{project_id}/credentials/{credential_id})
	UpdateProjectCredential(ctx context.Context, request UpdateProjectCredentialRequestObject) (UpdateProjectCredentialResponseObject, error)
	// Fetch all environments for a project
	// (GET /projects/{project_id}/environments)
	ListProjectEnvironments(ctx context.Context, request ListProjectEnvironmentsRequestObject) (ListProjectEnvironmentsResponseObject, error)
	// Create a new environment
	// (POST /projects/{project_id}/environments)
	CreateProjectEnvironment(ctx context.Context, request CreateProjectEnvironmentRequestObject) (CreateProjectEnvironmentResponseObject, error)
	// Delete a specific environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id})
	DeleteProjectEnvironment(ctx context.Context, request DeleteProjectEnvironmentRequestObject) (DeleteProjectEnvironmentResponseObject, error)
	// Fetch a specific environment for a project
	// (GET /projects/{project_id}/environments/{environment_id})
	ShowProjectEnvironment(ctx context.Context, request ShowProjectEnvironmentRequestObject) (ShowProjectEnvironmentResponseObject, error)
	// Update a specific environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id})
	UpdateProjectEnvironment(ctx context.Context, request UpdateProjectEnvironmentRequestObject) (UpdateProjectEnvironmentResponseObject, error)
	// Fetch all inventories for a project
	// (GET /projects/{project_id}/inventories)
	ListProjectInventories(ctx context.Context, request ListProjectInventoriesRequestObject) (ListProjectInventoriesResponseObject, error)
	// Create a new inventory
	// (POST /projects/{project_id}/inventories)
	CreateProjectInventory(ctx context.Context, request CreateProjectInventoryRequestObject) (CreateProjectInventoryResponseObject, error)
	// Delete a specific inventory for a project
	// (DELETE /projects/{project_id}/inventories/{inventory_id})
	DeleteProjectInventory(ctx context.Context, request DeleteProjectInventoryRequestObject) (DeleteProjectInventoryResponseObject, error)
	// Fetch a specific inventory for a project
	// (GET /projects/{project_id}/inventories/{inventory_id})
	ShowProjectInventory(ctx context.Context, request ShowProjectInventoryRequestObject) (ShowProjectInventoryResponseObject, error)
	// Update a specific inventory for a project
	// (PUT /projects/{project_id}/inventories/{inventory_id})
	UpdateProjectInventory(ctx context.Context, request UpdateProjectInventoryRequestObject) (UpdateProjectInventoryResponseObject, error)
	// Fetch all repositories for a project
	// (GET /projects/{project_id}/repositories)
	ListProjectRepositories(ctx context.Context, request ListProjectRepositoriesRequestObject) (ListProjectRepositoriesResponseObject, error)
	// Create a new repository
	// (POST /projects/{project_id}/repositories)
	CreateProjectRepository(ctx context.Context, request CreateProjectRepositoryRequestObject) (CreateProjectRepositoryResponseObject, error)
	// Delete a specific repository for a project
	// (DELETE /projects/{project_id}/repositories/{repository_id})
	DeleteProjectRepository(ctx context.Context, request DeleteProjectRepositoryRequestObject) (DeleteProjectRepositoryResponseObject, error)
	// Fetch a specific repository for a project
	// (GET /projects/{project_id}/repositories/{repository_id})
	ShowProjectRepository(ctx context.Context, request ShowProjectRepositoryRequestObject) (ShowProjectRepositoryResponseObject, error)
	// Update a specific repository for a project
	// (PUT /projects/{project_id}/repositories/{repository_id})
	UpdateProjectRepository(ctx context.Context, request UpdateProjectRepositoryRequestObject) (UpdateProjectRepositoryResponseObject, error)
	// Fetch all schedules for a project
	// (GET /projects/{project_id}/schedules)
	ListProjectSchedules(ctx context.Context, request ListProjectSchedulesRequestObject) (ListProjectSchedulesResponseObject, error)
	// Create a new schedule
	// (POST /projects/{project_id}/schedules)
	CreateProjectSchedule(ctx context.Context, request CreateProjectScheduleRequestObject) (CreateProjectScheduleResponseObject, error)
	// Delete a specific schedule for a project
	// (DELETE /projects/{project_id}/schedules/{schedule_id})
	DeleteProjectSchedule(ctx context.Context, request DeleteProjectScheduleRequestObject) (DeleteProjectScheduleResponseObject, error)
	// Fetch a specific schedule for a project
	// (GET /projects/{project_id}/schedules/{schedule_id})
	ShowProjectSchedule(ctx context.Context, request ShowProjectScheduleRequestObject) (ShowProjectScheduleResponseObject, error)
	// Update a specific schedule for a project
	// (PUT /projects/{project_id}/schedules/{schedule_id})
	UpdateProjectSchedule(ctx context.Context, request UpdateProjectScheduleRequestObject) (UpdateProjectScheduleResponseObject, error)
	// Fetch all tasks for a project
	// (GET /projects/{project_id}/tasks)
	ListProjectTasks(ctx context.Context, request ListProjectTasksRequestObject) (ListProjectTasksResponseObject, error)
	// Create a new task
	// (POST /projects/{project_id}/tasks)
	CreateProjectTask(ctx context.Context, request CreateProjectTaskRequestObject) (CreateProjectTaskResponseObject, error)
	// Delete a specific task for a project
	// (DELETE /projects/{project_id}/tasks/{task_id})
	DeleteProjectTask(ctx context.Context, request DeleteProjectTaskRequestObject) (DeleteProjectTaskResponseObject, error)
	// Fetch a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id})
	ShowProjectTask(ctx context.Context, request ShowProjectTaskRequestObject) (ShowProjectTaskResponseObject, error)
	// Output a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id}/output)
	OutputProjectTask(ctx context.Context, request OutputProjectTaskRequestObject) (OutputProjectTaskResponseObject, error)
	// Stop a specific task for a project
	// (GET /projects/{project_id}/tasks/{task_id}/stop)
	StopProjectTask(ctx context.Context, request StopProjectTaskRequestObject) (StopProjectTaskResponseObject, error)
	// Unlink a team from project
	// (DELETE /projects/{project_id}/teams)
	DeleteProjectFromTeam(ctx context.Context, request DeleteProjectFromTeamRequestObject) (DeleteProjectFromTeamResponseObject, error)
	// Fetch all teams attached to project
	// (GET /projects/{project_id}/teams)
	ListProjectTeams(ctx context.Context, request ListProjectTeamsRequestObject) (ListProjectTeamsResponseObject, error)
	// Attach a team to project
	// (POST /projects/{project_id}/teams)
	AttachProjectToTeam(ctx context.Context, request AttachProjectToTeamRequestObject) (AttachProjectToTeamResponseObject, error)
	// Update team perms for project
	// (PUT /projects/{project_id}/teams)
	PermitProjectTeam(ctx context.Context, request PermitProjectTeamRequestObject) (PermitProjectTeamResponseObject, error)
	// Fetch all templates for a project
	// (GET /projects/{project_id}/templates)
	ListProjectTemplates(ctx context.Context, request ListProjectTemplatesRequestObject) (ListProjectTemplatesResponseObject, error)
	// Create a new template
	// (POST /projects/{project_id}/templates)
	CreateProjectTemplate(ctx context.Context, request CreateProjectTemplateRequestObject) (CreateProjectTemplateResponseObject, error)
	// Delete a specific template for a project
	// (DELETE /projects/{project_id}/templates/{template_id})
	DeleteProjectTemplate(ctx context.Context, request DeleteProjectTemplateRequestObject) (DeleteProjectTemplateResponseObject, error)
	// Fetch a specific template for a project
	// (GET /projects/{project_id}/templates/{template_id})
	ShowProjectTemplate(ctx context.Context, request ShowProjectTemplateRequestObject) (ShowProjectTemplateResponseObject, error)
	// Update a specific template for a project
	// (PUT /projects/{project_id}/templates/{template_id})
	UpdateProjectTemplate(ctx context.Context, request UpdateProjectTemplateRequestObject) (UpdateProjectTemplateResponseObject, error)
	// Unlink a user from project
	// (DELETE /projects/{project_id}/users)
	DeleteProjectFromUser(ctx context.Context, request DeleteProjectFromUserRequestObject) (DeleteProjectFromUserResponseObject, error)
	// Fetch all users attached to project
	// (GET /projects/{project_id}/users)
	ListProjectUsers(ctx context.Context, request ListProjectUsersRequestObject) (ListProjectUsersResponseObject, error)
	// Attach a user to project
	// (POST /projects/{project_id}/users)
	AttachProjectToUser(ctx context.Context, request AttachProjectToUserRequestObject) (AttachProjectToUserResponseObject, error)
	// Update user perms for project
	// (PUT /projects/{project_id}/users)
	PermitProjectUser(ctx context.Context, request PermitProjectUserRequestObject) (PermitProjectUserResponseObject, error)
	// Fetch all available runners
	// (GET /runners)
	ListRunners(ctx context.Context, request ListRunnersRequestObject) (ListRunnersResponseObject, error)
	// Create a new runner
	// (POST /runners)
	CreateRunner(ctx context.Context, request CreateRunnerRequestObject) (CreateRunnerResponseObject, error)
	// Delete a specific runner
	// (DELETE /runners/{runner_id})
	DeleteRunner(ctx context.Context, request DeleteRunnerRequestObject) (DeleteRunnerResponseObject, error)
	// Fetch a specific runner
	// (GET /runners/{runner_id})
	ShowRunner(ctx context.Context, request ShowRunnerRequestObject) (ShowRunnerResponseObject, error)
	// Update a specific runner
	// (PUT /runners/{runner_id})
	UpdateRunner(ctx context.Context, request UpdateRunnerRequestObject) (UpdateRunnerResponseObject, error)
	// Fetch all available teams
	// (GET /teams)
	ListTeams(ctx context.Context, request ListTeamsRequestObject) (ListTeamsResponseObject, error)
	// Create a new team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Delete a specific team
	// (DELETE /teams/{team_id})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// Fetch a specific team
	// (GET /teams/{team_id})
	ShowTeam(ctx context.Context, request ShowTeamRequestObject) (ShowTeamResponseObject, error)
	// Update a specific team
	// (PUT /teams/{team_id})
	UpdateTeam(ctx context.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// Unlink a project from team
	// (DELETE /teams/{team_id}/projects)
	DeleteTeamFromProject(ctx context.Context, request DeleteTeamFromProjectRequestObject) (DeleteTeamFromProjectResponseObject, error)
	// Fetch all projects attached to team
	// (GET /teams/{team_id}/projects)
	ListTeamProjects(ctx context.Context, request ListTeamProjectsRequestObject) (ListTeamProjectsResponseObject, error)
	// Attach a project to team
	// (POST /teams/{team_id}/projects)
	AttachTeamToProject(ctx context.Context, request AttachTeamToProjectRequestObject) (AttachTeamToProjectResponseObject, error)
	// Update project perms for team
	// (PUT /teams/{team_id}/projects)
	PermitTeamProject(ctx context.Context, request PermitTeamProjectRequestObject) (PermitTeamProjectResponseObject, error)
	// Unlink a user from team
	// (DELETE /teams/{team_id}/users)
	DeleteTeamFromUser(ctx context.Context, request DeleteTeamFromUserRequestObject) (DeleteTeamFromUserResponseObject, error)
	// Fetch all users attached to team
	// (GET /teams/{team_id}/users)
	ListTeamUsers(ctx context.Context, request ListTeamUsersRequestObject) (ListTeamUsersResponseObject, error)
	// Attach a user to team
	// (POST /teams/{team_id}/users)
	AttachTeamToUser(ctx context.Context, request AttachTeamToUserRequestObject) (AttachTeamToUserResponseObject, error)
	// Update user perms for team
	// (PUT /teams/{team_id}/users)
	PermitTeamUser(ctx context.Context, request PermitTeamUserRequestObject) (PermitTeamUserResponseObject, error)
	// Fetch all available users
	// (GET /users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(ctx context.Context, request ShowUserRequestObject) (ShowUserResponseObject, error)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Unlink a project from user
	// (DELETE /users/{user_id}/projects)
	DeleteUserFromProject(ctx context.Context, request DeleteUserFromProjectRequestObject) (DeleteUserFromProjectResponseObject, error)
	// Fetch all projects attached to user
	// (GET /users/{user_id}/projects)
	ListUserProjects(ctx context.Context, request ListUserProjectsRequestObject) (ListUserProjectsResponseObject, error)
	// Attach a project to user
	// (POST /users/{user_id}/projects)
	AttachUserToProject(ctx context.Context, request AttachUserToProjectRequestObject) (AttachUserToProjectResponseObject, error)
	// Update project perms for user
	// (PUT /users/{user_id}/projects)
	PermitUserProject(ctx context.Context, request PermitUserProjectRequestObject) (PermitUserProjectResponseObject, error)
	// Unlink a team from user
	// (DELETE /users/{user_id}/teams)
	DeleteUserFromTeam(ctx context.Context, request DeleteUserFromTeamRequestObject) (DeleteUserFromTeamResponseObject, error)
	// Fetch all teams attached to user
	// (GET /users/{user_id}/teams)
	ListUserTeams(ctx context.Context, request ListUserTeamsRequestObject) (ListUserTeamsResponseObject, error)
	// Attach a team to user
	// (POST /users/{user_id}/teams)
	AttachUserToTeam(ctx context.Context, request AttachUserToTeamRequestObject) (AttachUserToTeamResponseObject, error)
	// Update team perms for user
	// (PUT /users/{user_id}/teams)
	PermitUserTeam(ctx context.Context, request PermitUserTeamRequestObject) (PermitUserTeamResponseObject, error)
	// Handler for websocket connection
	// (GET /ws)
	Websockets(ctx context.Context, request WebsocketsRequestObject) (WebsocketsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// LoginAuth operation middleware
func (sh *strictHandler) LoginAuth(w http.ResponseWriter, r *http.Request) {
	var request LoginAuthRequestObject

	var body LoginAuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginAuth(ctx, request.(LoginAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginAuthResponseObject); ok {
		if err := validResponse.VisitLoginAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProvider operation middleware
func (sh *strictHandler) ListProvider(w http.ResponseWriter, r *http.Request) {
	var request ListProviderRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProvider(ctx, request.(ListProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProviderResponseObject); ok {
		if err := validResponse.VisitListProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshAuth operation middleware
func (sh *strictHandler) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	var request RefreshAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshAuth(ctx, request.(RefreshAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshAuthResponseObject); ok {
		if err := validResponse.VisitRefreshAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAuth operation middleware
func (sh *strictHandler) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	var request VerifyAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAuth(ctx, request.(VerifyAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(VerifyAuthResponseObject); ok {
		if err := validResponse.VisitVerifyAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CallbackProvider operation middleware
func (sh *strictHandler) CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams) {
	var request CallbackProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CallbackProvider(ctx, request.(CallbackProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CallbackProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CallbackProviderResponseObject); ok {
		if err := validResponse.VisitCallbackProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListEvents operation middleware
func (sh *strictHandler) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	var request ListEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListEvents(ctx, request.(ListEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListEventsResponseObject); ok {
		if err := validResponse.VisitListEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProfile operation middleware
func (sh *strictHandler) ShowProfile(w http.ResponseWriter, r *http.Request) {
	var request ShowProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProfile(ctx, request.(ShowProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProfileResponseObject); ok {
		if err := validResponse.VisitShowProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateProfileRequestObject

	var body UpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx, request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		if err := validResponse.VisitUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TokenProfile operation middleware
func (sh *strictHandler) TokenProfile(w http.ResponseWriter, r *http.Request) {
	var request TokenProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TokenProfile(ctx, request.(TokenProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TokenProfileResponseObject); ok {
		if err := validResponse.VisitTokenProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjects operation middleware
func (sh *strictHandler) ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams) {
	var request ListProjectsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjects(ctx, request.(ListProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectsResponseObject); ok {
		if err := validResponse.VisitListProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(w http.ResponseWriter, r *http.Request) {
	var request CreateProjectRequestObject

	var body CreateProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx, request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		if err := validResponse.VisitCreateProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request DeleteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProject operation middleware
func (sh *strictHandler) ShowProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request ShowProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProject(ctx, request.(ShowProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectResponseObject); ok {
		if err := validResponse.VisitShowProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProject operation middleware
func (sh *strictHandler) UpdateProject(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request UpdateProjectRequestObject

	request.ProjectId = projectId

	var body UpdateProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProject(ctx, request.(UpdateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectResponseObject); ok {
		if err := validResponse.VisitUpdateProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectCredentials operation middleware
func (sh *strictHandler) ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectCredentialsParams) {
	var request ListProjectCredentialsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectCredentials(ctx, request.(ListProjectCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectCredentialsResponseObject); ok {
		if err := validResponse.VisitListProjectCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectCredential operation middleware
func (sh *strictHandler) CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectCredentialRequestObject

	request.ProjectId = projectId

	var body CreateProjectCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectCredential(ctx, request.(CreateProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectCredentialResponseObject); ok {
		if err := validResponse.VisitCreateProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectCredential operation middleware
func (sh *strictHandler) DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	var request DeleteProjectCredentialRequestObject

	request.ProjectId = projectId
	request.CredentialId = credentialId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectCredential(ctx, request.(DeleteProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectCredentialResponseObject); ok {
		if err := validResponse.VisitDeleteProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectCredential operation middleware
func (sh *strictHandler) ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	var request ShowProjectCredentialRequestObject

	request.ProjectId = projectId
	request.CredentialId = credentialId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectCredential(ctx, request.(ShowProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectCredentialResponseObject); ok {
		if err := validResponse.VisitShowProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectCredential operation middleware
func (sh *strictHandler) UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectId ProjectParam, credentialId CredentialParam) {
	var request UpdateProjectCredentialRequestObject

	request.ProjectId = projectId
	request.CredentialId = credentialId

	var body UpdateProjectCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectCredential(ctx, request.(UpdateProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectCredentialResponseObject); ok {
		if err := validResponse.VisitUpdateProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectEnvironments operation middleware
func (sh *strictHandler) ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectEnvironmentsParams) {
	var request ListProjectEnvironmentsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectEnvironments(ctx, request.(ListProjectEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectEnvironments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectEnvironmentsResponseObject); ok {
		if err := validResponse.VisitListProjectEnvironmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectEnvironment operation middleware
func (sh *strictHandler) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectEnvironmentRequestObject

	request.ProjectId = projectId

	var body CreateProjectEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectEnvironment(ctx, request.(CreateProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitCreateProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectEnvironment operation middleware
func (sh *strictHandler) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	var request DeleteProjectEnvironmentRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectEnvironment(ctx, request.(DeleteProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitDeleteProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectEnvironment operation middleware
func (sh *strictHandler) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	var request ShowProjectEnvironmentRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectEnvironment(ctx, request.(ShowProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitShowProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectEnvironment operation middleware
func (sh *strictHandler) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectId ProjectParam, environmentId EnvironmentParam) {
	var request UpdateProjectEnvironmentRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body UpdateProjectEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectEnvironment(ctx, request.(UpdateProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitUpdateProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectInventories operation middleware
func (sh *strictHandler) ListProjectInventories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectInventoriesParams) {
	var request ListProjectInventoriesRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectInventories(ctx, request.(ListProjectInventoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectInventories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectInventoriesResponseObject); ok {
		if err := validResponse.VisitListProjectInventoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectInventory operation middleware
func (sh *strictHandler) CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectInventoryRequestObject

	request.ProjectId = projectId

	var body CreateProjectInventoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectInventory(ctx, request.(CreateProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectInventoryResponseObject); ok {
		if err := validResponse.VisitCreateProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectInventory operation middleware
func (sh *strictHandler) DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	var request DeleteProjectInventoryRequestObject

	request.ProjectId = projectId
	request.InventoryId = inventoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectInventory(ctx, request.(DeleteProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectInventoryResponseObject); ok {
		if err := validResponse.VisitDeleteProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectInventory operation middleware
func (sh *strictHandler) ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	var request ShowProjectInventoryRequestObject

	request.ProjectId = projectId
	request.InventoryId = inventoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectInventory(ctx, request.(ShowProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectInventoryResponseObject); ok {
		if err := validResponse.VisitShowProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectInventory operation middleware
func (sh *strictHandler) UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectId ProjectParam, inventoryId InventoryParam) {
	var request UpdateProjectInventoryRequestObject

	request.ProjectId = projectId
	request.InventoryId = inventoryId

	var body UpdateProjectInventoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectInventory(ctx, request.(UpdateProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectInventoryResponseObject); ok {
		if err := validResponse.VisitUpdateProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectRepositories operation middleware
func (sh *strictHandler) ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectRepositoriesParams) {
	var request ListProjectRepositoriesRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectRepositories(ctx, request.(ListProjectRepositoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectRepositories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectRepositoriesResponseObject); ok {
		if err := validResponse.VisitListProjectRepositoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectRepository operation middleware
func (sh *strictHandler) CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectRepositoryRequestObject

	request.ProjectId = projectId

	var body CreateProjectRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectRepository(ctx, request.(CreateProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitCreateProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectRepository operation middleware
func (sh *strictHandler) DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	var request DeleteProjectRepositoryRequestObject

	request.ProjectId = projectId
	request.RepositoryId = repositoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectRepository(ctx, request.(DeleteProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitDeleteProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectRepository operation middleware
func (sh *strictHandler) ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	var request ShowProjectRepositoryRequestObject

	request.ProjectId = projectId
	request.RepositoryId = repositoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectRepository(ctx, request.(ShowProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitShowProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectRepository operation middleware
func (sh *strictHandler) UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectId ProjectParam, repositoryId RepositoryParam) {
	var request UpdateProjectRepositoryRequestObject

	request.ProjectId = projectId
	request.RepositoryId = repositoryId

	var body UpdateProjectRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectRepository(ctx, request.(UpdateProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitUpdateProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectSchedules operation middleware
func (sh *strictHandler) ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectSchedulesParams) {
	var request ListProjectSchedulesRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectSchedules(ctx, request.(ListProjectSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectSchedulesResponseObject); ok {
		if err := validResponse.VisitListProjectSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectSchedule operation middleware
func (sh *strictHandler) CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectScheduleRequestObject

	request.ProjectId = projectId

	var body CreateProjectScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectSchedule(ctx, request.(CreateProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectScheduleResponseObject); ok {
		if err := validResponse.VisitCreateProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectSchedule operation middleware
func (sh *strictHandler) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	var request DeleteProjectScheduleRequestObject

	request.ProjectId = projectId
	request.ScheduleId = scheduleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectSchedule(ctx, request.(DeleteProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectScheduleResponseObject); ok {
		if err := validResponse.VisitDeleteProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectSchedule operation middleware
func (sh *strictHandler) ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	var request ShowProjectScheduleRequestObject

	request.ProjectId = projectId
	request.ScheduleId = scheduleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectSchedule(ctx, request.(ShowProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectScheduleResponseObject); ok {
		if err := validResponse.VisitShowProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectSchedule operation middleware
func (sh *strictHandler) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectId ProjectParam, scheduleId ScheduleParam) {
	var request UpdateProjectScheduleRequestObject

	request.ProjectId = projectId
	request.ScheduleId = scheduleId

	var body UpdateProjectScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectSchedule(ctx, request.(UpdateProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectScheduleResponseObject); ok {
		if err := validResponse.VisitUpdateProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectTasks operation middleware
func (sh *strictHandler) ListProjectTasks(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTasksParams) {
	var request ListProjectTasksRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectTasks(ctx, request.(ListProjectTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectTasksResponseObject); ok {
		if err := validResponse.VisitListProjectTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectTask operation middleware
func (sh *strictHandler) CreateProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectTaskRequestObject

	request.ProjectId = projectId

	var body CreateProjectTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectTask(ctx, request.(CreateProjectTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectTaskResponseObject); ok {
		if err := validResponse.VisitCreateProjectTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectTask operation middleware
func (sh *strictHandler) DeleteProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	var request DeleteProjectTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectTask(ctx, request.(DeleteProjectTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectTaskResponseObject); ok {
		if err := validResponse.VisitDeleteProjectTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectTask operation middleware
func (sh *strictHandler) ShowProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	var request ShowProjectTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectTask(ctx, request.(ShowProjectTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectTaskResponseObject); ok {
		if err := validResponse.VisitShowProjectTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OutputProjectTask operation middleware
func (sh *strictHandler) OutputProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	var request OutputProjectTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OutputProjectTask(ctx, request.(OutputProjectTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OutputProjectTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OutputProjectTaskResponseObject); ok {
		if err := validResponse.VisitOutputProjectTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopProjectTask operation middleware
func (sh *strictHandler) StopProjectTask(w http.ResponseWriter, r *http.Request, projectId ProjectParam, taskId TaskParam) {
	var request StopProjectTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopProjectTask(ctx, request.(StopProjectTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopProjectTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopProjectTaskResponseObject); ok {
		if err := validResponse.VisitStopProjectTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectFromTeam operation middleware
func (sh *strictHandler) DeleteProjectFromTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request DeleteProjectFromTeamRequestObject

	request.ProjectId = projectId

	var body DeleteProjectFromTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectFromTeam(ctx, request.(DeleteProjectFromTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectFromTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectFromTeamResponseObject); ok {
		if err := validResponse.VisitDeleteProjectFromTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectTeams operation middleware
func (sh *strictHandler) ListProjectTeams(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTeamsParams) {
	var request ListProjectTeamsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectTeams(ctx, request.(ListProjectTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectTeamsResponseObject); ok {
		if err := validResponse.VisitListProjectTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachProjectToTeam operation middleware
func (sh *strictHandler) AttachProjectToTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request AttachProjectToTeamRequestObject

	request.ProjectId = projectId

	var body AttachProjectToTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachProjectToTeam(ctx, request.(AttachProjectToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachProjectToTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachProjectToTeamResponseObject); ok {
		if err := validResponse.VisitAttachProjectToTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitProjectTeam operation middleware
func (sh *strictHandler) PermitProjectTeam(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request PermitProjectTeamRequestObject

	request.ProjectId = projectId

	var body PermitProjectTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitProjectTeam(ctx, request.(PermitProjectTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitProjectTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitProjectTeamResponseObject); ok {
		if err := validResponse.VisitPermitProjectTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectTemplates operation middleware
func (sh *strictHandler) ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectTemplatesParams) {
	var request ListProjectTemplatesRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectTemplates(ctx, request.(ListProjectTemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectTemplates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectTemplatesResponseObject); ok {
		if err := validResponse.VisitListProjectTemplatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectTemplate operation middleware
func (sh *strictHandler) CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request CreateProjectTemplateRequestObject

	request.ProjectId = projectId

	var body CreateProjectTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectTemplate(ctx, request.(CreateProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectTemplateResponseObject); ok {
		if err := validResponse.VisitCreateProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectTemplate operation middleware
func (sh *strictHandler) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	var request DeleteProjectTemplateRequestObject

	request.ProjectId = projectId
	request.TemplateId = templateId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectTemplate(ctx, request.(DeleteProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectTemplateResponseObject); ok {
		if err := validResponse.VisitDeleteProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectTemplate operation middleware
func (sh *strictHandler) ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	var request ShowProjectTemplateRequestObject

	request.ProjectId = projectId
	request.TemplateId = templateId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectTemplate(ctx, request.(ShowProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectTemplateResponseObject); ok {
		if err := validResponse.VisitShowProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectTemplate operation middleware
func (sh *strictHandler) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectId ProjectParam, templateId TemplateParam) {
	var request UpdateProjectTemplateRequestObject

	request.ProjectId = projectId
	request.TemplateId = templateId

	var body UpdateProjectTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectTemplate(ctx, request.(UpdateProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectTemplateResponseObject); ok {
		if err := validResponse.VisitUpdateProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectFromUser operation middleware
func (sh *strictHandler) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request DeleteProjectFromUserRequestObject

	request.ProjectId = projectId

	var body DeleteProjectFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectFromUser(ctx, request.(DeleteProjectFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteProjectFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectUsers operation middleware
func (sh *strictHandler) ListProjectUsers(w http.ResponseWriter, r *http.Request, projectId ProjectParam, params ListProjectUsersParams) {
	var request ListProjectUsersRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectUsers(ctx, request.(ListProjectUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectUsersResponseObject); ok {
		if err := validResponse.VisitListProjectUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachProjectToUser operation middleware
func (sh *strictHandler) AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request AttachProjectToUserRequestObject

	request.ProjectId = projectId

	var body AttachProjectToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachProjectToUser(ctx, request.(AttachProjectToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachProjectToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachProjectToUserResponseObject); ok {
		if err := validResponse.VisitAttachProjectToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitProjectUser operation middleware
func (sh *strictHandler) PermitProjectUser(w http.ResponseWriter, r *http.Request, projectId ProjectParam) {
	var request PermitProjectUserRequestObject

	request.ProjectId = projectId

	var body PermitProjectUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitProjectUser(ctx, request.(PermitProjectUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitProjectUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitProjectUserResponseObject); ok {
		if err := validResponse.VisitPermitProjectUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRunners operation middleware
func (sh *strictHandler) ListRunners(w http.ResponseWriter, r *http.Request, params ListRunnersParams) {
	var request ListRunnersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRunners(ctx, request.(ListRunnersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRunners")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRunnersResponseObject); ok {
		if err := validResponse.VisitListRunnersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRunner operation middleware
func (sh *strictHandler) CreateRunner(w http.ResponseWriter, r *http.Request) {
	var request CreateRunnerRequestObject

	var body CreateRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRunner(ctx, request.(CreateRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRunnerResponseObject); ok {
		if err := validResponse.VisitCreateRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRunner operation middleware
func (sh *strictHandler) DeleteRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	var request DeleteRunnerRequestObject

	request.RunnerId = runnerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRunner(ctx, request.(DeleteRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRunnerResponseObject); ok {
		if err := validResponse.VisitDeleteRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowRunner operation middleware
func (sh *strictHandler) ShowRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	var request ShowRunnerRequestObject

	request.RunnerId = runnerId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowRunner(ctx, request.(ShowRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowRunnerResponseObject); ok {
		if err := validResponse.VisitShowRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRunner operation middleware
func (sh *strictHandler) UpdateRunner(w http.ResponseWriter, r *http.Request, runnerId RunnerParam) {
	var request UpdateRunnerRequestObject

	request.RunnerId = runnerId

	var body UpdateRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRunner(ctx, request.(UpdateRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateRunnerResponseObject); ok {
		if err := validResponse.VisitUpdateRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeams operation middleware
func (sh *strictHandler) ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams) {
	var request ListTeamsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeams(ctx, request.(ListTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamsResponseObject); ok {
		if err := validResponse.VisitListTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(w http.ResponseWriter, r *http.Request) {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request DeleteTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx, request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowTeam operation middleware
func (sh *strictHandler) ShowTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request ShowTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowTeam(ctx, request.(ShowTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowTeamResponseObject); ok {
		if err := validResponse.VisitShowTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTeam operation middleware
func (sh *strictHandler) UpdateTeam(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request UpdateTeamRequestObject

	request.TeamId = teamId

	var body UpdateTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx, request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeamFromProject operation middleware
func (sh *strictHandler) DeleteTeamFromProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request DeleteTeamFromProjectRequestObject

	request.TeamId = teamId

	var body DeleteTeamFromProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamFromProject(ctx, request.(DeleteTeamFromProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamFromProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamFromProjectResponseObject); ok {
		if err := validResponse.VisitDeleteTeamFromProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeamProjects operation middleware
func (sh *strictHandler) ListTeamProjects(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamProjectsParams) {
	var request ListTeamProjectsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamProjects(ctx, request.(ListTeamProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamProjectsResponseObject); ok {
		if err := validResponse.VisitListTeamProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachTeamToProject operation middleware
func (sh *strictHandler) AttachTeamToProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request AttachTeamToProjectRequestObject

	request.TeamId = teamId

	var body AttachTeamToProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachTeamToProject(ctx, request.(AttachTeamToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachTeamToProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachTeamToProjectResponseObject); ok {
		if err := validResponse.VisitAttachTeamToProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitTeamProject operation middleware
func (sh *strictHandler) PermitTeamProject(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request PermitTeamProjectRequestObject

	request.TeamId = teamId

	var body PermitTeamProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitTeamProject(ctx, request.(PermitTeamProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitTeamProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitTeamProjectResponseObject); ok {
		if err := validResponse.VisitPermitTeamProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeamFromUser operation middleware
func (sh *strictHandler) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request DeleteTeamFromUserRequestObject

	request.TeamId = teamId

	var body DeleteTeamFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamFromUser(ctx, request.(DeleteTeamFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteTeamFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeamUsers operation middleware
func (sh *strictHandler) ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId TeamParam, params ListTeamUsersParams) {
	var request ListTeamUsersRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamUsers(ctx, request.(ListTeamUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamUsersResponseObject); ok {
		if err := validResponse.VisitListTeamUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachTeamToUser operation middleware
func (sh *strictHandler) AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request AttachTeamToUserRequestObject

	request.TeamId = teamId

	var body AttachTeamToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachTeamToUser(ctx, request.(AttachTeamToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachTeamToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachTeamToUserResponseObject); ok {
		if err := validResponse.VisitAttachTeamToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitTeamUser operation middleware
func (sh *strictHandler) PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId TeamParam) {
	var request PermitTeamUserRequestObject

	request.TeamId = teamId

	var body PermitTeamUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitTeamUser(ctx, request.(PermitTeamUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitTeamUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitTeamUserResponseObject); ok {
		if err := validResponse.VisitPermitTeamUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	var request ListUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowUser operation middleware
func (sh *strictHandler) ShowUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request ShowUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowUser(ctx, request.(ShowUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowUserResponseObject); ok {
		if err := validResponse.VisitShowUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request UpdateUserRequestObject

	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromProject operation middleware
func (sh *strictHandler) DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request DeleteUserFromProjectRequestObject

	request.UserId = userId

	var body DeleteUserFromProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromProject(ctx, request.(DeleteUserFromProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromProjectResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserProjects operation middleware
func (sh *strictHandler) ListUserProjects(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserProjectsParams) {
	var request ListUserProjectsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserProjects(ctx, request.(ListUserProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserProjectsResponseObject); ok {
		if err := validResponse.VisitListUserProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToProject operation middleware
func (sh *strictHandler) AttachUserToProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request AttachUserToProjectRequestObject

	request.UserId = userId

	var body AttachUserToProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToProject(ctx, request.(AttachUserToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToProjectResponseObject); ok {
		if err := validResponse.VisitAttachUserToProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserProject operation middleware
func (sh *strictHandler) PermitUserProject(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request PermitUserProjectRequestObject

	request.UserId = userId

	var body PermitUserProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserProject(ctx, request.(PermitUserProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserProjectResponseObject); ok {
		if err := validResponse.VisitPermitUserProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromTeam operation middleware
func (sh *strictHandler) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request DeleteUserFromTeamRequestObject

	request.UserId = userId

	var body DeleteUserFromTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromTeam(ctx, request.(DeleteUserFromTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromTeamResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserTeams operation middleware
func (sh *strictHandler) ListUserTeams(w http.ResponseWriter, r *http.Request, userId UserParam, params ListUserTeamsParams) {
	var request ListUserTeamsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserTeams(ctx, request.(ListUserTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserTeamsResponseObject); ok {
		if err := validResponse.VisitListUserTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToTeam operation middleware
func (sh *strictHandler) AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request AttachUserToTeamRequestObject

	request.UserId = userId

	var body AttachUserToTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToTeam(ctx, request.(AttachUserToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToTeamResponseObject); ok {
		if err := validResponse.VisitAttachUserToTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserTeam operation middleware
func (sh *strictHandler) PermitUserTeam(w http.ResponseWriter, r *http.Request, userId UserParam) {
	var request PermitUserTeamRequestObject

	request.UserId = userId

	var body PermitUserTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserTeam(ctx, request.(PermitUserTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserTeamResponseObject); ok {
		if err := validResponse.VisitPermitUserTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Websockets operation middleware
func (sh *strictHandler) Websockets(w http.ResponseWriter, r *http.Request) {
	var request WebsocketsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Websockets(ctx, request.(WebsocketsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Websockets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WebsocketsResponseObject); ok {
		if err := validResponse.VisitWebsocketsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdX3PbOJL/KizePSqRMzt3D346jyezk7rMxBs5c1c1lUrBFCRxTBFcAJSjdfm7b+Ef",
	"CYr/QBASKZlPiUUCaHT/0Gigm93PfoC2CYphTIl//ewnAIMtpBDzv25SurlFS3jHfmU/LCEJcJjQEMX+",
	"NX/sBWgJ/Zkfsh/+mUK892d+DLbQv/blIxJs4Baw5nSfsN8JxWG89l9eZryLO4x24RLiulFiL1zCmIar",
	"EGJvhbBHN9ADbOxEtlTjJ4Bu8uG1pxj+Mw0xXPrXFKewgaSZ//0N/A62ScR+XYd0kz74ks4FBbSRFYS9",
	"UMML9ayJGbcY8omCqG4UL8he0ZmCsEeidF3NhrzJt3Bpz4u8mzfv2LP38S7EKN7CmNZSC/N3jMnV2vSi",
	"V+tHEPwh3sGYIryvJTdUbxgTm7XoRWrWiyD0DqzDeP0x3IZ1nBVveBF7pQZv6llOwhKuQBpR//rd1dVM",
	"ERTGFK4hPqDo3dVVRsen1YrAFkIQf6eGkuxhBSlthHAyMPoLBvUgS8RzY5nJ93tJTPYh5PUZJoiEjcjC",
	"2SvGZOZNelGadyOJTeO4XtV6mD82J5K/3o9A3oUgbhFs4DKNapWsR+QLxgSqBr1IVJ1IIiHAweYfDOQ1",
	"dIo3PLUOKrcD/krLfrBAmN6iKN3GdQMhTNn6C/hLdUMhTA0G+oTrt2A1DsLaZnu4zOWzilXuAxL4Mx/G",
	"6da//lP+xUbwv86aOc9fepn594A81oKCAvJoDAj2ci8wsA4EEO4h2NYTBcHWnCgItv2IgmCriNomUYOd",
	"4lH5QgfiRIOeBIpOBJFfSIMKSkkHBcRe7kXYX0sE+Rpg7SGhP6FlCLnxe4sh46PQ9D+h5Z79GKCYwpiy",
	"/4IkicIAMLrnfxFG/LM2aIJRAjGVfQlqD0lhlMRpFIEHRoog+/sbtA0Zt+he/PQy8/n0LVu/6Jz5UxCS",
	"rzr0wCbnv7DXinK438BsZ10CCjyKmPEpjNgir4XlmvMqN2N7cu0xjJf2XIvQOuTd/yeGK//a/495ftSZ",
	"iyHJPKf1I3/9ZdZTVmgHMQ6Xeg8PCEUQxObi3sAoMid8wV8/AkxmQgCmaNGOJh0Box0leiJGa8bmR9q4",
	"qI28gAGGlPFRzhZgDPbGQuu5wvngZAC6h9It+tGwI1yyg1xPsDzAAG35tmYtN21kyw4Kh3Prbvppyn7Y",
	"LR5UxrDJHR6dbLRZfhfQEZ35abAvPDGIg83RoNVfZ/UQ2MxPceRI2of3W1LabICZYqKp1LVzekexq6Nr",
	"T6GDgIa7PsZDgMUAQ2iCfojQzxlukFE8uUhccAaZ4iG7b+iIBnZeHXj5L+FDQRpdgaRt0D1scH4Lad08",
	"icD+AaHHvoZVj/YU0JSMFdSmMOY3JF0hLMfpq9CiCD19c3AqAnidbpWbyk4Y/ZeUxljbTg78G/b9fIdB",
	"ShG276HgvBhqiVfvOE7W/ggM05lPUryDe+ODnVp1C9HM9lS3A2nU4TipRv2D39faDdpigx94ykpePrk7",
	"Z6g2Vm3qOtNUvQkHyNne5818ih5hPMSRXfqGTBl9D8H2VV6b8qt/Uy59Ib3BmJ8ZMo+LmJbtTrvciovT",
	"rLsViIh9f3ALwshejKs0ivoBIQGEPCHM94AVwltAuR9B/jizPcESiPvQdQCxrLuZTprgncYEUxByL0o7",
	"CPmt901KNz0x2I3FjdwzYUz3O2nC+ABSumF/BjXcyExfsP0Zo6QnT5geaJ8ef6urR6agYtI4CuPHlvnc",
	"QdxXGycQbytNtQ4TnYlees2X9cBjW+rmy3SqA/kx4JnBs/N8CquzVX7cXXpE+XWYqKX8CvOtlx8Hqmji",
	"QH5y8PaZqRc7bfCHztF6KWqzOqYUO0+3oywrZ90sy/EuRD4Zw1WoZnKeS7A803qZfUmW4gJoFfa+yZ6s",
	"vjqrz1RzMiHk8OSiaRTaucepWMWkGPJlikk5y5gU28ATQ1RMgSdnG3hiHWRiCI0pyGQKMrEDXTlyxBBy",
	"5xI5cg7BBP3CS2xjRQwFPcWKjCNWxC4ExFDIk/988p8P5j8/XYDN5GQ/sZPdziveprRevVfcxgPextRz",
	"94B393a3ccSpt7uve3tyZw9xsVm8dK/HC4H4DFxBfDbmriBtVufsCqqcdYNbgUA8Xp86n4yhQ13N5Dy9",
	"6eWZ1smMD0YSFBNB7E3AuvkFhBFcvsdYWM3GE2+yin5HNFzJplV0izEZrcJghx7gtPBEMBgSlOIA8gwt",
	"EYZgub+hFLAT22mp/CwJ8ULiAUGIByQljLifwDK/HCenpe1LDFK6QTj8F1x6TyHdeE8YxWs9NoaReAui",
	"6AEEj5+l3J3Rd5PSzT23ziqI+zuMIQaUS/gRxoI++D0JMbdduWTfs2MWsaLrwCW5U+dfs7tu9nrJUNeP",
	"bNnuG8b0v3/0q5KZyOwnZi9TREFk9O6hNuANZ1nWlyznipyyiYa48QIURVCsLrTyZFOeOYcy2yBaQLyD",
	"+LToXaAt9EJJgEc4BR7kJIicPiAKlxxeQ+mltYSwh7DHqWH/F8cRFWA3vjX1O6LDa8oY0YKWZERlqurE",
	"SpInnZAkZTRIon5BaTwUmxhBKza+L+LBVmEEncNJ9lvrYE0xhjHNYxIgBaHYNUrudee05V3XkSfJ4RYB",
	"0L3BaOUBZaZWEutiU9G3UdOdRZ/TCbcX7VjQggbFMfcbks4um11Jj+gVAi8LWHNSOzEbtO5sHOWvTsYF",
	"hlmZHloHJlLeO9c6BfGZqB091KBG76iQghC6QGWY92YMyiyo4dVBUueWDSK19rWAzLjrHI2a3EywmEcg",
	"1CDxI1qvw3jtnE7Zbx2VkXgsqeQfJdcQmIVCuFkrI4I21mZmvG7zyJCqhet+tRSItFkuege16yWflXMg",
	"6gwzWTFaLEctIt3b3E13dUX6yvSoGBLndKmOzQjLoiNq2KZ6u7BVrKZtvoRztp5iAef02azerHUt+u4B",
	"cX9RyDp1gzrW04Uhju2WHWINOCtPgTRB15FQBsH20sTIptQhZCT7cuxE0uTk2UhT/1KTFGQoIlHcawvZ",
	"sZnGyAJi6jSGfH5xcJPT6hyldCq8KfpsMJe1rtUgXwjElyZSYyGImA5z0WvBCWXpm0pUDNlHg4gechme",
	"g/zMmXxSdZ5R10MeShS8lMqHOKRD+dnCOKQhiMJ/wbzui0aaFUpMRZaNdrAoWplYKFNDRLWIFYZkc1qX",
	"oBy00SUoQkDdH8V5t4bHcPmuImbUS18Q2+ESJ5vcCS5wJG1Wdzey7cvMX6RBAAn5DRIC1vBka/4uAmHs",
	"ETG4t5WjFzMpXNau0Gboy5Cwti5GuIvoWSOIkuERDgNs8mYHAcEmldRh1Dg6jtxt7MJslBMbhVn2igw7",
	"oxdYt1U/9nN9dp7ntsWwgUwx5MFfzGyRsbJfkjUGS3iL4liQXC4oI19hFuQTfCAoeITUC/IGxajsy9pW",
	"Gk903VWGyXAn2lb0CHSiZOgcnXJC7dtKzAnytQjxC1JT9fp/aAjZq7UsFD4Dz7gFdtTNfYiNPdvT/xAh",
	"syEaLIA3C9qVJcA4VRCHq/1RtjvRdRVJv0EK+JcZbN9VNW5lJPGLqmiWFea9V188HkSr8VM9+QaK2GIT",
	"fEPDrfjYCiw/xdH+IE+s7ReXzd2VscSalSEjauxK5lRFWTJD4Piz0j+D6zaxrGXV3LSIz5KF8htawogB",
	"EcMEQwJjqkU5io3SJSdeZr74Urv1NZXwRRVuFJya+YRsfJXLqqqCo9ssV80JrHKzqK7KjdvUVQwi/KPF",
	"PhJgqyekvP7grS7pBth8VDztgB1PCGLWkKu3Y17eMtXeRzlGA+0LJYEutAuxdaI9weEOUPjtUeQC6D+3",
	"haShNLf3xeIorfPSi6nMjp46TKTwOZWWqK/g0LIunaceO9mifV8QZxM6Fln9mS4Y8WTZmgaouNLpO4BF",
	"xHalJm9fLdpcvYWiusyRnfFK2VWtERBUJ41xhPTGxDRs/+ET+bYMSRKBfdMrNViXT8XvDUuldgTj3AAN",
	"a66LCdSfElWZt0c6AQWxXc06y8OiTZCVRUWX0CVy9HX7aKchr19Tyj5HgA0K5qQ51e01AS3VCKGAhoE/",
	"8/l3ZDP/CeFHkoAAdlErrVtGHqbbLWK6JUnRyfaNDxoES2hWwfMmWJaR9CUko5QmKTWSIAXk0TiMUBZN",
	"N+o3FLLtyaqP2QxLjCqc7Evc4pfGYeCp/AX8go5/MEw8EC/VaT9EMSmxT7xmbJHkVxdVpsg295qWFaBB",
	"pTl1pdOiHQvcqOCW+rbTBFbyA8/K7XfXdCTWTmNZeh2DV1O66XZTdZPSjVjQlX13y9/lQhEPngzIcFUe",
	"J2dQkmOrl7li7dFwggP723Anw/ffYdwkb5L65C7TAVWqRAUrmqgSlVloqOurWivjNJv9XcaBKkaKiDIT",
	"ThZCyEr81Oz09mMODndi0HYWByjuxOR2iIqMvJ34p6ZcYuDngiHYykLNbpwZ5kq+FEPd+nbmeGukJjuz",
	"LvvPusDK0heRdEaSF6+elRaqSWXpWj99Vqwp8Tf7Vs2Ew+ozngajsWz5uVlaNbc1Q60M9TlCp08smhJZ",
	"u5b4IhdVSeb38jjYKm9+bjyxFq2rZd5WptwcDDVZmBtTJJtecVc/qiksfg44uhcQKGNIhiu2Y0gmLyzq",
	"i06nQTbW6E6DvTTPiQojOAWCkGMlELhwTMHAjdyj7NKJZmpX3CeuTrBa2PxuxPwqOdXlWKWHUx+HXzIt",
	"aVb7VxWdUze96ElYDfJncd3zddaYhNbwg6gWbdopGhqC7VF14WEuVlHFXJvB1wMENBwH7zWFb4AA+fKs",
	"a6WI5iIQDfUdTuRlO9jKO2TXaqsJ0VjuwVxvh7q/yTjPUnOZiEbbo95E7WGUDOBEGaY+g4uT6kA1HjLF",
	"ka31WqWxyHhrrDo8KY9ZbSpDp5cVTsrD9HFNSiridPuQb2WZdd7JQZmr/Sr1KuX2XIWjKIU2OIpSWBme",
	"ewgRb6FkWosU0VknoHCySzjpe8DeKUKajCZJwR+SgoZZcTOl26xYk5Gh3xLdmg9HTL8bnmWb/m4DTWCC",
	"uSWBfSGGd3aqyvG4yn5MzsrX7qwcmaPuC6m+vc2gZ7rWLvnwzfN61x2+dWeyMbNe6eHbFfhNv0eqDR+s",
	"+uyi6fDNEdBw+M78+cYIqLy9HJf4x3NVcnSpK/IPRV53N6kFbVXHjoHIIxSnAU0x/2qYbNCTFjUmY8lK",
	"AFiFMKpmYm0gmK6oNLLKX9Pxs0qKQ7pfMIaJAX8CJAyyT8+4ScN/yZpvKE148RkIsBBB/qb4qfTqrxBI",
	"dc1sJX8j/lT2o///b27uPrz5X/2YAZKQ/c2/ZgvjFVJh6kAoH2ly+GsYw+8w+J8n+LAJkySEb5cw7/fv",
	"4qkvPcOcHHI9n8tWb2Hqlz8ovPvgLeGKZwWS5YBkNzMPiKIcYSCLBrEXmHXKAMzf/ABu+eeMAZRf90lC",
	"bhIQbOCbH95eFWi5ns+fnp7eAv70LcLruWxK5h8/3L7/ffGeNXm7odtIOwaqaXmfEhjf3H3wZ/4OYiLI",
	"f/f26u3VGxAlG/COR4gnMAZJ6F/7f2NPGLyANDjnbH+eZx9VJYhw1jLwccB8WIp4yTCWG538jlEVqKpa",
	"ePkrIeR5m0Vj3uSw+NMPV1f13cj35sU6Jy8z/8erd+2tquoivcz8/zIZsaoqjb5U/Os/v858km63AO+Z",
	"bFO6YQMF7JQiv9j2HvaFOkgzn4I1YQqG20RfWX+C/XkOp+tnfw2rJBASqsWsdGdhKZPVsTjxC6TBRnxh",
	"ugMhtzgPE1XVMwKLVFK1bJCppjIoduXCYX4sUyiVSwH1Zl/GMEkTQ03+Ta73AFcIQy+kMpNWE9d22Xet",
	"lUwTn71a8+zga+UxsEyQJPbNkO5VmgSQL0KmlEWoSz3bnhUiX2pZp+qWaUsvARhsIeWL9c/qqeSv8G+y",
	"VeM79rP/MjNqtKCAwk4tbtFSNfhqI+dSjTYu6R/bGxaLGLFW734wV0h51r9jaSQ1MQGTTkopL+pWq5VF",
	"AbnOwFhAgIPNP1KI98ZSvgPrMF5/DLch7djmE8+p0AcdB3XyODb+ZoSNw6pb7tSA2GpAFGlShUocSpri",
	"mz8hTnlLMycwWtUKdbFBT3mcstVOW6ijNSJWHdTYUqkgEogJikHkgSBAqfgcTnJP3Wt9ZSfItIJbovSy",
	"zq+O5mGhA3sT0S3Xf/zBQIMdJhdxJy3BE2+PUuyhpziTGzsDsVOyPMiVZKRjPAv0rAQ535b7oLyYsWsU",
	"GP8MKQ7hTtjfMXd8w6We56SBZdmHIk3Wt3jpFJp+gTC9RVG6jTs1+YS7mBlDbieljGij3VCSXO4aekQd",
	"b6YUKw/Mt/zCLr8Y7KwVCx300oqF+jJnrRUFTzzgxfBJuykvS0Vf09zKlze3L+JSLoIiGqoosp/577nI",
	"ui1yVXe9x5I4yIfLRWXQrFw9u6eQrUx+RyIWQvCARxIYhKswaJTzrNGAG0qOjtfckOKQ+tBUGs0Goit5",
	"2NqXo9KkdufqUVilhnCoVcLzg6K2bRbXbeEKtQ98ZpOt1gP6VZWNz1+3RVFD1d8yrgsfXRraf4UsbKdW",
	"fzWU9FaEFUW5X6FKLJikhbyKLcAx0o7z50L4n7n56gxx7UomH2qyfV3bvlrCws56qc0yPjuIjEvvHMvA",
	"7iPydvN7cKH3sd2nzevo9rw9+ur3s0K9fgNz/73+/mTvD2fv64K4LINfh6QB0PVPBw1N/mIO10Ftfo2U",
	"3npT62s/mf3S7C+mX26Dj5minD8Xvzo1N/3dIa9d4WhjTca/a+Nfz9jcXUe1mf9nCJOx6aBjHQH6Cb79",
	"EDAC0fc5Bkz72SlOAn1AWL/FqWwF8quGtqPAB+316SQw3ElAk8NlHQQ0PBqgPM/QYXgK0DNyD3oGyAjp",
	"rTGznibzX5r/eub/ZswY6cX5s57Sxdzud4W1duWSjTTZ/K5t/kz0nbVRm71/ZvAYlbY5lqFvL+12I39g",
	"efcx8KfN6si2vS3u6vevLHuXoWH/WX9/suyHs+x1QVyWaa9D0gDnWt46Q+O+kEV8UOs+p8RBeKPqarLv",
	"pX1fSO/fAhwzDTl/LmQ7NLfxnUGuXc/kQ01WvmsrP5d+d8XUZuefHUTGpXiOZer3EXm7sT+40PuY+9Pu",
	"dXSD3x599RuaqsxhZO8vspcnY384Yz+TwmVZ+hkSDcCd1ZMxNPK1oiaDmviKjt4qUnU0mffSvNcqDDXC",
	"xUATzp/VfztZ9Y4wZqC05ECTRe/aoldy76qB2qz5s4LGmDTMsex4W0G32/CDirqP/T5tTUe13e0QV79b",
	"UUAejWz2e/7iZK8PZ69zCVyWrc7RZwBlXgfQ0EaXBeMGtc8ZDb0VIOtkssulXS4rQdZCo0XDzZ/ZP53s",
	"cAc4alcRbJDJ/nZtfzNZd9EqbXb3WUBhLFrjWLZ2N6Ea64M5Sqk0xyth8Ik/PkMgfERrZn5cAhaEDE4B",
	"BkJRUp8JlKJk2hzOCzpMZkcBDgSiMJORLfELRltZI+LUdqkCLATbnzFK7K3SKjSd2iA1SSTNBqQUsMOv",
	"8+N4HIXxowdEZdwVRlubfHT6oZqjaDpUD3ioZhK4sEM1m5IH5BrwKGpL01d5phZrSHEJDa+97iDeXr72",
	"uokwBMt9SYMNfBYX9CjN1w6pqvttJsBQ13wTnobZDcdxqS2qy0O8FReAdrkjVZlVsyvs7OVpxx1yx5VS",
	"uLRdV07L5HShSm2bXmlrZfgHvdaWdPS/2pYdTdfb6npbK77eBBcDTTh/Vv/tdt3tBmMGtxpyoOlmw/m1",
	"tyqL3VEDtV5/nxM0xqRhjnYVbino9rCTQUXdJ+xk2pqOGnZih7j63Solsrql8fWprEA+0IGRjT5dn7q6",
	"PuXVUB1cn34holLfdJgb6jDHJXBZBzmumlxfnw6vvabr0zFcn4qa/v2vTyc8vfbrU44k8+tTnMZxW0Hx",
	"z/KdqaKhgw1SMnP8BQ1xJnWFHPFL6+WkmKF9NUPR3l6HiPYXWMsQK8aWBKKt5Pmz+I/ZJV8mq24rWzSb",
	"buqcp3w4lDDZAAyXbC3la6/2Wm4wYbpdcePKyGAikYb7M2cysboEG5cqvZAsCY1aOIv/q7Wm7GK7Jluq",
	"qri4wyCtI1pSVEpcAYb93WpFyUAYSxuKtbZf9qz1BdpPVLD0QAzZqp0/s3/M7CarMCUeXTTZTM69m1VS",
	"bTCTBpGdyyU1Mp9jNfsbbCInArCyh8ajFi/F/WeoUTN3n5lq/QWjrW0p8J5A4c3F0JNjz5VjT0pf+PY6",
	"KWxlMd8p/PSAw+TSs966FPsvy6WnlFLBq1e7oTX48xiL7tHwGmty5o3Bmae0XROY6j15mjgnJL1aN57C",
	"UO7JM7e1DIOolKFl5TN2gLQpduo4sVNW9pVdyNRkXLkwrl5FsJS9WTWkfpoMqjFFR1laUxOApnCoViMq",
	"M5pqt0m7LXLa9SrE53LHO6LjLiXFACj2d6vjTmobS8cda22vL1jrC3TcpaTgcJdiyFbt/Jn9Y+a4s9oL",
	"uCKfHHeOHXfVUm1w3A0iO5dLalSOuzr2NzjunAjAynE3HrV4GY47Y43awXHHuNzHcdcXKKz55Lg7ouOu",
	"k8JWFrO1406Dw3S3ZL11vSLHXe2G1nDDxFhk77hzp7Gme6aROe46WUfiqkkT54SkyXGX3TmZ21qGyWOV",
	"oWUVR+cAaVPO2OPkjLWyr+w+J5iMKxfG1atIEmtvVg2pnyaDakxZYS2tqQlAUxrYViPqqd5r93/wgaDg",
	"EfLbh4IQ3129M1DxyRqDJbxFcQz5VfygnqpgA7eQT/6JTeeJEP+rzrdfQbyMIObcelIT9wKNeN4NDFIc",
	"0j1fSb9CsITYv/7zK9s4f4IAa38BEgb8DzYKJ0YsvxRH/rW/oTQh1/M5xfu3axjD7zB4C9M5SML57p3/",
	"8vXl3wEAAP//698AstVvAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
