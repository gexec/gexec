// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// contextKey provides a type for use with context.WithValue.
type contextKey string

const (
	BasicScopes  contextKey = "Basic.Scopes"
	BearerScopes contextKey = "Bearer.Scopes"
	HeaderScopes contextKey = "Header.Scopes"
)

// Defines values for CredentialKind.
const (
	Empty CredentialKind = "empty"
	Login CredentialKind = "login"
	Shell CredentialKind = "shell"
)

// Defines values for EnvironmentSecretKind.
const (
	EnvironmentSecretKindEnv EnvironmentSecretKind = "env"
	EnvironmentSecretKindVar EnvironmentSecretKind = "var"
)

// Defines values for EnvironmentValueKind.
const (
	EnvironmentValueKindEnv EnvironmentValueKind = "env"
	EnvironmentValueKindVar EnvironmentValueKind = "var"
)

// Defines values for EventAction.
const (
	Create EventAction = "create"
	Delete EventAction = "delete"
	Update EventAction = "update"
)

// Defines values for EventObjectType.
const (
	EventObjectTypeCredential   EventObjectType = "credential"
	EventObjectTypeEnvironment  EventObjectType = "environment"
	EventObjectTypeExecution    EventObjectType = "execution"
	EventObjectTypeGroup        EventObjectType = "group"
	EventObjectTypeGroupProject EventObjectType = "group_project"
	EventObjectTypeGroupUser    EventObjectType = "group_user"
	EventObjectTypeInventory    EventObjectType = "inventory"
	EventObjectTypeProject      EventObjectType = "project"
	EventObjectTypeProjectGroup EventObjectType = "project_group"
	EventObjectTypeProjectUser  EventObjectType = "project_user"
	EventObjectTypeRepository   EventObjectType = "repository"
	EventObjectTypeRunner       EventObjectType = "runner"
	EventObjectTypeSchedule     EventObjectType = "schedule"
	EventObjectTypeTemplate     EventObjectType = "template"
	EventObjectTypeUser         EventObjectType = "user"
	EventObjectTypeUserGroup    EventObjectType = "user_group"
	EventObjectTypeUserProject  EventObjectType = "user_project"
)

// Defines values for GroupProjectPerm.
const (
	GroupProjectPermAdmin GroupProjectPerm = "admin"
	GroupProjectPermOwner GroupProjectPerm = "owner"
	GroupProjectPermUser  GroupProjectPerm = "user"
)

// Defines values for InventoryKind.
const (
	File   InventoryKind = "file"
	Static InventoryKind = "static"
)

// Defines values for TemplateSurveyKind.
const (
	Enum   TemplateSurveyKind = "enum"
	Number TemplateSurveyKind = "number"
	Secret TemplateSurveyKind = "secret"
	String TemplateSurveyKind = "string"
)

// Defines values for TemplateVaultKind.
const (
	Password TemplateVaultKind = "password"
	Script   TemplateVaultKind = "script"
)

// Defines values for UserGroupPerm.
const (
	UserGroupPermAdmin UserGroupPerm = "admin"
	UserGroupPermOwner UserGroupPerm = "owner"
	UserGroupPermUser  UserGroupPerm = "user"
)

// Defines values for UserProjectPerm.
const (
	UserProjectPermAdmin UserProjectPerm = "admin"
	UserProjectPermOwner UserProjectPerm = "owner"
	UserProjectPermUser  UserProjectPerm = "user"
)

// Defines values for SortOrderParam.
const (
	SortOrderParamAsc  SortOrderParam = "asc"
	SortOrderParamDesc SortOrderParam = "desc"
)

// Defines values for ListGroupsParamsOrder.
const (
	ListGroupsParamsOrderAsc  ListGroupsParamsOrder = "asc"
	ListGroupsParamsOrderDesc ListGroupsParamsOrder = "desc"
)

// Defines values for ListGroupProjectsParamsOrder.
const (
	ListGroupProjectsParamsOrderAsc  ListGroupProjectsParamsOrder = "asc"
	ListGroupProjectsParamsOrderDesc ListGroupProjectsParamsOrder = "desc"
)

// Defines values for ListGroupUsersParamsOrder.
const (
	ListGroupUsersParamsOrderAsc  ListGroupUsersParamsOrder = "asc"
	ListGroupUsersParamsOrderDesc ListGroupUsersParamsOrder = "desc"
)

// Defines values for ListProjectsParamsOrder.
const (
	ListProjectsParamsOrderAsc  ListProjectsParamsOrder = "asc"
	ListProjectsParamsOrderDesc ListProjectsParamsOrder = "desc"
)

// Defines values for ListProjectCredentialsParamsOrder.
const (
	ListProjectCredentialsParamsOrderAsc  ListProjectCredentialsParamsOrder = "asc"
	ListProjectCredentialsParamsOrderDesc ListProjectCredentialsParamsOrder = "desc"
)

// Defines values for ListProjectEnvironmentsParamsOrder.
const (
	ListProjectEnvironmentsParamsOrderAsc  ListProjectEnvironmentsParamsOrder = "asc"
	ListProjectEnvironmentsParamsOrderDesc ListProjectEnvironmentsParamsOrder = "desc"
)

// Defines values for ListProjectExecutionsParamsOrder.
const (
	ListProjectExecutionsParamsOrderAsc  ListProjectExecutionsParamsOrder = "asc"
	ListProjectExecutionsParamsOrderDesc ListProjectExecutionsParamsOrder = "desc"
)

// Defines values for ListProjectGroupsParamsOrder.
const (
	ListProjectGroupsParamsOrderAsc  ListProjectGroupsParamsOrder = "asc"
	ListProjectGroupsParamsOrderDesc ListProjectGroupsParamsOrder = "desc"
)

// Defines values for ListProjectInventoriesParamsOrder.
const (
	ListProjectInventoriesParamsOrderAsc  ListProjectInventoriesParamsOrder = "asc"
	ListProjectInventoriesParamsOrderDesc ListProjectInventoriesParamsOrder = "desc"
)

// Defines values for ListProjectRepositoriesParamsOrder.
const (
	ListProjectRepositoriesParamsOrderAsc  ListProjectRepositoriesParamsOrder = "asc"
	ListProjectRepositoriesParamsOrderDesc ListProjectRepositoriesParamsOrder = "desc"
)

// Defines values for ListProjectRunnersParamsOrder.
const (
	ListProjectRunnersParamsOrderAsc  ListProjectRunnersParamsOrder = "asc"
	ListProjectRunnersParamsOrderDesc ListProjectRunnersParamsOrder = "desc"
)

// Defines values for ListProjectSchedulesParamsOrder.
const (
	ListProjectSchedulesParamsOrderAsc  ListProjectSchedulesParamsOrder = "asc"
	ListProjectSchedulesParamsOrderDesc ListProjectSchedulesParamsOrder = "desc"
)

// Defines values for ListProjectTemplatesParamsOrder.
const (
	ListProjectTemplatesParamsOrderAsc  ListProjectTemplatesParamsOrder = "asc"
	ListProjectTemplatesParamsOrderDesc ListProjectTemplatesParamsOrder = "desc"
)

// Defines values for ListProjectUsersParamsOrder.
const (
	ListProjectUsersParamsOrderAsc  ListProjectUsersParamsOrder = "asc"
	ListProjectUsersParamsOrderDesc ListProjectUsersParamsOrder = "desc"
)

// Defines values for ListGlobalRunnersParamsOrder.
const (
	ListGlobalRunnersParamsOrderAsc  ListGlobalRunnersParamsOrder = "asc"
	ListGlobalRunnersParamsOrderDesc ListGlobalRunnersParamsOrder = "desc"
)

// Defines values for ListUsersParamsOrder.
const (
	ListUsersParamsOrderAsc  ListUsersParamsOrder = "asc"
	ListUsersParamsOrderDesc ListUsersParamsOrder = "desc"
)

// Defines values for ListUserGroupsParamsOrder.
const (
	ListUserGroupsParamsOrderAsc  ListUserGroupsParamsOrder = "asc"
	ListUserGroupsParamsOrderDesc ListUserGroupsParamsOrder = "desc"
)

// Defines values for ListUserProjectsParamsOrder.
const (
	Asc  ListUserProjectsParamsOrder = "asc"
	Desc ListUserProjectsParamsOrder = "desc"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Token     *string    `json:"token,omitempty"`
}

// AuthVerify defines model for AuthVerify.
type AuthVerify struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Username  *string    `json:"username,omitempty"`
}

// Credential Model to represent credential
type Credential struct {
	CreatedAt *time.Time      `json:"created_at,omitempty"`
	ID        *string         `json:"id,omitempty"`
	Kind      *CredentialKind `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login     *CredentialLogin `json:"login,omitempty"`
	Name      *string          `json:"name,omitempty"`
	Override  *bool            `json:"override,omitempty"`
	ProjectID *string          `json:"project_id,omitempty"`

	// Shell Model to represent credential shell
	Shell     *CredentialShell `json:"shell,omitempty"`
	Slug      *string          `json:"slug,omitempty"`
	UpdatedAt *time.Time       `json:"updated_at,omitempty"`
}

// CredentialKind defines model for Credential.Kind.
type CredentialKind string

// CredentialLogin Model to represent credential login
type CredentialLogin struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// CredentialShell Model to represent credential shell
type CredentialShell struct {
	Password   *string `json:"password,omitempty"`
	PrivateKey *string `json:"private_key,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// Environment Model to represent environment
type Environment struct {
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	ID        *string              `json:"id,omitempty"`
	Name      *string              `json:"name,omitempty"`
	ProjectID *string              `json:"project_id,omitempty"`
	Secrets   *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug      *string              `json:"slug,omitempty"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty"`
	Values    *[]EnvironmentValue  `json:"values,omitempty"`
}

// EnvironmentSecret Model to represent environment secret
type EnvironmentSecret struct {
	Content *string                `json:"content,omitempty"`
	ID      *string                `json:"id,omitempty"`
	Kind    *EnvironmentSecretKind `json:"kind,omitempty"`
	Name    *string                `json:"name,omitempty"`
}

// EnvironmentSecretKind defines model for EnvironmentSecret.Kind.
type EnvironmentSecretKind string

// EnvironmentValue Model to represent environment value
type EnvironmentValue struct {
	Content *string               `json:"content,omitempty"`
	ID      *string               `json:"id,omitempty"`
	Kind    *EnvironmentValueKind `json:"kind,omitempty"`
	Name    *string               `json:"name,omitempty"`
}

// EnvironmentValueKind defines model for EnvironmentValue.Kind.
type EnvironmentValueKind string

// Event Model to represent event
type Event struct {
	Action         *EventAction            `json:"action,omitempty"`
	Attrs          *map[string]interface{} `json:"attrs,omitempty"`
	CreatedAt      *time.Time              `json:"created_at,omitempty"`
	ObjectDisplay  *string                 `json:"object_display,omitempty"`
	ObjectID       *string                 `json:"object_id,omitempty"`
	ObjectType     *EventObjectType        `json:"object_type,omitempty"`
	ProjectDisplay *string                 `json:"project_display,omitempty"`
	ProjectID      *string                 `json:"project_id,omitempty"`
	UserDisplay    *string                 `json:"user_display,omitempty"`
	UserHandle     *string                 `json:"user_handle,omitempty"`
	UserID         *string                 `json:"user_id,omitempty"`
}

// EventAction defines model for Event.Action.
type EventAction string

// EventObjectType defines model for Event.ObjectType.
type EventObjectType string

// Execution Model to represent execution
type Execution struct {
	Branch      *string    `json:"branch,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Debug       *bool      `json:"debug,omitempty"`
	Environment *string    `json:"environment,omitempty"`
	ID          *string    `json:"id,omitempty"`
	Limit       *string    `json:"limit,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Playbook    *string    `json:"playbook,omitempty"`
	ProjectID   *string    `json:"project_id,omitempty"`
	Secret      *string    `json:"secret,omitempty"`
	Status      *string    `json:"status,omitempty"`

	// Template Model to represent template
	Template   *Template  `json:"template,omitempty"`
	TemplateID *string    `json:"template_id,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// Group Model to represent group
type Group struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ID        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// GroupProject Model to represent group project
type GroupProject struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Group Model to represent group
	Group   *Group            `json:"group,omitempty"`
	GroupID string            `json:"group_id"`
	Perm    *GroupProjectPerm `json:"perm,omitempty"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	ProjectID string     `json:"project_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// GroupProjectPerm defines model for GroupProject.Perm.
type GroupProjectPerm string

// Inventory Model to represent inventory
type Inventory struct {
	// Become Model to represent credential
	Become    *Credential `json:"become,omitempty"`
	BecomeID  *string     `json:"become_id,omitempty"`
	Content   *string     `json:"content,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`

	// Credential Model to represent credential
	Credential   *Credential    `json:"credential,omitempty"`
	CredentialID *string        `json:"credential_id,omitempty"`
	ID           *string        `json:"id,omitempty"`
	Kind         *InventoryKind `json:"kind,omitempty"`
	Name         *string        `json:"name,omitempty"`
	ProjectID    *string        `json:"project_id,omitempty"`

	// Repository Model to represent repository
	Repository   *Repository `json:"repository,omitempty"`
	RepositoryID *string     `json:"repository_id,omitempty"`
	Slug         *string     `json:"slug,omitempty"`
	UpdatedAt    *time.Time  `json:"updated_at,omitempty"`
}

// InventoryKind defines model for Inventory.Kind.
type InventoryKind string

// Notification Generic response for errors and validations
type Notification struct {
	Errors  *[]Validation `json:"errors,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// Output Model to represent output
type Output struct {
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Execution Model to represent execution
	Execution   *Execution `json:"execution,omitempty"`
	ExecutionID *string    `json:"execution_id,omitempty"`
}

// Profile Model to represent profile
type Profile struct {
	Active    *bool          `json:"active,omitempty"`
	Admin     *bool          `json:"admin,omitempty"`
	Auths     *[]UserAuth    `json:"auths,omitempty"`
	CreatedAt *time.Time     `json:"created_at,omitempty"`
	Email     *string        `json:"email,omitempty"`
	Fullname  *string        `json:"fullname,omitempty"`
	Groups    *[]UserGroup   `json:"groups,omitempty"`
	ID        *string        `json:"id,omitempty"`
	Password  *string        `json:"password,omitempty"`
	Profile   *string        `json:"profile,omitempty"`
	Projects  *[]UserProject `json:"projects,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
	Username  *string        `json:"username,omitempty"`
}

// Project Model to represent project
type Project struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ID        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Provider Model to represent auth provider
type Provider struct {
	Display *string `json:"display,omitempty"`
	Driver  *string `json:"driver,omitempty"`
	Icon    *string `json:"icon,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// Repository Model to represent repository
type Repository struct {
	Branch    *string    `json:"branch,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Credential Model to represent credential
	Credential   *Credential `json:"credential,omitempty"`
	CredentialID *string     `json:"credential_id,omitempty"`
	ID           *string     `json:"id,omitempty"`
	Name         *string     `json:"name,omitempty"`
	ProjectID    *string     `json:"project_id,omitempty"`
	Slug         *string     `json:"slug,omitempty"`
	UpdatedAt    *time.Time  `json:"updated_at,omitempty"`
	Url          *string     `json:"url,omitempty"`
}

// Runner Model to represent runner
type Runner struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ID        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	ProjectID *string    `json:"project_id,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	Token     *string    `json:"token,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Schedule Model to represent schedule
type Schedule struct {
	Active    *bool      `json:"active,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Cron      *string    `json:"cron,omitempty"`
	ID        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	ProjectID *string    `json:"project_id,omitempty"`
	Slug      *string    `json:"slug,omitempty"`

	// Template Model to represent template
	Template   *Template  `json:"template,omitempty"`
	TemplateID *string    `json:"template_id,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// Template Model to represent template
type Template struct {
	AllowOverride *bool      `json:"allow_override,omitempty"`
	Arguments     *string    `json:"arguments,omitempty"`
	Branch        *string    `json:"branch,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Description   *string    `json:"description,omitempty"`

	// Environment Model to represent environment
	Environment   *Environment `json:"environment,omitempty"`
	EnvironmentID *string      `json:"environment_id,omitempty"`
	Executor      *string      `json:"executor,omitempty"`
	ID            *string      `json:"id,omitempty"`

	// Inventory Model to represent inventory
	Inventory   *Inventory `json:"inventory,omitempty"`
	InventoryID *string    `json:"inventory_id,omitempty"`
	Limit       *string    `json:"limit,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Playbook    *string    `json:"playbook,omitempty"`
	ProjectID   *string    `json:"project_id,omitempty"`

	// Repository Model to represent repository
	Repository   *Repository       `json:"repository,omitempty"`
	RepositoryID *string           `json:"repository_id,omitempty"`
	Slug         *string           `json:"slug,omitempty"`
	Surveys      *[]TemplateSurvey `json:"surveys,omitempty"`
	UpdatedAt    *time.Time        `json:"updated_at,omitempty"`
	Vaults       *[]TemplateVault  `json:"vaults,omitempty"`
}

// TemplateSurvey Model to represent template survey
type TemplateSurvey struct {
	Description *string             `json:"description,omitempty"`
	ID          *string             `json:"id,omitempty"`
	Kind        *TemplateSurveyKind `json:"kind,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Required    *bool               `json:"required,omitempty"`
	Title       *string             `json:"title,omitempty"`
	Values      *[]TemplateValue    `json:"values,omitempty"`
}

// TemplateSurveyKind defines model for TemplateSurvey.Kind.
type TemplateSurveyKind string

// TemplateValue Model to represent template value
type TemplateValue struct {
	ID    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// TemplateVault Model to represent template vault
type TemplateVault struct {
	// Credential Model to represent credential
	Credential   *Credential        `json:"credential,omitempty"`
	CredentialID *string            `json:"credential_id,omitempty"`
	ID           *string            `json:"id,omitempty"`
	Kind         *TemplateVaultKind `json:"kind,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Script       *string            `json:"script,omitempty"`
}

// TemplateVaultKind defines model for TemplateVault.Kind.
type TemplateVaultKind string

// User Model to represent user
type User struct {
	Active    *bool       `json:"active,omitempty"`
	Admin     *bool       `json:"admin,omitempty"`
	Auths     *[]UserAuth `json:"auths,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Email     *string     `json:"email,omitempty"`
	Fullname  *string     `json:"fullname,omitempty"`
	ID        *string     `json:"id,omitempty"`
	Password  *string     `json:"password,omitempty"`
	Profile   *string     `json:"profile,omitempty"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
	Username  *string     `json:"username,omitempty"`
}

// UserAuth Model to represent user auth
type UserAuth struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Provider  *string    `json:"provider,omitempty"`
	Ref       *string    `json:"ref,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserGroup Model to represent user group
type UserGroup struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Group Model to represent group
	Group     *Group         `json:"group,omitempty"`
	GroupID   string         `json:"group_id"`
	Perm      *UserGroupPerm `json:"perm,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserID string `json:"user_id"`
}

// UserGroupPerm defines model for UserGroup.Perm.
type UserGroupPerm string

// UserProject Model to represent user project
type UserProject struct {
	CreatedAt *time.Time       `json:"created_at,omitempty"`
	Perm      *UserProjectPerm `json:"perm,omitempty"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	ProjectID string     `json:"project_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserID string `json:"user_id"`
}

// UserProjectPerm defines model for UserProject.Perm.
type UserProjectPerm string

// Validation General structure to show validation errors
type Validation struct {
	Field   *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
}

// AuthCodeParam defines model for AuthCodeParam.
type AuthCodeParam = string

// AuthProviderParam defines model for AuthProviderParam.
type AuthProviderParam = string

// AuthStateParam defines model for AuthStateParam.
type AuthStateParam = string

// CredentialID defines model for CredentialParam.
type CredentialID = string

// EnvironmentID defines model for EnvironmentParam.
type EnvironmentID = string

// ExecutionID defines model for ExecutionParam.
type ExecutionID = string

// GroupID defines model for GroupParam.
type GroupID = string

// InventoryID defines model for InventoryParam.
type InventoryID = string

// PagingLimitParam defines model for PagingLimitParam.
type PagingLimitParam = int

// PagingOffsetParam defines model for PagingOffsetParam.
type PagingOffsetParam = int

// ProjectID defines model for ProjectParam.
type ProjectID = string

// RepositoryID defines model for RepositoryParam.
type RepositoryID = string

// RunnerID defines model for RunnerParam.
type RunnerID = string

// ScheduleID defines model for ScheduleParam.
type ScheduleID = string

// SearchQueryParam defines model for SearchQueryParam.
type SearchQueryParam = string

// SecretID defines model for SecretParam.
type SecretID = string

// SortColumnParam defines model for SortColumnParam.
type SortColumnParam = string

// SortOrderParam defines model for SortOrderParam.
type SortOrderParam string

// SurveyID defines model for SurveyParam.
type SurveyID = string

// TemplateID defines model for TemplateParam.
type TemplateID = string

// UserID defines model for UserParam.
type UserID = string

// ValueID defines model for ValueParam.
type ValueID = string

// VaultID defines model for VaultParam.
type VaultID = string

// ActionFailedError Generic response for errors and validations
type ActionFailedError = Notification

// AlreadyAttachedError Generic response for errors and validations
type AlreadyAttachedError = Notification

// BadCredentialsError Generic response for errors and validations
type BadCredentialsError = Notification

// GlobalEventsResponse defines model for GlobalEventsResponse.
type GlobalEventsResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

// GlobalRunnerResponse Model to represent runner
type GlobalRunnerResponse = Runner

// GlobalRunnersResponse defines model for GlobalRunnersResponse.
type GlobalRunnersResponse struct {
	Limit   int64    `json:"limit"`
	Offset  int64    `json:"offset"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

// GroupProjectsResponse defines model for GroupProjectsResponse.
type GroupProjectsResponse struct {
	// Group Model to represent group
	Group    *Group         `json:"group,omitempty"`
	Limit    int64          `json:"limit"`
	Offset   int64          `json:"offset"`
	Projects []GroupProject `json:"projects"`
	Total    int64          `json:"total"`
}

// GroupResponse Model to represent group
type GroupResponse = Group

// GroupUsersResponse defines model for GroupUsersResponse.
type GroupUsersResponse struct {
	// Group Model to represent group
	Group  *Group      `json:"group,omitempty"`
	Limit  int64       `json:"limit"`
	Offset int64       `json:"offset"`
	Total  int64       `json:"total"`
	Users  []UserGroup `json:"users"`
}

// GroupsResponse defines model for GroupsResponse.
type GroupsResponse struct {
	Groups []Group `json:"groups"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

// InternalServerError Generic response for errors and validations
type InternalServerError = Notification

// InvalidTokenError Generic response for errors and validations
type InvalidTokenError = Notification

// LoginResponse defines model for LoginResponse.
type LoginResponse = AuthToken

// NotAttachedError Generic response for errors and validations
type NotAttachedError = Notification

// NotAuthorizedError Generic response for errors and validations
type NotAuthorizedError = Notification

// NotFoundError Generic response for errors and validations
type NotFoundError = Notification

// ProfileResponse Model to represent profile
type ProfileResponse = Profile

// ProjectCredentialResponse Model to represent credential
type ProjectCredentialResponse = Credential

// ProjectCredentialsResponse defines model for ProjectCredentialsResponse.
type ProjectCredentialsResponse struct {
	Credentials []Credential `json:"credentials"`
	Limit       int64        `json:"limit"`
	Offset      int64        `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectEnvironmentResponse Model to represent environment
type ProjectEnvironmentResponse = Environment

// ProjectEnvironmentSecretResponse Model to represent environment secret
type ProjectEnvironmentSecretResponse = EnvironmentSecret

// ProjectEnvironmentValueResponse Model to represent environment value
type ProjectEnvironmentValueResponse = EnvironmentValue

// ProjectEnvironmentsResponse defines model for ProjectEnvironmentsResponse.
type ProjectEnvironmentsResponse struct {
	Environments []Environment `json:"environments"`
	Limit        int64         `json:"limit"`
	Offset       int64         `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectEventsResponse defines model for ProjectEventsResponse.
type ProjectEventsResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectExecutionResponse Model to represent execution
type ProjectExecutionResponse = Execution

// ProjectExecutionsResponse defines model for ProjectExecutionsResponse.
type ProjectExecutionsResponse struct {
	Executions []Execution `json:"executions"`
	Limit      int64       `json:"limit"`
	Offset     int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectGroupsResponse defines model for ProjectGroupsResponse.
type ProjectGroupsResponse struct {
	Groups []GroupProject `json:"groups"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectInventoriesResponse defines model for ProjectInventoriesResponse.
type ProjectInventoriesResponse struct {
	Inventories []Inventory `json:"inventories"`
	Limit       int64       `json:"limit"`
	Offset      int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

// ProjectInventoryResponse Model to represent inventory
type ProjectInventoryResponse = Inventory

// ProjectOutputResponse defines model for ProjectOutputResponse.
type ProjectOutputResponse = []Output

// ProjectRepositoriesResponse defines model for ProjectRepositoriesResponse.
type ProjectRepositoriesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project      *Project     `json:"project,omitempty"`
	Repositories []Repository `json:"repositories"`
	Total        int64        `json:"total"`
}

// ProjectRepositoryResponse Model to represent repository
type ProjectRepositoryResponse = Repository

// ProjectResponse Model to represent project
type ProjectResponse = Project

// ProjectRunnerResponse Model to represent runner
type ProjectRunnerResponse = Runner

// ProjectRunnersResponse defines model for ProjectRunnersResponse.
type ProjectRunnersResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

// ProjectScheduleResponse Model to represent schedule
type ProjectScheduleResponse = Schedule

// ProjectSchedulesResponse defines model for ProjectSchedulesResponse.
type ProjectSchedulesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Schedules []Schedule `json:"schedules"`
	Total     int64      `json:"total"`
}

// ProjectTemplateResponse Model to represent template
type ProjectTemplateResponse = Template

// ProjectTemplateSurveyResponse Model to represent template survey
type ProjectTemplateSurveyResponse = TemplateSurvey

// ProjectTemplateVaultResponse Model to represent template vault
type ProjectTemplateVaultResponse = TemplateVault

// ProjectTemplatesResponse defines model for ProjectTemplatesResponse.
type ProjectTemplatesResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Templates []Template `json:"templates"`
	Total     int64      `json:"total"`
}

// ProjectUsersResponse defines model for ProjectUsersResponse.
type ProjectUsersResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Total   int64         `json:"total"`
	Users   []UserProject `json:"users"`
}

// ProjectsResponse defines model for ProjectsResponse.
type ProjectsResponse struct {
	Limit    int64     `json:"limit"`
	Offset   int64     `json:"offset"`
	Projects []Project `json:"projects"`
	Total    int64     `json:"total"`
}

// ProvidersResponse defines model for ProvidersResponse.
type ProvidersResponse struct {
	Providers []Provider `json:"providers"`
	Total     int64      `json:"total"`
}

// RefreshResponse defines model for RefreshResponse.
type RefreshResponse = AuthToken

// SuccessMessage Generic response for errors and validations
type SuccessMessage = Notification

// TokenResponse defines model for TokenResponse.
type TokenResponse = AuthToken

// UserGroupsResponse defines model for UserGroupsResponse.
type UserGroupsResponse struct {
	Groups []UserGroup `json:"groups"`
	Limit  int64       `json:"limit"`
	Offset int64       `json:"offset"`
	Total  int64       `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UserProjectsResponse defines model for UserProjectsResponse.
type UserProjectsResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []UserProject `json:"projects"`
	Total    int64         `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UserResponse Model to represent user
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Total  int64  `json:"total"`
	Users  []User `json:"users"`
}

// ValidationError Generic response for errors and validations
type ValidationError = Notification

// VerifyResponse defines model for VerifyResponse.
type VerifyResponse = AuthVerify

// CreateGlobalRunnerBody defines model for CreateGlobalRunnerBody.
type CreateGlobalRunnerBody struct {
	Name      *string `json:"name,omitempty"`
	ProjectID *string `json:"project_id,omitempty"`
	Slug      *string `json:"slug,omitempty"`
	Token     *string `json:"token,omitempty"`
}

// CreateGroupBody defines model for CreateGroupBody.
type CreateGroupBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// CreateProjectBody defines model for CreateProjectBody.
type CreateProjectBody struct {
	Demo *bool   `json:"demo,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// CreateProjectCredentialBody defines model for CreateProjectCredentialBody.
type CreateProjectCredentialBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// CreateProjectEnvironmentBody defines model for CreateProjectEnvironmentBody.
type CreateProjectEnvironmentBody struct {
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
	Values  *[]EnvironmentValue  `json:"values,omitempty"`
}

// CreateProjectEnvironmentSecretBody defines model for CreateProjectEnvironmentSecretBody.
type CreateProjectEnvironmentSecretBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// CreateProjectEnvironmentValueBody defines model for CreateProjectEnvironmentValueBody.
type CreateProjectEnvironmentValueBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// CreateProjectExecutionBody defines model for CreateProjectExecutionBody.
type CreateProjectExecutionBody struct {
	Branch      *string `json:"branch,omitempty"`
	Debug       *bool   `json:"debug,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Limit       *string `json:"limit,omitempty"`
	Playbook    *string `json:"playbook,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Status      *string `json:"status,omitempty"`
	TemplateID  *string `json:"template_id,omitempty"`
}

// CreateProjectInventoryBody defines model for CreateProjectInventoryBody.
type CreateProjectInventoryBody struct {
	BecomeID     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryID *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// CreateProjectRepositoryBody defines model for CreateProjectRepositoryBody.
type CreateProjectRepositoryBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// CreateProjectRunnerBody defines model for CreateProjectRunnerBody.
type CreateProjectRunnerBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// CreateProjectScheduleBody defines model for CreateProjectScheduleBody.
type CreateProjectScheduleBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateID *string `json:"template_id,omitempty"`
}

// CreateProjectTemplateBody defines model for CreateProjectTemplateBody.
type CreateProjectTemplateBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentID *string           `json:"environment_id,omitempty"`
	Executor      *string           `json:"executor,omitempty"`
	InventoryID   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryID  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Surveys       *[]TemplateSurvey `json:"surveys,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// CreateProjectTemplateSurveyBody defines model for CreateProjectTemplateSurveyBody.
type CreateProjectTemplateSurveyBody struct {
	Description *string          `json:"description,omitempty"`
	Kind        *string          `json:"kind,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Required    *bool            `json:"required,omitempty"`
	Title       *string          `json:"title,omitempty"`
	Values      *[]TemplateValue `json:"values,omitempty"`
}

// CreateProjectTemplateVaultBody defines model for CreateProjectTemplateVaultBody.
type CreateProjectTemplateVaultBody struct {
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	Script       *string `json:"script,omitempty"`
}

// CreateUserBody defines model for CreateUserBody.
type CreateUserBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// GroupProjectDropBody defines model for GroupProjectDropBody.
type GroupProjectDropBody struct {
	Project string `json:"project"`
}

// GroupProjectPermBody defines model for GroupProjectPermBody.
type GroupProjectPermBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// GroupUserDropBody defines model for GroupUserDropBody.
type GroupUserDropBody struct {
	User string `json:"user"`
}

// GroupUserPermBody defines model for GroupUserPermBody.
type GroupUserPermBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// LoginAuthBody defines model for LoginAuthBody.
type LoginAuthBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// ProjectGroupDropBody defines model for ProjectGroupDropBody.
type ProjectGroupDropBody struct {
	Group string `json:"group"`
}

// ProjectGroupPermBody defines model for ProjectGroupPermBody.
type ProjectGroupPermBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// ProjectUserDropBody defines model for ProjectUserDropBody.
type ProjectUserDropBody struct {
	User string `json:"user"`
}

// ProjectUserPermBody defines model for ProjectUserPermBody.
type ProjectUserPermBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// UpdateGlobalRunnerBody defines model for UpdateGlobalRunnerBody.
type UpdateGlobalRunnerBody struct {
	Name      *string `json:"name,omitempty"`
	ProjectID *string `json:"project_id,omitempty"`
	Slug      *string `json:"slug,omitempty"`
	Token     *string `json:"token,omitempty"`
}

// UpdateGroupBody defines model for UpdateGroupBody.
type UpdateGroupBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateProfileBody defines model for UpdateProfileBody.
type UpdateProfileBody struct {
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UpdateProjectBody defines model for UpdateProjectBody.
type UpdateProjectBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateProjectCredentialBody defines model for UpdateProjectCredentialBody.
type UpdateProjectCredentialBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// UpdateProjectEnvironmentBody defines model for UpdateProjectEnvironmentBody.
type UpdateProjectEnvironmentBody struct {
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
	Values  *[]EnvironmentValue  `json:"values,omitempty"`
}

// UpdateProjectEnvironmentSecretBody defines model for UpdateProjectEnvironmentSecretBody.
type UpdateProjectEnvironmentSecretBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateProjectEnvironmentValueBody defines model for UpdateProjectEnvironmentValueBody.
type UpdateProjectEnvironmentValueBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateProjectInventoryBody defines model for UpdateProjectInventoryBody.
type UpdateProjectInventoryBody struct {
	BecomeID     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryID *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// UpdateProjectRepositoryBody defines model for UpdateProjectRepositoryBody.
type UpdateProjectRepositoryBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// UpdateProjectRunnerBody defines model for UpdateProjectRunnerBody.
type UpdateProjectRunnerBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// UpdateProjectScheduleBody defines model for UpdateProjectScheduleBody.
type UpdateProjectScheduleBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateID *string `json:"template_id,omitempty"`
}

// UpdateProjectTemplateBody defines model for UpdateProjectTemplateBody.
type UpdateProjectTemplateBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentID *string           `json:"environment_id,omitempty"`
	InventoryID   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryID  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Surveys       *[]TemplateSurvey `json:"surveys,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// UpdateProjectTemplateSurveyBody defines model for UpdateProjectTemplateSurveyBody.
type UpdateProjectTemplateSurveyBody struct {
	Description *string          `json:"description,omitempty"`
	Kind        *string          `json:"kind,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Required    *bool            `json:"required,omitempty"`
	Title       *string          `json:"title,omitempty"`
	Values      *[]TemplateValue `json:"values,omitempty"`
}

// UpdateProjectTemplateVaultBody defines model for UpdateProjectTemplateVaultBody.
type UpdateProjectTemplateVaultBody struct {
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	Script       *string `json:"script,omitempty"`
}

// UpdateUserBody defines model for UpdateUserBody.
type UpdateUserBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserGroupDropBody defines model for UserGroupDropBody.
type UserGroupDropBody struct {
	Group string `json:"group"`
}

// UserGroupPermBody defines model for UserGroupPermBody.
type UserGroupPermBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// UserProjectDropBody defines model for UserProjectDropBody.
type UserProjectDropBody struct {
	Project string `json:"project"`
}

// UserProjectPermBody defines model for UserProjectPermBody.
type UserProjectPermBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// LoginAuthJSONBody defines parameters for LoginAuth.
type LoginAuthJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CallbackProviderParams defines parameters for CallbackProvider.
type CallbackProviderParams struct {
	// State Auth state
	State *AuthStateParam `form:"state,omitempty" json:"state,omitempty"`

	// Code Auth code
	Code *AuthCodeParam `form:"code,omitempty" json:"code,omitempty"`
}

// ListGlobalEventsParams defines parameters for ListGlobalEvents.
type ListGlobalEventsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListGroupsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGroupsParamsOrder defines parameters for ListGroups.
type ListGroupsParamsOrder string

// CreateGroupJSONBody defines parameters for CreateGroup.
type CreateGroupJSONBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateGroupJSONBody defines parameters for UpdateGroup.
type UpdateGroupJSONBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// DeleteGroupFromProjectJSONBody defines parameters for DeleteGroupFromProject.
type DeleteGroupFromProjectJSONBody struct {
	Project string `json:"project"`
}

// ListGroupProjectsParams defines parameters for ListGroupProjects.
type ListGroupProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListGroupProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGroupProjectsParamsOrder defines parameters for ListGroupProjects.
type ListGroupProjectsParamsOrder string

// AttachGroupToProjectJSONBody defines parameters for AttachGroupToProject.
type AttachGroupToProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// PermitGroupProjectJSONBody defines parameters for PermitGroupProject.
type PermitGroupProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// DeleteGroupFromUserJSONBody defines parameters for DeleteGroupFromUser.
type DeleteGroupFromUserJSONBody struct {
	User string `json:"user"`
}

// ListGroupUsersParams defines parameters for ListGroupUsers.
type ListGroupUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListGroupUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGroupUsersParamsOrder defines parameters for ListGroupUsers.
type ListGroupUsersParamsOrder string

// AttachGroupToUserJSONBody defines parameters for AttachGroupToUser.
type AttachGroupToUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// PermitGroupUserJSONBody defines parameters for PermitGroupUser.
type PermitGroupUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// UpdateProfileJSONBody defines parameters for UpdateProfile.
type UpdateProfileJSONBody struct {
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ListProjectsParams defines parameters for ListProjects.
type ListProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectsParamsOrder defines parameters for ListProjects.
type ListProjectsParamsOrder string

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Demo *bool   `json:"demo,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// ListProjectCredentialsParams defines parameters for ListProjectCredentials.
type ListProjectCredentialsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectCredentialsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectCredentialsParamsOrder defines parameters for ListProjectCredentials.
type ListProjectCredentialsParamsOrder string

// CreateProjectCredentialJSONBody defines parameters for CreateProjectCredential.
type CreateProjectCredentialJSONBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// UpdateProjectCredentialJSONBody defines parameters for UpdateProjectCredential.
type UpdateProjectCredentialJSONBody struct {
	Kind *string `json:"kind,omitempty"`

	// Login Model to represent credential login
	Login    *CredentialLogin `json:"login,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Override *bool            `json:"override,omitempty"`

	// Shell Model to represent credential shell
	Shell *CredentialShell `json:"shell,omitempty"`
	Slug  *string          `json:"slug,omitempty"`
}

// ListProjectEnvironmentsParams defines parameters for ListProjectEnvironments.
type ListProjectEnvironmentsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectEnvironmentsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectEnvironmentsParamsOrder defines parameters for ListProjectEnvironments.
type ListProjectEnvironmentsParamsOrder string

// CreateProjectEnvironmentJSONBody defines parameters for CreateProjectEnvironment.
type CreateProjectEnvironmentJSONBody struct {
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
	Values  *[]EnvironmentValue  `json:"values,omitempty"`
}

// UpdateProjectEnvironmentJSONBody defines parameters for UpdateProjectEnvironment.
type UpdateProjectEnvironmentJSONBody struct {
	Name    *string              `json:"name,omitempty"`
	Secrets *[]EnvironmentSecret `json:"secrets,omitempty"`
	Slug    *string              `json:"slug,omitempty"`
	Values  *[]EnvironmentValue  `json:"values,omitempty"`
}

// CreateProjectEnvironmentSecretJSONBody defines parameters for CreateProjectEnvironmentSecret.
type CreateProjectEnvironmentSecretJSONBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateProjectEnvironmentSecretJSONBody defines parameters for UpdateProjectEnvironmentSecret.
type UpdateProjectEnvironmentSecretJSONBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// CreateProjectEnvironmentValueJSONBody defines parameters for CreateProjectEnvironmentValue.
type CreateProjectEnvironmentValueJSONBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateProjectEnvironmentValueJSONBody defines parameters for UpdateProjectEnvironmentValue.
type UpdateProjectEnvironmentValueJSONBody struct {
	Content *string `json:"content,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// ListProjectEventsParams defines parameters for ListProjectEvents.
type ListProjectEventsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectExecutionsParams defines parameters for ListProjectExecutions.
type ListProjectExecutionsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectExecutionsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectExecutionsParamsOrder defines parameters for ListProjectExecutions.
type ListProjectExecutionsParamsOrder string

// CreateProjectExecutionJSONBody defines parameters for CreateProjectExecution.
type CreateProjectExecutionJSONBody struct {
	Branch      *string `json:"branch,omitempty"`
	Debug       *bool   `json:"debug,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Limit       *string `json:"limit,omitempty"`
	Playbook    *string `json:"playbook,omitempty"`
	Secret      *string `json:"secret,omitempty"`
	Status      *string `json:"status,omitempty"`
	TemplateID  *string `json:"template_id,omitempty"`
}

// DeleteProjectFromGroupJSONBody defines parameters for DeleteProjectFromGroup.
type DeleteProjectFromGroupJSONBody struct {
	Group string `json:"group"`
}

// ListProjectGroupsParams defines parameters for ListProjectGroups.
type ListProjectGroupsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectGroupsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectGroupsParamsOrder defines parameters for ListProjectGroups.
type ListProjectGroupsParamsOrder string

// AttachProjectToGroupJSONBody defines parameters for AttachProjectToGroup.
type AttachProjectToGroupJSONBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// PermitProjectGroupJSONBody defines parameters for PermitProjectGroup.
type PermitProjectGroupJSONBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// ListProjectInventoriesParams defines parameters for ListProjectInventories.
type ListProjectInventoriesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectInventoriesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectInventoriesParamsOrder defines parameters for ListProjectInventories.
type ListProjectInventoriesParamsOrder string

// CreateProjectInventoryJSONBody defines parameters for CreateProjectInventory.
type CreateProjectInventoryJSONBody struct {
	BecomeID     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryID *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// UpdateProjectInventoryJSONBody defines parameters for UpdateProjectInventory.
type UpdateProjectInventoryJSONBody struct {
	BecomeID     *string `json:"become_id,omitempty"`
	Content      *string `json:"content,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	RepositoryID *string `json:"repository_id,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// ListProjectRepositoriesParams defines parameters for ListProjectRepositories.
type ListProjectRepositoriesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectRepositoriesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectRepositoriesParamsOrder defines parameters for ListProjectRepositories.
type ListProjectRepositoriesParamsOrder string

// CreateProjectRepositoryJSONBody defines parameters for CreateProjectRepository.
type CreateProjectRepositoryJSONBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// UpdateProjectRepositoryJSONBody defines parameters for UpdateProjectRepository.
type UpdateProjectRepositoryJSONBody struct {
	Branch       *string `json:"branch,omitempty"`
	CredentialID *string `json:"credential_id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// ListProjectRunnersParams defines parameters for ListProjectRunners.
type ListProjectRunnersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectRunnersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectRunnersParamsOrder defines parameters for ListProjectRunners.
type ListProjectRunnersParamsOrder string

// CreateProjectRunnerJSONBody defines parameters for CreateProjectRunner.
type CreateProjectRunnerJSONBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// UpdateProjectRunnerJSONBody defines parameters for UpdateProjectRunner.
type UpdateProjectRunnerJSONBody struct {
	Name  *string `json:"name,omitempty"`
	Slug  *string `json:"slug,omitempty"`
	Token *string `json:"token,omitempty"`
}

// ListProjectSchedulesParams defines parameters for ListProjectSchedules.
type ListProjectSchedulesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectSchedulesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectSchedulesParamsOrder defines parameters for ListProjectSchedules.
type ListProjectSchedulesParamsOrder string

// CreateProjectScheduleJSONBody defines parameters for CreateProjectSchedule.
type CreateProjectScheduleJSONBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateID *string `json:"template_id,omitempty"`
}

// UpdateProjectScheduleJSONBody defines parameters for UpdateProjectSchedule.
type UpdateProjectScheduleJSONBody struct {
	Active     *bool   `json:"active,omitempty"`
	Cron       *string `json:"cron,omitempty"`
	Name       *string `json:"name,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	TemplateID *string `json:"template_id,omitempty"`
}

// ListProjectTemplatesParams defines parameters for ListProjectTemplates.
type ListProjectTemplatesParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectTemplatesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectTemplatesParamsOrder defines parameters for ListProjectTemplates.
type ListProjectTemplatesParamsOrder string

// CreateProjectTemplateJSONBody defines parameters for CreateProjectTemplate.
type CreateProjectTemplateJSONBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentID *string           `json:"environment_id,omitempty"`
	Executor      *string           `json:"executor,omitempty"`
	InventoryID   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryID  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Surveys       *[]TemplateSurvey `json:"surveys,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// UpdateProjectTemplateJSONBody defines parameters for UpdateProjectTemplate.
type UpdateProjectTemplateJSONBody struct {
	AllowOverride *bool             `json:"allow_override,omitempty"`
	Arguments     *string           `json:"arguments,omitempty"`
	Branch        *string           `json:"branch,omitempty"`
	Description   *string           `json:"description,omitempty"`
	EnvironmentID *string           `json:"environment_id,omitempty"`
	InventoryID   *string           `json:"inventory_id,omitempty"`
	Limit         *string           `json:"limit,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Playbook      *string           `json:"playbook,omitempty"`
	RepositoryID  *string           `json:"repository_id,omitempty"`
	Slug          *string           `json:"slug,omitempty"`
	Surveys       *[]TemplateSurvey `json:"surveys,omitempty"`
	Vaults        *[]TemplateVault  `json:"vaults,omitempty"`
}

// CreateProjectTemplateSurveyJSONBody defines parameters for CreateProjectTemplateSurvey.
type CreateProjectTemplateSurveyJSONBody struct {
	Description *string          `json:"description,omitempty"`
	Kind        *string          `json:"kind,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Required    *bool            `json:"required,omitempty"`
	Title       *string          `json:"title,omitempty"`
	Values      *[]TemplateValue `json:"values,omitempty"`
}

// UpdateProjectTemplateSurveyJSONBody defines parameters for UpdateProjectTemplateSurvey.
type UpdateProjectTemplateSurveyJSONBody struct {
	Description *string          `json:"description,omitempty"`
	Kind        *string          `json:"kind,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Required    *bool            `json:"required,omitempty"`
	Title       *string          `json:"title,omitempty"`
	Values      *[]TemplateValue `json:"values,omitempty"`
}

// CreateProjectTemplateVaultJSONBody defines parameters for CreateProjectTemplateVault.
type CreateProjectTemplateVaultJSONBody struct {
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	Script       *string `json:"script,omitempty"`
}

// UpdateProjectTemplateVaultJSONBody defines parameters for UpdateProjectTemplateVault.
type UpdateProjectTemplateVaultJSONBody struct {
	CredentialID *string `json:"credential_id,omitempty"`
	Kind         *string `json:"kind,omitempty"`
	Name         *string `json:"name,omitempty"`
	Script       *string `json:"script,omitempty"`
}

// DeleteProjectFromUserJSONBody defines parameters for DeleteProjectFromUser.
type DeleteProjectFromUserJSONBody struct {
	User string `json:"user"`
}

// ListProjectUsersParams defines parameters for ListProjectUsers.
type ListProjectUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListProjectUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListProjectUsersParamsOrder defines parameters for ListProjectUsers.
type ListProjectUsersParamsOrder string

// AttachProjectToUserJSONBody defines parameters for AttachProjectToUser.
type AttachProjectToUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// PermitProjectUserJSONBody defines parameters for PermitProjectUser.
type PermitProjectUserJSONBody struct {
	Perm string `json:"perm"`
	User string `json:"user"`
}

// ListGlobalRunnersParams defines parameters for ListGlobalRunners.
type ListGlobalRunnersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListGlobalRunnersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListGlobalRunnersParamsOrder defines parameters for ListGlobalRunners.
type ListGlobalRunnersParamsOrder string

// CreateGlobalRunnerJSONBody defines parameters for CreateGlobalRunner.
type CreateGlobalRunnerJSONBody struct {
	Name      *string `json:"name,omitempty"`
	ProjectID *string `json:"project_id,omitempty"`
	Slug      *string `json:"slug,omitempty"`
	Token     *string `json:"token,omitempty"`
}

// UpdateGlobalRunnerJSONBody defines parameters for UpdateGlobalRunner.
type UpdateGlobalRunnerJSONBody struct {
	Name      *string `json:"name,omitempty"`
	ProjectID *string `json:"project_id,omitempty"`
	Slug      *string `json:"slug,omitempty"`
	Token     *string `json:"token,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUsersParamsOrder defines parameters for ListUsers.
type ListUsersParamsOrder string

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Active   *bool   `json:"active,omitempty"`
	Admin    *bool   `json:"admin,omitempty"`
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// DeleteUserFromGroupJSONBody defines parameters for DeleteUserFromGroup.
type DeleteUserFromGroupJSONBody struct {
	Group string `json:"group"`
}

// ListUserGroupsParams defines parameters for ListUserGroups.
type ListUserGroupsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserGroupsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserGroupsParamsOrder defines parameters for ListUserGroups.
type ListUserGroupsParamsOrder string

// AttachUserToGroupJSONBody defines parameters for AttachUserToGroup.
type AttachUserToGroupJSONBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// PermitUserGroupJSONBody defines parameters for PermitUserGroup.
type PermitUserGroupJSONBody struct {
	Group string `json:"group"`
	Perm  string `json:"perm"`
}

// DeleteUserFromProjectJSONBody defines parameters for DeleteUserFromProject.
type DeleteUserFromProjectJSONBody struct {
	Project string `json:"project"`
}

// ListUserProjectsParams defines parameters for ListUserProjects.
type ListUserProjectsParams struct {
	// Search Search query
	Search *SearchQueryParam `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *SortColumnParam `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserProjectsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *PagingLimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *PagingOffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserProjectsParamsOrder defines parameters for ListUserProjects.
type ListUserProjectsParamsOrder string

// AttachUserToProjectJSONBody defines parameters for AttachUserToProject.
type AttachUserToProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// PermitUserProjectJSONBody defines parameters for PermitUserProject.
type PermitUserProjectJSONBody struct {
	Perm    string `json:"perm"`
	Project string `json:"project"`
}

// LoginAuthJSONRequestBody defines body for LoginAuth for application/json ContentType.
type LoginAuthJSONRequestBody LoginAuthJSONBody

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody CreateGroupJSONBody

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody UpdateGroupJSONBody

// DeleteGroupFromProjectJSONRequestBody defines body for DeleteGroupFromProject for application/json ContentType.
type DeleteGroupFromProjectJSONRequestBody DeleteGroupFromProjectJSONBody

// AttachGroupToProjectJSONRequestBody defines body for AttachGroupToProject for application/json ContentType.
type AttachGroupToProjectJSONRequestBody AttachGroupToProjectJSONBody

// PermitGroupProjectJSONRequestBody defines body for PermitGroupProject for application/json ContentType.
type PermitGroupProjectJSONRequestBody PermitGroupProjectJSONBody

// DeleteGroupFromUserJSONRequestBody defines body for DeleteGroupFromUser for application/json ContentType.
type DeleteGroupFromUserJSONRequestBody DeleteGroupFromUserJSONBody

// AttachGroupToUserJSONRequestBody defines body for AttachGroupToUser for application/json ContentType.
type AttachGroupToUserJSONRequestBody AttachGroupToUserJSONBody

// PermitGroupUserJSONRequestBody defines body for PermitGroupUser for application/json ContentType.
type PermitGroupUserJSONRequestBody PermitGroupUserJSONBody

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody UpdateProfileJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// CreateProjectCredentialJSONRequestBody defines body for CreateProjectCredential for application/json ContentType.
type CreateProjectCredentialJSONRequestBody CreateProjectCredentialJSONBody

// UpdateProjectCredentialJSONRequestBody defines body for UpdateProjectCredential for application/json ContentType.
type UpdateProjectCredentialJSONRequestBody UpdateProjectCredentialJSONBody

// CreateProjectEnvironmentJSONRequestBody defines body for CreateProjectEnvironment for application/json ContentType.
type CreateProjectEnvironmentJSONRequestBody CreateProjectEnvironmentJSONBody

// UpdateProjectEnvironmentJSONRequestBody defines body for UpdateProjectEnvironment for application/json ContentType.
type UpdateProjectEnvironmentJSONRequestBody UpdateProjectEnvironmentJSONBody

// CreateProjectEnvironmentSecretJSONRequestBody defines body for CreateProjectEnvironmentSecret for application/json ContentType.
type CreateProjectEnvironmentSecretJSONRequestBody CreateProjectEnvironmentSecretJSONBody

// UpdateProjectEnvironmentSecretJSONRequestBody defines body for UpdateProjectEnvironmentSecret for application/json ContentType.
type UpdateProjectEnvironmentSecretJSONRequestBody UpdateProjectEnvironmentSecretJSONBody

// CreateProjectEnvironmentValueJSONRequestBody defines body for CreateProjectEnvironmentValue for application/json ContentType.
type CreateProjectEnvironmentValueJSONRequestBody CreateProjectEnvironmentValueJSONBody

// UpdateProjectEnvironmentValueJSONRequestBody defines body for UpdateProjectEnvironmentValue for application/json ContentType.
type UpdateProjectEnvironmentValueJSONRequestBody UpdateProjectEnvironmentValueJSONBody

// CreateProjectExecutionJSONRequestBody defines body for CreateProjectExecution for application/json ContentType.
type CreateProjectExecutionJSONRequestBody CreateProjectExecutionJSONBody

// DeleteProjectFromGroupJSONRequestBody defines body for DeleteProjectFromGroup for application/json ContentType.
type DeleteProjectFromGroupJSONRequestBody DeleteProjectFromGroupJSONBody

// AttachProjectToGroupJSONRequestBody defines body for AttachProjectToGroup for application/json ContentType.
type AttachProjectToGroupJSONRequestBody AttachProjectToGroupJSONBody

// PermitProjectGroupJSONRequestBody defines body for PermitProjectGroup for application/json ContentType.
type PermitProjectGroupJSONRequestBody PermitProjectGroupJSONBody

// CreateProjectInventoryJSONRequestBody defines body for CreateProjectInventory for application/json ContentType.
type CreateProjectInventoryJSONRequestBody CreateProjectInventoryJSONBody

// UpdateProjectInventoryJSONRequestBody defines body for UpdateProjectInventory for application/json ContentType.
type UpdateProjectInventoryJSONRequestBody UpdateProjectInventoryJSONBody

// CreateProjectRepositoryJSONRequestBody defines body for CreateProjectRepository for application/json ContentType.
type CreateProjectRepositoryJSONRequestBody CreateProjectRepositoryJSONBody

// UpdateProjectRepositoryJSONRequestBody defines body for UpdateProjectRepository for application/json ContentType.
type UpdateProjectRepositoryJSONRequestBody UpdateProjectRepositoryJSONBody

// CreateProjectRunnerJSONRequestBody defines body for CreateProjectRunner for application/json ContentType.
type CreateProjectRunnerJSONRequestBody CreateProjectRunnerJSONBody

// UpdateProjectRunnerJSONRequestBody defines body for UpdateProjectRunner for application/json ContentType.
type UpdateProjectRunnerJSONRequestBody UpdateProjectRunnerJSONBody

// CreateProjectScheduleJSONRequestBody defines body for CreateProjectSchedule for application/json ContentType.
type CreateProjectScheduleJSONRequestBody CreateProjectScheduleJSONBody

// UpdateProjectScheduleJSONRequestBody defines body for UpdateProjectSchedule for application/json ContentType.
type UpdateProjectScheduleJSONRequestBody UpdateProjectScheduleJSONBody

// CreateProjectTemplateJSONRequestBody defines body for CreateProjectTemplate for application/json ContentType.
type CreateProjectTemplateJSONRequestBody CreateProjectTemplateJSONBody

// UpdateProjectTemplateJSONRequestBody defines body for UpdateProjectTemplate for application/json ContentType.
type UpdateProjectTemplateJSONRequestBody UpdateProjectTemplateJSONBody

// CreateProjectTemplateSurveyJSONRequestBody defines body for CreateProjectTemplateSurvey for application/json ContentType.
type CreateProjectTemplateSurveyJSONRequestBody CreateProjectTemplateSurveyJSONBody

// UpdateProjectTemplateSurveyJSONRequestBody defines body for UpdateProjectTemplateSurvey for application/json ContentType.
type UpdateProjectTemplateSurveyJSONRequestBody UpdateProjectTemplateSurveyJSONBody

// CreateProjectTemplateVaultJSONRequestBody defines body for CreateProjectTemplateVault for application/json ContentType.
type CreateProjectTemplateVaultJSONRequestBody CreateProjectTemplateVaultJSONBody

// UpdateProjectTemplateVaultJSONRequestBody defines body for UpdateProjectTemplateVault for application/json ContentType.
type UpdateProjectTemplateVaultJSONRequestBody UpdateProjectTemplateVaultJSONBody

// DeleteProjectFromUserJSONRequestBody defines body for DeleteProjectFromUser for application/json ContentType.
type DeleteProjectFromUserJSONRequestBody DeleteProjectFromUserJSONBody

// AttachProjectToUserJSONRequestBody defines body for AttachProjectToUser for application/json ContentType.
type AttachProjectToUserJSONRequestBody AttachProjectToUserJSONBody

// PermitProjectUserJSONRequestBody defines body for PermitProjectUser for application/json ContentType.
type PermitProjectUserJSONRequestBody PermitProjectUserJSONBody

// CreateGlobalRunnerJSONRequestBody defines body for CreateGlobalRunner for application/json ContentType.
type CreateGlobalRunnerJSONRequestBody CreateGlobalRunnerJSONBody

// UpdateGlobalRunnerJSONRequestBody defines body for UpdateGlobalRunner for application/json ContentType.
type UpdateGlobalRunnerJSONRequestBody UpdateGlobalRunnerJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// DeleteUserFromGroupJSONRequestBody defines body for DeleteUserFromGroup for application/json ContentType.
type DeleteUserFromGroupJSONRequestBody DeleteUserFromGroupJSONBody

// AttachUserToGroupJSONRequestBody defines body for AttachUserToGroup for application/json ContentType.
type AttachUserToGroupJSONRequestBody AttachUserToGroupJSONBody

// PermitUserGroupJSONRequestBody defines body for PermitUserGroup for application/json ContentType.
type PermitUserGroupJSONRequestBody PermitUserGroupJSONBody

// DeleteUserFromProjectJSONRequestBody defines body for DeleteUserFromProject for application/json ContentType.
type DeleteUserFromProjectJSONRequestBody DeleteUserFromProjectJSONBody

// AttachUserToProjectJSONRequestBody defines body for AttachUserToProject for application/json ContentType.
type AttachUserToProjectJSONRequestBody AttachUserToProjectJSONBody

// PermitUserProjectJSONRequestBody defines body for PermitUserProject for application/json ContentType.
type PermitUserProjectJSONRequestBody PermitUserProjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(w http.ResponseWriter, r *http.Request)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ListProviders(w http.ResponseWriter, r *http.Request)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(w http.ResponseWriter, r *http.Request)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(w http.ResponseWriter, r *http.Request)
	// Callback to parse the defined provider
	// (GET /auth/{provider}/callback)
	CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams)
	// Request the redirect to defined provider
	// (GET /auth/{provider}/request)
	RequestProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam)
	// Fetch all events
	// (GET /events)
	ListGlobalEvents(w http.ResponseWriter, r *http.Request, params ListGlobalEventsParams)
	// Fetch all available groups
	// (GET /groups)
	ListGroups(w http.ResponseWriter, r *http.Request, params ListGroupsParams)
	// Create a new group
	// (POST /groups)
	CreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete a specific group
	// (DELETE /groups/{group_id})
	DeleteGroup(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Fetch a specific group
	// (GET /groups/{group_id})
	ShowGroup(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Update a specific group
	// (PUT /groups/{group_id})
	UpdateGroup(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Unlink a project from group
	// (DELETE /groups/{group_id}/projects)
	DeleteGroupFromProject(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Fetch all projects attached to group
	// (GET /groups/{group_id}/projects)
	ListGroupProjects(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupProjectsParams)
	// Attach a project to group
	// (POST /groups/{group_id}/projects)
	AttachGroupToProject(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Update project perms for group
	// (PUT /groups/{group_id}/projects)
	PermitGroupProject(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Unlink a user from group
	// (DELETE /groups/{group_id}/users)
	DeleteGroupFromUser(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Fetch all users attached to group
	// (GET /groups/{group_id}/users)
	ListGroupUsers(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupUsersParams)
	// Attach a user to group
	// (POST /groups/{group_id}/users)
	AttachGroupToUser(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Update user perms for group
	// (PUT /groups/{group_id}/users)
	PermitGroupUser(w http.ResponseWriter, r *http.Request, groupID GroupID)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(w http.ResponseWriter, r *http.Request)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(w http.ResponseWriter, r *http.Request)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(w http.ResponseWriter, r *http.Request)
	// Fetch all available projects
	// (GET /projects)
	ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams)
	// Create a new project
	// (POST /projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Delete a specific project
	// (DELETE /projects/{project_id})
	DeleteProject(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch a specific project
	// (GET /projects/{project_id})
	ShowProject(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Update a specific project
	// (PUT /projects/{project_id})
	UpdateProject(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch all credentials for a project
	// (GET /projects/{project_id}/credentials)
	ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectCredentialsParams)
	// Create a new credential
	// (POST /projects/{project_id}/credentials)
	CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific credential for a project
	// (DELETE /projects/{project_id}/credentials/{credential_id})
	DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID)
	// Fetch a specific credential for a project
	// (GET /projects/{project_id}/credentials/{credential_id})
	ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID)
	// Update a specific credential for a project
	// (PUT /projects/{project_id}/credentials/{credential_id})
	UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID)
	// Fetch all environments for a project
	// (GET /projects/{project_id}/environments)
	ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEnvironmentsParams)
	// Create a new environment
	// (POST /projects/{project_id}/environments)
	CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id})
	DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID)
	// Fetch a specific environment for a project
	// (GET /projects/{project_id}/environments/{environment_id})
	ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID)
	// Update a specific environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id})
	UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID)
	// Create a new secret on an environment
	// (POST /projects/{project_id}/environments/{environment_id}/secrets)
	CreateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID)
	// Delete a secret on an environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
	DeleteProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID)
	// Update a secret on an environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
	UpdateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID)
	// Create a new value on an environment
	// (POST /projects/{project_id}/environments/{environment_id}/values)
	CreateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID)
	// Delete a value on an environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id}/values/{value_id})
	DeleteProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID)
	// Update a value on an environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id}/values/{value_id})
	UpdateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID)
	// Fetch all events for a project
	// (GET /projects/{project_id}/events)
	ListProjectEvents(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEventsParams)
	// Fetch all executions for a project
	// (GET /projects/{project_id}/executions)
	ListProjectExecutions(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectExecutionsParams)
	// Create a new execution
	// (POST /projects/{project_id}/executions)
	CreateProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific execution for a project
	// (DELETE /projects/{project_id}/executions/{execution_id})
	DeleteProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID)
	// Fetch a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id})
	ShowProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID)
	// Output a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id}/output)
	OutputProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID)
	// Purge a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id}/purge)
	PurgeProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID)
	// Unlink a group from project
	// (DELETE /projects/{project_id}/groups)
	DeleteProjectFromGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch all groups attached to project
	// (GET /projects/{project_id}/groups)
	ListProjectGroups(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectGroupsParams)
	// Attach a group to project
	// (POST /projects/{project_id}/groups)
	AttachProjectToGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Update group perms for project
	// (PUT /projects/{project_id}/groups)
	PermitProjectGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch all inventories for a project
	// (GET /projects/{project_id}/inventories)
	ListProjectInventories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectInventoriesParams)
	// Create a new inventory
	// (POST /projects/{project_id}/inventories)
	CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific inventory for a project
	// (DELETE /projects/{project_id}/inventories/{inventory_id})
	DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID)
	// Fetch a specific inventory for a project
	// (GET /projects/{project_id}/inventories/{inventory_id})
	ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID)
	// Update a specific inventory for a project
	// (PUT /projects/{project_id}/inventories/{inventory_id})
	UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID)
	// Fetch all repositories for a project
	// (GET /projects/{project_id}/repositories)
	ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRepositoriesParams)
	// Create a new repository
	// (POST /projects/{project_id}/repositories)
	CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific repository for a project
	// (DELETE /projects/{project_id}/repositories/{repository_id})
	DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID)
	// Fetch a specific repository for a project
	// (GET /projects/{project_id}/repositories/{repository_id})
	ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID)
	// Update a specific repository for a project
	// (PUT /projects/{project_id}/repositories/{repository_id})
	UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID)
	// Fetch all runners for a project
	// (GET /projects/{project_id}/runners)
	ListProjectRunners(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRunnersParams)
	// Create a new runner
	// (POST /projects/{project_id}/runners)
	CreateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific runner for a project
	// (DELETE /projects/{project_id}/runners/{runner_id})
	DeleteProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID)
	// Fetch a specific runner for a project
	// (GET /projects/{project_id}/runners/{runner_id})
	ShowProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID)
	// Update a specific runner for a project
	// (PUT /projects/{project_id}/runners/{runner_id})
	UpdateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID)
	// Fetch all schedules for a project
	// (GET /projects/{project_id}/schedules)
	ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectSchedulesParams)
	// Create a new schedule
	// (POST /projects/{project_id}/schedules)
	CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific schedule for a project
	// (DELETE /projects/{project_id}/schedules/{schedule_id})
	DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID)
	// Fetch a specific schedule for a project
	// (GET /projects/{project_id}/schedules/{schedule_id})
	ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID)
	// Update a specific schedule for a project
	// (PUT /projects/{project_id}/schedules/{schedule_id})
	UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID)
	// Fetch all templates for a project
	// (GET /projects/{project_id}/templates)
	ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectTemplatesParams)
	// Create a new template
	// (POST /projects/{project_id}/templates)
	CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Delete a specific template for a project
	// (DELETE /projects/{project_id}/templates/{template_id})
	DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID)
	// Fetch a specific template for a project
	// (GET /projects/{project_id}/templates/{template_id})
	ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID)
	// Update a specific template for a project
	// (PUT /projects/{project_id}/templates/{template_id})
	UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID)
	// Create a new survey on a template
	// (POST /projects/{project_id}/templates/{template_id}/surveys)
	CreateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID)
	// Delete a survey on a template for a project
	// (DELETE /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
	DeleteProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID)
	// Update a survey on a template for a project
	// (PUT /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
	UpdateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID)
	// Create a new vault on a template
	// (POST /projects/{project_id}/templates/{template_id}/vaults)
	CreateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID)
	// Delete a vault on a template for a project
	// (DELETE /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
	DeleteProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID)
	// Update a vault on a template for a project
	// (PUT /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
	UpdateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID)
	// Unlink a user from project
	// (DELETE /projects/{project_id}/users)
	DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch all users attached to project
	// (GET /projects/{project_id}/users)
	ListProjectUsers(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectUsersParams)
	// Attach a user to project
	// (POST /projects/{project_id}/users)
	AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Update user perms for project
	// (PUT /projects/{project_id}/users)
	PermitProjectUser(w http.ResponseWriter, r *http.Request, projectID ProjectID)
	// Fetch all runners
	// (GET /runners)
	ListGlobalRunners(w http.ResponseWriter, r *http.Request, params ListGlobalRunnersParams)
	// Create a new global runner
	// (POST /runners)
	CreateGlobalRunner(w http.ResponseWriter, r *http.Request)
	// Delete a specific runner
	// (DELETE /runners/{runner_id})
	DeleteGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID)
	// Fetch a specific runner
	// (GET /runners/{runner_id})
	ShowGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID)
	// Update a specific runner
	// (PUT /runners/{runner_id})
	UpdateGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID)
	// Fetch all available users
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(w http.ResponseWriter, r *http.Request, userID UserID)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(w http.ResponseWriter, r *http.Request, userID UserID)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(w http.ResponseWriter, r *http.Request, userID UserID)
	// Unlink a group from user
	// (DELETE /users/{user_id}/groups)
	DeleteUserFromGroup(w http.ResponseWriter, r *http.Request, userID UserID)
	// Fetch all groups attached to user
	// (GET /users/{user_id}/groups)
	ListUserGroups(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserGroupsParams)
	// Attach a group to user
	// (POST /users/{user_id}/groups)
	AttachUserToGroup(w http.ResponseWriter, r *http.Request, userID UserID)
	// Update group perms for user
	// (PUT /users/{user_id}/groups)
	PermitUserGroup(w http.ResponseWriter, r *http.Request, userID UserID)
	// Unlink a project from user
	// (DELETE /users/{user_id}/projects)
	DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userID UserID)
	// Fetch all projects attached to user
	// (GET /users/{user_id}/projects)
	ListUserProjects(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserProjectsParams)
	// Attach a project to user
	// (POST /users/{user_id}/projects)
	AttachUserToProject(w http.ResponseWriter, r *http.Request, userID UserID)
	// Update project perms for user
	// (PUT /users/{user_id}/projects)
	PermitUserProject(w http.ResponseWriter, r *http.Request, userID UserID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate an user by credentials
// (POST /auth/login)
func (_ Unimplemented) LoginAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available auth providers
// (GET /auth/providers)
func (_ Unimplemented) ListProviders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh an auth token before it expires
// (GET /auth/refresh)
func (_ Unimplemented) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify validity for an authentication token
// (GET /auth/verify)
func (_ Unimplemented) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Callback to parse the defined provider
// (GET /auth/{provider}/callback)
func (_ Unimplemented) CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Request the redirect to defined provider
// (GET /auth/{provider}/request)
func (_ Unimplemented) RequestProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all events
// (GET /events)
func (_ Unimplemented) ListGlobalEvents(w http.ResponseWriter, r *http.Request, params ListGlobalEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available groups
// (GET /groups)
func (_ Unimplemented) ListGroups(w http.ResponseWriter, r *http.Request, params ListGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new group
// (POST /groups)
func (_ Unimplemented) CreateGroup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific group
// (DELETE /groups/{group_id})
func (_ Unimplemented) DeleteGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific group
// (GET /groups/{group_id})
func (_ Unimplemented) ShowGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific group
// (PUT /groups/{group_id})
func (_ Unimplemented) UpdateGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a project from group
// (DELETE /groups/{group_id}/projects)
func (_ Unimplemented) DeleteGroupFromProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all projects attached to group
// (GET /groups/{group_id}/projects)
func (_ Unimplemented) ListGroupProjects(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a project to group
// (POST /groups/{group_id}/projects)
func (_ Unimplemented) AttachGroupToProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project perms for group
// (PUT /groups/{group_id}/projects)
func (_ Unimplemented) PermitGroupProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from group
// (DELETE /groups/{group_id}/users)
func (_ Unimplemented) DeleteGroupFromUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to group
// (GET /groups/{group_id}/users)
func (_ Unimplemented) ListGroupUsers(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to group
// (POST /groups/{group_id}/users)
func (_ Unimplemented) AttachGroupToUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for group
// (PUT /groups/{group_id}/users)
func (_ Unimplemented) PermitGroupUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch profile details of the personal account
// (GET /profile/self)
func (_ Unimplemented) ShowProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update your own profile information
// (PUT /profile/self)
func (_ Unimplemented) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an unlimited auth token
// (GET /profile/token)
func (_ Unimplemented) TokenProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available projects
// (GET /projects)
func (_ Unimplemented) ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project
// (POST /projects)
func (_ Unimplemented) CreateProject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific project
// (DELETE /projects/{project_id})
func (_ Unimplemented) DeleteProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific project
// (GET /projects/{project_id})
func (_ Unimplemented) ShowProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific project
// (PUT /projects/{project_id})
func (_ Unimplemented) UpdateProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all credentials for a project
// (GET /projects/{project_id}/credentials)
func (_ Unimplemented) ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectCredentialsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new credential
// (POST /projects/{project_id}/credentials)
func (_ Unimplemented) CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific credential for a project
// (DELETE /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific credential for a project
// (GET /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific credential for a project
// (PUT /projects/{project_id}/credentials/{credential_id})
func (_ Unimplemented) UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all environments for a project
// (GET /projects/{project_id}/environments)
func (_ Unimplemented) ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEnvironmentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new environment
// (POST /projects/{project_id}/environments)
func (_ Unimplemented) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific environment for a project
// (DELETE /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific environment for a project
// (GET /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific environment for a project
// (PUT /projects/{project_id}/environments/{environment_id})
func (_ Unimplemented) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new secret on an environment
// (POST /projects/{project_id}/environments/{environment_id}/secrets)
func (_ Unimplemented) CreateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a secret on an environment for a project
// (DELETE /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
func (_ Unimplemented) DeleteProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a secret on an environment for a project
// (PUT /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
func (_ Unimplemented) UpdateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new value on an environment
// (POST /projects/{project_id}/environments/{environment_id}/values)
func (_ Unimplemented) CreateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a value on an environment for a project
// (DELETE /projects/{project_id}/environments/{environment_id}/values/{value_id})
func (_ Unimplemented) DeleteProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a value on an environment for a project
// (PUT /projects/{project_id}/environments/{environment_id}/values/{value_id})
func (_ Unimplemented) UpdateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all events for a project
// (GET /projects/{project_id}/events)
func (_ Unimplemented) ListProjectEvents(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all executions for a project
// (GET /projects/{project_id}/executions)
func (_ Unimplemented) ListProjectExecutions(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectExecutionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new execution
// (POST /projects/{project_id}/executions)
func (_ Unimplemented) CreateProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific execution for a project
// (DELETE /projects/{project_id}/executions/{execution_id})
func (_ Unimplemented) DeleteProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific execution for a project
// (GET /projects/{project_id}/executions/{execution_id})
func (_ Unimplemented) ShowProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Output a specific execution for a project
// (GET /projects/{project_id}/executions/{execution_id}/output)
func (_ Unimplemented) OutputProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Purge a specific execution for a project
// (GET /projects/{project_id}/executions/{execution_id}/purge)
func (_ Unimplemented) PurgeProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a group from project
// (DELETE /projects/{project_id}/groups)
func (_ Unimplemented) DeleteProjectFromGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all groups attached to project
// (GET /projects/{project_id}/groups)
func (_ Unimplemented) ListProjectGroups(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a group to project
// (POST /projects/{project_id}/groups)
func (_ Unimplemented) AttachProjectToGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update group perms for project
// (PUT /projects/{project_id}/groups)
func (_ Unimplemented) PermitProjectGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all inventories for a project
// (GET /projects/{project_id}/inventories)
func (_ Unimplemented) ListProjectInventories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectInventoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new inventory
// (POST /projects/{project_id}/inventories)
func (_ Unimplemented) CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific inventory for a project
// (DELETE /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific inventory for a project
// (GET /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific inventory for a project
// (PUT /projects/{project_id}/inventories/{inventory_id})
func (_ Unimplemented) UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all repositories for a project
// (GET /projects/{project_id}/repositories)
func (_ Unimplemented) ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRepositoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new repository
// (POST /projects/{project_id}/repositories)
func (_ Unimplemented) CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific repository for a project
// (DELETE /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific repository for a project
// (GET /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific repository for a project
// (PUT /projects/{project_id}/repositories/{repository_id})
func (_ Unimplemented) UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all runners for a project
// (GET /projects/{project_id}/runners)
func (_ Unimplemented) ListProjectRunners(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRunnersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new runner
// (POST /projects/{project_id}/runners)
func (_ Unimplemented) CreateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific runner for a project
// (DELETE /projects/{project_id}/runners/{runner_id})
func (_ Unimplemented) DeleteProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific runner for a project
// (GET /projects/{project_id}/runners/{runner_id})
func (_ Unimplemented) ShowProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific runner for a project
// (PUT /projects/{project_id}/runners/{runner_id})
func (_ Unimplemented) UpdateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all schedules for a project
// (GET /projects/{project_id}/schedules)
func (_ Unimplemented) ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectSchedulesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new schedule
// (POST /projects/{project_id}/schedules)
func (_ Unimplemented) CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific schedule for a project
// (DELETE /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific schedule for a project
// (GET /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific schedule for a project
// (PUT /projects/{project_id}/schedules/{schedule_id})
func (_ Unimplemented) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all templates for a project
// (GET /projects/{project_id}/templates)
func (_ Unimplemented) ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectTemplatesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new template
// (POST /projects/{project_id}/templates)
func (_ Unimplemented) CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific template for a project
// (DELETE /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific template for a project
// (GET /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific template for a project
// (PUT /projects/{project_id}/templates/{template_id})
func (_ Unimplemented) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new survey on a template
// (POST /projects/{project_id}/templates/{template_id}/surveys)
func (_ Unimplemented) CreateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a survey on a template for a project
// (DELETE /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
func (_ Unimplemented) DeleteProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a survey on a template for a project
// (PUT /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
func (_ Unimplemented) UpdateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new vault on a template
// (POST /projects/{project_id}/templates/{template_id}/vaults)
func (_ Unimplemented) CreateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a vault on a template for a project
// (DELETE /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
func (_ Unimplemented) DeleteProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a vault on a template for a project
// (PUT /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
func (_ Unimplemented) UpdateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from project
// (DELETE /projects/{project_id}/users)
func (_ Unimplemented) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to project
// (GET /projects/{project_id}/users)
func (_ Unimplemented) ListProjectUsers(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to project
// (POST /projects/{project_id}/users)
func (_ Unimplemented) AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for project
// (PUT /projects/{project_id}/users)
func (_ Unimplemented) PermitProjectUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all runners
// (GET /runners)
func (_ Unimplemented) ListGlobalRunners(w http.ResponseWriter, r *http.Request, params ListGlobalRunnersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new global runner
// (POST /runners)
func (_ Unimplemented) CreateGlobalRunner(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific runner
// (DELETE /runners/{runner_id})
func (_ Unimplemented) DeleteGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific runner
// (GET /runners/{runner_id})
func (_ Unimplemented) ShowGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific runner
// (PUT /runners/{runner_id})
func (_ Unimplemented) UpdateGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available users
// (GET /users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific user
// (DELETE /users/{user_id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific user
// (GET /users/{user_id})
func (_ Unimplemented) ShowUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific user
// (PUT /users/{user_id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a group from user
// (DELETE /users/{user_id}/groups)
func (_ Unimplemented) DeleteUserFromGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all groups attached to user
// (GET /users/{user_id}/groups)
func (_ Unimplemented) ListUserGroups(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a group to user
// (POST /users/{user_id}/groups)
func (_ Unimplemented) AttachUserToGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update group perms for user
// (PUT /users/{user_id}/groups)
func (_ Unimplemented) PermitUserGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a project from user
// (DELETE /users/{user_id}/projects)
func (_ Unimplemented) DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all projects attached to user
// (GET /users/{user_id}/projects)
func (_ Unimplemented) ListUserProjects(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserProjectsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a project to user
// (POST /users/{user_id}/projects)
func (_ Unimplemented) AttachUserToProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project perms for user
// (PUT /users/{user_id}/projects)
func (_ Unimplemented) PermitUserProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginAuth operation middleware
func (siw *ServerInterfaceWrapper) LoginAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshAuth operation middleware
func (siw *ServerInterfaceWrapper) RefreshAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyAuth operation middleware
func (siw *ServerInterfaceWrapper) VerifyAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CallbackProvider operation middleware
func (siw *ServerInterfaceWrapper) CallbackProvider(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider AuthProviderParam

	err = runtime.BindStyledParameterWithOptions("simple", "provider", chi.URLParam(r, "provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackProviderParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CallbackProvider(w, r, provider, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RequestProvider operation middleware
func (siw *ServerInterfaceWrapper) RequestProvider(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider AuthProviderParam

	err = runtime.BindStyledParameterWithOptions("simple", "provider", chi.URLParam(r, "provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestProvider(w, r, provider)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGlobalEvents operation middleware
func (siw *ServerInterfaceWrapper) ListGlobalEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGlobalEventsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGlobalEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGroups operation middleware
func (siw *ServerInterfaceWrapper) ListGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGroups(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroup(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroup(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowGroup operation middleware
func (siw *ServerInterfaceWrapper) ShowGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowGroup(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGroup(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroupFromProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupFromProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroupFromProject(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGroupProjects operation middleware
func (siw *ServerInterfaceWrapper) ListGroupProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGroupProjects(w, r, groupID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachGroupToProject operation middleware
func (siw *ServerInterfaceWrapper) AttachGroupToProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachGroupToProject(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitGroupProject operation middleware
func (siw *ServerInterfaceWrapper) PermitGroupProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitGroupProject(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGroupFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGroupFromUser(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGroupUsers operation middleware
func (siw *ServerInterfaceWrapper) ListGroupUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGroupUsers(w, r, groupID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachGroupToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachGroupToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachGroupToUser(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitGroupUser operation middleware
func (siw *ServerInterfaceWrapper) PermitGroupUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupID GroupID

	err = runtime.BindStyledParameterWithOptions("simple", "group_id", chi.URLParam(r, "group_id"), &groupID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "group_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitGroupUser(w, r, groupID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProfile operation middleware
func (siw *ServerInterfaceWrapper) ShowProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TokenProfile operation middleware
func (siw *ServerInterfaceWrapper) TokenProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjects(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProject(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProject operation middleware
func (siw *ServerInterfaceWrapper) ShowProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProject(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProject(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectCredentials operation middleware
func (siw *ServerInterfaceWrapper) ListProjectCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectCredentialsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectCredentials(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectCredential(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialID CredentialID

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectCredential(w, r, projectID, credentialID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialID CredentialID

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectCredential(w, r, projectID, credentialID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectCredential operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "credential_id" -------------
	var credentialID CredentialID

	err = runtime.BindStyledParameterWithOptions("simple", "credential_id", chi.URLParam(r, "credential_id"), &credentialID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectCredential(w, r, projectID, credentialID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectEnvironments operation middleware
func (siw *ServerInterfaceWrapper) ListProjectEnvironments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectEnvironmentsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectEnvironments(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectEnvironment(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectEnvironment(w, r, projectID, environmentID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectEnvironment(w, r, projectID, environmentID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectEnvironment(w, r, projectID, environmentID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectEnvironmentSecret operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectEnvironmentSecret(w, r, projectID, environmentID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectEnvironmentSecret operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	// ------------- Path parameter "secret_id" -------------
	var secretID SecretID

	err = runtime.BindStyledParameterWithOptions("simple", "secret_id", chi.URLParam(r, "secret_id"), &secretID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectEnvironmentSecret(w, r, projectID, environmentID, secretID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectEnvironmentSecret operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	// ------------- Path parameter "secret_id" -------------
	var secretID SecretID

	err = runtime.BindStyledParameterWithOptions("simple", "secret_id", chi.URLParam(r, "secret_id"), &secretID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectEnvironmentSecret(w, r, projectID, environmentID, secretID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectEnvironmentValue operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectEnvironmentValue(w, r, projectID, environmentID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectEnvironmentValue operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectEnvironmentValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	// ------------- Path parameter "value_id" -------------
	var valueID ValueID

	err = runtime.BindStyledParameterWithOptions("simple", "value_id", chi.URLParam(r, "value_id"), &valueID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectEnvironmentValue(w, r, projectID, environmentID, valueID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectEnvironmentValue operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentID EnvironmentID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", chi.URLParam(r, "environment_id"), &environmentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "environment_id", Err: err})
		return
	}

	// ------------- Path parameter "value_id" -------------
	var valueID ValueID

	err = runtime.BindStyledParameterWithOptions("simple", "value_id", chi.URLParam(r, "value_id"), &valueID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectEnvironmentValue(w, r, projectID, environmentID, valueID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectEvents operation middleware
func (siw *ServerInterfaceWrapper) ListProjectEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectEventsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectEvents(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectExecutions operation middleware
func (siw *ServerInterfaceWrapper) ListProjectExecutions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectExecutionsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectExecutions(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectExecution operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectExecution(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectExecution operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "execution_id" -------------
	var executionID ExecutionID

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", chi.URLParam(r, "execution_id"), &executionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectExecution(w, r, projectID, executionID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectExecution operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "execution_id" -------------
	var executionID ExecutionID

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", chi.URLParam(r, "execution_id"), &executionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectExecution(w, r, projectID, executionID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// OutputProjectExecution operation middleware
func (siw *ServerInterfaceWrapper) OutputProjectExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "execution_id" -------------
	var executionID ExecutionID

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", chi.URLParam(r, "execution_id"), &executionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OutputProjectExecution(w, r, projectID, executionID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PurgeProjectExecution operation middleware
func (siw *ServerInterfaceWrapper) PurgeProjectExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "execution_id" -------------
	var executionID ExecutionID

	err = runtime.BindStyledParameterWithOptions("simple", "execution_id", chi.URLParam(r, "execution_id"), &executionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "execution_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PurgeProjectExecution(w, r, projectID, executionID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectFromGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectFromGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectFromGroup(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectGroups operation middleware
func (siw *ServerInterfaceWrapper) ListProjectGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectGroupsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectGroups(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachProjectToGroup operation middleware
func (siw *ServerInterfaceWrapper) AttachProjectToGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachProjectToGroup(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitProjectGroup operation middleware
func (siw *ServerInterfaceWrapper) PermitProjectGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitProjectGroup(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectInventories operation middleware
func (siw *ServerInterfaceWrapper) ListProjectInventories(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectInventoriesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectInventories(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectInventory(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryID InventoryID

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectInventory(w, r, projectID, inventoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryID InventoryID

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectInventory(w, r, projectID, inventoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectInventory operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectInventory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "inventory_id" -------------
	var inventoryID InventoryID

	err = runtime.BindStyledParameterWithOptions("simple", "inventory_id", chi.URLParam(r, "inventory_id"), &inventoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventory_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectInventory(w, r, projectID, inventoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectRepositories operation middleware
func (siw *ServerInterfaceWrapper) ListProjectRepositories(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectRepositoriesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectRepositories(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectRepository(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryID RepositoryID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectRepository(w, r, projectID, repositoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryID RepositoryID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectRepository(w, r, projectID, repositoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryID RepositoryID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", chi.URLParam(r, "repository_id"), &repositoryID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repository_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectRepository(w, r, projectID, repositoryID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectRunners operation middleware
func (siw *ServerInterfaceWrapper) ListProjectRunners(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectRunnersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectRunners(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectRunner operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectRunner(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectRunner operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectRunner(w, r, projectID, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectRunner operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectRunner(w, r, projectID, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectRunner operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectRunner(w, r, projectID, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectSchedules operation middleware
func (siw *ServerInterfaceWrapper) ListProjectSchedules(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectSchedulesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectSchedules(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectSchedule(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleID ScheduleID

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectSchedule(w, r, projectID, scheduleID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleID ScheduleID

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectSchedule(w, r, projectID, scheduleID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectSchedule operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleID ScheduleID

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", chi.URLParam(r, "schedule_id"), &scheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schedule_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectSchedule(w, r, projectID, scheduleID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectTemplates operation middleware
func (siw *ServerInterfaceWrapper) ListProjectTemplates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectTemplatesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectTemplates(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectTemplate(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectTemplate(w, r, projectID, templateID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) ShowProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProjectTemplate(w, r, projectID, templateID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectTemplate operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectTemplate(w, r, projectID, templateID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectTemplateSurvey operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectTemplateSurvey(w, r, projectID, templateID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectTemplateSurvey operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectTemplateSurvey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "survey_id" -------------
	var surveyID SurveyID

	err = runtime.BindStyledParameterWithOptions("simple", "survey_id", chi.URLParam(r, "survey_id"), &surveyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "survey_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectTemplateSurvey(w, r, projectID, templateID, surveyID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectTemplateSurvey operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "survey_id" -------------
	var surveyID SurveyID

	err = runtime.BindStyledParameterWithOptions("simple", "survey_id", chi.URLParam(r, "survey_id"), &surveyID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "survey_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectTemplateSurvey(w, r, projectID, templateID, surveyID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProjectTemplateVault operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectTemplateVault(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProjectTemplateVault(w, r, projectID, templateID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectTemplateVault operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectTemplateVault(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "vault_id" -------------
	var vaultID VaultID

	err = runtime.BindStyledParameterWithOptions("simple", "vault_id", chi.URLParam(r, "vault_id"), &vaultID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vault_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectTemplateVault(w, r, projectID, templateID, vaultID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProjectTemplateVault operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectTemplateVault(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "template_id" -------------
	var templateID TemplateID

	err = runtime.BindStyledParameterWithOptions("simple", "template_id", chi.URLParam(r, "template_id"), &templateID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "template_id", Err: err})
		return
	}

	// ------------- Path parameter "vault_id" -------------
	var vaultID VaultID

	err = runtime.BindStyledParameterWithOptions("simple", "vault_id", chi.URLParam(r, "vault_id"), &vaultID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vault_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectTemplateVault(w, r, projectID, templateID, vaultID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProjectFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectFromUser(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProjectUsers operation middleware
func (siw *ServerInterfaceWrapper) ListProjectUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProjectUsers(w, r, projectID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachProjectToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachProjectToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachProjectToUser(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitProjectUser operation middleware
func (siw *ServerInterfaceWrapper) PermitProjectUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectID ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitProjectUser(w, r, projectID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGlobalRunners operation middleware
func (siw *ServerInterfaceWrapper) ListGlobalRunners(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGlobalRunnersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGlobalRunners(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateGlobalRunner operation middleware
func (siw *ServerInterfaceWrapper) CreateGlobalRunner(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGlobalRunner(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteGlobalRunner operation middleware
func (siw *ServerInterfaceWrapper) DeleteGlobalRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGlobalRunner(w, r, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowGlobalRunner operation middleware
func (siw *ServerInterfaceWrapper) ShowGlobalRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowGlobalRunner(w, r, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGlobalRunner operation middleware
func (siw *ServerInterfaceWrapper) UpdateGlobalRunner(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "runner_id" -------------
	var runnerID RunnerID

	err = runtime.BindStyledParameterWithOptions("simple", "runner_id", chi.URLParam(r, "runner_id"), &runnerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "runner_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGlobalRunner(w, r, runnerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowUser operation middleware
func (siw *ServerInterfaceWrapper) ShowUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowUser(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromGroup(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserGroups operation middleware
func (siw *ServerInterfaceWrapper) ListUserGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserGroupsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserGroups(w, r, userID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToGroup operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToGroup(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserGroup operation middleware
func (siw *ServerInterfaceWrapper) PermitUserGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserGroup(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromProject(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserProjects operation middleware
func (siw *ServerInterfaceWrapper) ListUserProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserProjectsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserProjects(w, r, userID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToProject operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToProject(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserProject operation middleware
func (siw *ServerInterfaceWrapper) PermitUserProject(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserProject(w, r, userID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/refresh", wrapper.RefreshAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/verify", wrapper.VerifyAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/callback", wrapper.CallbackProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/request", wrapper.RequestProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.ListGlobalEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups", wrapper.ListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/groups", wrapper.CreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/groups/{group_id}", wrapper.DeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{group_id}", wrapper.ShowGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/groups/{group_id}", wrapper.UpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/groups/{group_id}/projects", wrapper.DeleteGroupFromProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{group_id}/projects", wrapper.ListGroupProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/groups/{group_id}/projects", wrapper.AttachGroupToProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/groups/{group_id}/projects", wrapper.PermitGroupProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/groups/{group_id}/users", wrapper.DeleteGroupFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups/{group_id}/users", wrapper.ListGroupUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/groups/{group_id}/users", wrapper.AttachGroupToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/groups/{group_id}/users", wrapper.PermitGroupUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/self", wrapper.ShowProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/profile/self", wrapper.UpdateProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/token", wrapper.TokenProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.ListProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}", wrapper.DeleteProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}", wrapper.ShowProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}", wrapper.UpdateProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/credentials", wrapper.ListProjectCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/credentials", wrapper.CreateProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.DeleteProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.ShowProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/credentials/{credential_id}", wrapper.UpdateProjectCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/environments", wrapper.ListProjectEnvironments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/environments", wrapper.CreateProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.DeleteProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.ShowProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/environments/{environment_id}", wrapper.UpdateProjectEnvironment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/secrets", wrapper.CreateProjectEnvironmentSecret)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}", wrapper.DeleteProjectEnvironmentSecret)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}", wrapper.UpdateProjectEnvironmentSecret)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/values", wrapper.CreateProjectEnvironmentValue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/values/{value_id}", wrapper.DeleteProjectEnvironmentValue)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/environments/{environment_id}/values/{value_id}", wrapper.UpdateProjectEnvironmentValue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/events", wrapper.ListProjectEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/executions", wrapper.ListProjectExecutions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/executions", wrapper.CreateProjectExecution)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/executions/{execution_id}", wrapper.DeleteProjectExecution)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/executions/{execution_id}", wrapper.ShowProjectExecution)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/executions/{execution_id}/output", wrapper.OutputProjectExecution)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/executions/{execution_id}/purge", wrapper.PurgeProjectExecution)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/groups", wrapper.DeleteProjectFromGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/groups", wrapper.ListProjectGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/groups", wrapper.AttachProjectToGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/groups", wrapper.PermitProjectGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/inventories", wrapper.ListProjectInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/inventories", wrapper.CreateProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.DeleteProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.ShowProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/inventories/{inventory_id}", wrapper.UpdateProjectInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/repositories", wrapper.ListProjectRepositories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/repositories", wrapper.CreateProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.DeleteProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.ShowProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/repositories/{repository_id}", wrapper.UpdateProjectRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/runners", wrapper.ListProjectRunners)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/runners", wrapper.CreateProjectRunner)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/runners/{runner_id}", wrapper.DeleteProjectRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/runners/{runner_id}", wrapper.ShowProjectRunner)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/runners/{runner_id}", wrapper.UpdateProjectRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/schedules", wrapper.ListProjectSchedules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/schedules", wrapper.CreateProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.DeleteProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.ShowProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/schedules/{schedule_id}", wrapper.UpdateProjectSchedule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/templates", wrapper.ListProjectTemplates)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/templates", wrapper.CreateProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.DeleteProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.ShowProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/templates/{template_id}", wrapper.UpdateProjectTemplate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/templates/{template_id}/surveys", wrapper.CreateProjectTemplateSurvey)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/templates/{template_id}/surveys/{survey_id}", wrapper.DeleteProjectTemplateSurvey)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/templates/{template_id}/surveys/{survey_id}", wrapper.UpdateProjectTemplateSurvey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/templates/{template_id}/vaults", wrapper.CreateProjectTemplateVault)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/templates/{template_id}/vaults/{vault_id}", wrapper.DeleteProjectTemplateVault)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/templates/{template_id}/vaults/{vault_id}", wrapper.UpdateProjectTemplateVault)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/users", wrapper.DeleteProjectFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/users", wrapper.ListProjectUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/users", wrapper.AttachProjectToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/users", wrapper.PermitProjectUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runners", wrapper.ListGlobalRunners)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/runners", wrapper.CreateGlobalRunner)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/runners/{runner_id}", wrapper.DeleteGlobalRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runners/{runner_id}", wrapper.ShowGlobalRunner)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/runners/{runner_id}", wrapper.UpdateGlobalRunner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}", wrapper.ShowUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/groups", wrapper.DeleteUserFromGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/groups", wrapper.ListUserGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/groups", wrapper.AttachUserToGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/groups", wrapper.PermitUserGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/projects", wrapper.DeleteUserFromProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/projects", wrapper.ListUserProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/projects", wrapper.AttachUserToProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/projects", wrapper.PermitUserProject)
	})

	return r
}

type ActionFailedErrorJSONResponse Notification

type AlreadyAttachedErrorJSONResponse Notification

type BadCredentialsErrorJSONResponse Notification

type GlobalEventsResponseJSONResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

type GlobalRunnerResponseJSONResponse Runner

type GlobalRunnersResponseJSONResponse struct {
	Limit   int64    `json:"limit"`
	Offset  int64    `json:"offset"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

type GroupProjectsResponseJSONResponse struct {
	// Group Model to represent group
	Group    *Group         `json:"group,omitempty"`
	Limit    int64          `json:"limit"`
	Offset   int64          `json:"offset"`
	Projects []GroupProject `json:"projects"`
	Total    int64          `json:"total"`
}

type GroupResponseJSONResponse Group

type GroupUsersResponseJSONResponse struct {
	// Group Model to represent group
	Group  *Group      `json:"group,omitempty"`
	Limit  int64       `json:"limit"`
	Offset int64       `json:"offset"`
	Total  int64       `json:"total"`
	Users  []UserGroup `json:"users"`
}

type GroupsResponseJSONResponse struct {
	Groups []Group `json:"groups"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`
	Total  int64   `json:"total"`
}

type InternalServerErrorJSONResponse Notification

type InvalidTokenErrorJSONResponse Notification

type LoginResponseJSONResponse AuthToken

type NotAttachedErrorJSONResponse Notification

type NotAuthorizedErrorJSONResponse Notification

type NotFoundErrorJSONResponse Notification

type ProfileResponseJSONResponse Profile

type ProjectCredentialResponseJSONResponse Credential

type ProjectCredentialsResponseJSONResponse struct {
	Credentials []Credential `json:"credentials"`
	Limit       int64        `json:"limit"`
	Offset      int64        `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectEnvironmentResponseJSONResponse Environment

type ProjectEnvironmentSecretResponseJSONResponse EnvironmentSecret

type ProjectEnvironmentValueResponseJSONResponse EnvironmentValue

type ProjectEnvironmentsResponseJSONResponse struct {
	Environments []Environment `json:"environments"`
	Limit        int64         `json:"limit"`
	Offset       int64         `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectEventsResponseJSONResponse struct {
	Events []Event `json:"events"`
	Limit  int64   `json:"limit"`
	Offset int64   `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectExecutionResponseJSONResponse Execution

type ProjectExecutionsResponseJSONResponse struct {
	Executions []Execution `json:"executions"`
	Limit      int64       `json:"limit"`
	Offset     int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectGroupsResponseJSONResponse struct {
	Groups []GroupProject `json:"groups"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectInventoriesResponseJSONResponse struct {
	Inventories []Inventory `json:"inventories"`
	Limit       int64       `json:"limit"`
	Offset      int64       `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Total   int64    `json:"total"`
}

type ProjectInventoryResponseJSONResponse Inventory

type ProjectOutputResponseJSONResponse []Output

type ProjectRepositoriesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project      *Project     `json:"project,omitempty"`
	Repositories []Repository `json:"repositories"`
	Total        int64        `json:"total"`
}

type ProjectRepositoryResponseJSONResponse Repository

type ProjectResponseJSONResponse Project

type ProjectRunnerResponseJSONResponse Runner

type ProjectRunnersResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project `json:"project,omitempty"`
	Runners []Runner `json:"runners"`
	Total   int64    `json:"total"`
}

type ProjectScheduleResponseJSONResponse Schedule

type ProjectSchedulesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Schedules []Schedule `json:"schedules"`
	Total     int64      `json:"total"`
}

type ProjectTemplateResponseJSONResponse Template

type ProjectTemplateSurveyResponseJSONResponse TemplateSurvey

type ProjectTemplateVaultResponseJSONResponse TemplateVault

type ProjectTemplatesResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project   *Project   `json:"project,omitempty"`
	Templates []Template `json:"templates"`
	Total     int64      `json:"total"`
}

type ProjectUsersResponseJSONResponse struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`

	// Project Model to represent project
	Project *Project      `json:"project,omitempty"`
	Total   int64         `json:"total"`
	Users   []UserProject `json:"users"`
}

type ProjectsResponseJSONResponse struct {
	Limit    int64     `json:"limit"`
	Offset   int64     `json:"offset"`
	Projects []Project `json:"projects"`
	Total    int64     `json:"total"`
}

type ProvidersResponseJSONResponse struct {
	Providers []Provider `json:"providers"`
	Total     int64      `json:"total"`
}

type RefreshResponseJSONResponse AuthToken

type SuccessMessageJSONResponse Notification

type TokenResponseJSONResponse AuthToken

type UserGroupsResponseJSONResponse struct {
	Groups []UserGroup `json:"groups"`
	Limit  int64       `json:"limit"`
	Offset int64       `json:"offset"`
	Total  int64       `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

type UserProjectsResponseJSONResponse struct {
	Limit    int64         `json:"limit"`
	Offset   int64         `json:"offset"`
	Projects []UserProject `json:"projects"`
	Total    int64         `json:"total"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

type UserResponseJSONResponse User

type UsersResponseJSONResponse struct {
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
	Total  int64  `json:"total"`
	Users  []User `json:"users"`
}

type ValidationErrorJSONResponse Notification

type VerifyResponseJSONResponse AuthVerify

type LoginAuthRequestObject struct {
	Body *LoginAuthJSONRequestBody
}

type LoginAuthResponseObject interface {
	VisitLoginAuthResponse(w http.ResponseWriter) error
}

type LoginAuth200JSONResponse struct{ LoginResponseJSONResponse }

func (response LoginAuth200JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth401JSONResponse struct {
	BadCredentialsErrorJSONResponse
}

func (response LoginAuth401JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response LoginAuth500JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProvidersRequestObject struct {
}

type ListProvidersResponseObject interface {
	VisitListProvidersResponse(w http.ResponseWriter) error
}

type ListProviders200JSONResponse struct{ ProvidersResponseJSONResponse }

func (response ListProviders200JSONResponse) VisitListProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuthRequestObject struct {
}

type RefreshAuthResponseObject interface {
	VisitRefreshAuthResponse(w http.ResponseWriter) error
}

type RefreshAuth200JSONResponse struct{ RefreshResponseJSONResponse }

func (response RefreshAuth200JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth401JSONResponse struct{ InvalidTokenErrorJSONResponse }

func (response RefreshAuth401JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response RefreshAuth500JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuthRequestObject struct {
}

type VerifyAuthResponseObject interface {
	VisitVerifyAuthResponse(w http.ResponseWriter) error
}

type VerifyAuth200JSONResponse struct{ VerifyResponseJSONResponse }

func (response VerifyAuth200JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth401JSONResponse struct{ InvalidTokenErrorJSONResponse }

func (response VerifyAuth401JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response VerifyAuth500JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CallbackProviderRequestObject struct {
	Provider AuthProviderParam `json:"provider"`
	Params   CallbackProviderParams
}

type CallbackProviderResponseObject interface {
	VisitCallbackProviderResponse(w http.ResponseWriter) error
}

type CallbackProvider308TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CallbackProvider308TexthtmlResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(308)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CallbackProvider404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CallbackProvider404TexthtmlResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CallbackProvider412TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CallbackProvider412TexthtmlResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(412)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CallbackProvider500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CallbackProvider500TexthtmlResponse) VisitCallbackProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type RequestProviderRequestObject struct {
	Provider AuthProviderParam `json:"provider"`
}

type RequestProviderResponseObject interface {
	VisitRequestProviderResponse(w http.ResponseWriter) error
}

type RequestProvider308TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response RequestProvider308TexthtmlResponse) VisitRequestProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(308)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type RequestProvider404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response RequestProvider404TexthtmlResponse) VisitRequestProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type RequestProvider500TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response RequestProvider500TexthtmlResponse) VisitRequestProviderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(500)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ListGlobalEventsRequestObject struct {
	Params ListGlobalEventsParams
}

type ListGlobalEventsResponseObject interface {
	VisitListGlobalEventsResponse(w http.ResponseWriter) error
}

type ListGlobalEvents200JSONResponse struct {
	GlobalEventsResponseJSONResponse
}

func (response ListGlobalEvents200JSONResponse) VisitListGlobalEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGlobalEvents403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListGlobalEvents403JSONResponse) VisitListGlobalEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGlobalEvents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListGlobalEvents500JSONResponse) VisitListGlobalEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupsRequestObject struct {
	Params ListGroupsParams
}

type ListGroupsResponseObject interface {
	VisitListGroupsResponse(w http.ResponseWriter) error
}

type ListGroups200JSONResponse struct{ GroupsResponseJSONResponse }

func (response ListGroups200JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGroups403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListGroups403JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGroups500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListGroups500JSONResponse) VisitListGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroupRequestObject struct {
	Body *CreateGroupJSONRequestBody
}

type CreateGroupResponseObject interface {
	VisitCreateGroupResponse(w http.ResponseWriter) error
}

type CreateGroup200JSONResponse struct{ GroupResponseJSONResponse }

func (response CreateGroup200JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateGroup403JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateGroup422JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateGroup500JSONResponse) VisitCreateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupRequestObject struct {
	GroupID GroupID `json:"group_id"`
}

type DeleteGroupResponseObject interface {
	VisitDeleteGroupResponse(w http.ResponseWriter) error
}

type DeleteGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteGroup200JSONResponse) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroup400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteGroup400JSONResponse) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteGroup403JSONResponse) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteGroup404JSONResponse) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteGroup500JSONResponse) VisitDeleteGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowGroupRequestObject struct {
	GroupID GroupID `json:"group_id"`
}

type ShowGroupResponseObject interface {
	VisitShowGroupResponse(w http.ResponseWriter) error
}

type ShowGroup200JSONResponse struct{ GroupResponseJSONResponse }

func (response ShowGroup200JSONResponse) VisitShowGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowGroup403JSONResponse) VisitShowGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowGroup404JSONResponse) VisitShowGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowGroup500JSONResponse) VisitShowGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroupRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *UpdateGroupJSONRequestBody
}

type UpdateGroupResponseObject interface {
	VisitUpdateGroupResponse(w http.ResponseWriter) error
}

type UpdateGroup200JSONResponse struct{ GroupResponseJSONResponse }

func (response UpdateGroup200JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateGroup403JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateGroup404JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateGroup422JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateGroup500JSONResponse) VisitUpdateGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromProjectRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *DeleteGroupFromProjectJSONRequestBody
}

type DeleteGroupFromProjectResponseObject interface {
	VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error
}

type DeleteGroupFromProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteGroupFromProject200JSONResponse) VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteGroupFromProject403JSONResponse) VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteGroupFromProject404JSONResponse) VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteGroupFromProject412JSONResponse) VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteGroupFromProject500JSONResponse) VisitDeleteGroupFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupProjectsRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Params  ListGroupProjectsParams
}

type ListGroupProjectsResponseObject interface {
	VisitListGroupProjectsResponse(w http.ResponseWriter) error
}

type ListGroupProjects200JSONResponse struct {
	GroupProjectsResponseJSONResponse
}

func (response ListGroupProjects200JSONResponse) VisitListGroupProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListGroupProjects403JSONResponse) VisitListGroupProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupProjects404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListGroupProjects404JSONResponse) VisitListGroupProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListGroupProjects500JSONResponse) VisitListGroupProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProjectRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *AttachGroupToProjectJSONRequestBody
}

type AttachGroupToProjectResponseObject interface {
	VisitAttachGroupToProjectResponse(w http.ResponseWriter) error
}

type AttachGroupToProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachGroupToProject200JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachGroupToProject403JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachGroupToProject404JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProject412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachGroupToProject412JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachGroupToProject422JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachGroupToProject500JSONResponse) VisitAttachGroupToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProjectRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *PermitGroupProjectJSONRequestBody
}

type PermitGroupProjectResponseObject interface {
	VisitPermitGroupProjectResponse(w http.ResponseWriter) error
}

type PermitGroupProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitGroupProject200JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitGroupProject403JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitGroupProject404JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitGroupProject412JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitGroupProject422JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitGroupProject500JSONResponse) VisitPermitGroupProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromUserRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *DeleteGroupFromUserJSONRequestBody
}

type DeleteGroupFromUserResponseObject interface {
	VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error
}

type DeleteGroupFromUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteGroupFromUser200JSONResponse) VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteGroupFromUser403JSONResponse) VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteGroupFromUser404JSONResponse) VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteGroupFromUser412JSONResponse) VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGroupFromUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteGroupFromUser500JSONResponse) VisitDeleteGroupFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupUsersRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Params  ListGroupUsersParams
}

type ListGroupUsersResponseObject interface {
	VisitListGroupUsersResponse(w http.ResponseWriter) error
}

type ListGroupUsers200JSONResponse struct{ GroupUsersResponseJSONResponse }

func (response ListGroupUsers200JSONResponse) VisitListGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListGroupUsers403JSONResponse) VisitListGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupUsers404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListGroupUsers404JSONResponse) VisitListGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListGroupUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListGroupUsers500JSONResponse) VisitListGroupUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUserRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *AttachGroupToUserJSONRequestBody
}

type AttachGroupToUserResponseObject interface {
	VisitAttachGroupToUserResponse(w http.ResponseWriter) error
}

type AttachGroupToUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachGroupToUser200JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachGroupToUser403JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachGroupToUser404JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUser412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachGroupToUser412JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachGroupToUser422JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachGroupToUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachGroupToUser500JSONResponse) VisitAttachGroupToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUserRequestObject struct {
	GroupID GroupID `json:"group_id"`
	Body    *PermitGroupUserJSONRequestBody
}

type PermitGroupUserResponseObject interface {
	VisitPermitGroupUserResponse(w http.ResponseWriter) error
}

type PermitGroupUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitGroupUser200JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitGroupUser403JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitGroupUser404JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitGroupUser412JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitGroupUser422JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitGroupUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitGroupUser500JSONResponse) VisitPermitGroupUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfileRequestObject struct {
}

type ShowProfileResponseObject interface {
	VisitShowProfileResponse(w http.ResponseWriter) error
}

type ShowProfile200JSONResponse struct{ ProfileResponseJSONResponse }

func (response ShowProfile200JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProfile403JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProfile500JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfileRequestObject struct {
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile200JSONResponse struct{ ProfileResponseJSONResponse }

func (response UpdateProfile200JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProfile403JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProfile422JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProfile500JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfileRequestObject struct {
}

type TokenProfileResponseObject interface {
	VisitTokenProfileResponse(w http.ResponseWriter) error
}

type TokenProfile200JSONResponse struct{ TokenResponseJSONResponse }

func (response TokenProfile200JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response TokenProfile403JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response TokenProfile500JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectsRequestObject struct {
	Params ListProjectsParams
}

type ListProjectsResponseObject interface {
	VisitListProjectsResponse(w http.ResponseWriter) error
}

type ListProjects200JSONResponse struct{ ProjectsResponseJSONResponse }

func (response ListProjects200JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjects403JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjects500JSONResponse) VisitListProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRequestObject struct {
	Body *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(w http.ResponseWriter) error
}

type CreateProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response CreateProject200JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProject403JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProject422JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProject500JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProject200JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProject400JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProject403JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
}

type ShowProjectResponseObject interface {
	VisitShowProjectResponse(w http.ResponseWriter) error
}

type ShowProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response ShowProject200JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProject403JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProject404JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProject500JSONResponse) VisitShowProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *UpdateProjectJSONRequestBody
}

type UpdateProjectResponseObject interface {
	VisitUpdateProjectResponse(w http.ResponseWriter) error
}

type UpdateProject200JSONResponse struct{ ProjectResponseJSONResponse }

func (response UpdateProject200JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProject403JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProject404JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProject422JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProject500JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentialsRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectCredentialsParams
}

type ListProjectCredentialsResponseObject interface {
	VisitListProjectCredentialsResponse(w http.ResponseWriter) error
}

type ListProjectCredentials200JSONResponse struct {
	ProjectCredentialsResponseJSONResponse
}

func (response ListProjectCredentials200JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectCredentials403JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectCredentials404JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectCredentials500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectCredentials500JSONResponse) VisitListProjectCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredentialRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectCredentialJSONRequestBody
}

type CreateProjectCredentialResponseObject interface {
	VisitCreateProjectCredentialResponse(w http.ResponseWriter) error
}

type CreateProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response CreateProjectCredential200JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectCredential403JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectCredential404JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectCredential422JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectCredential500JSONResponse) VisitCreateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredentialRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	CredentialID CredentialID `json:"credential_id"`
}

type DeleteProjectCredentialResponseObject interface {
	VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error
}

type DeleteProjectCredential200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectCredential200JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectCredential400JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectCredential403JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectCredential404JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectCredential500JSONResponse) VisitDeleteProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredentialRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	CredentialID CredentialID `json:"credential_id"`
}

type ShowProjectCredentialResponseObject interface {
	VisitShowProjectCredentialResponse(w http.ResponseWriter) error
}

type ShowProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response ShowProjectCredential200JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectCredential403JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectCredential404JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectCredential500JSONResponse) VisitShowProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredentialRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	CredentialID CredentialID `json:"credential_id"`
	Body         *UpdateProjectCredentialJSONRequestBody
}

type UpdateProjectCredentialResponseObject interface {
	VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error
}

type UpdateProjectCredential200JSONResponse struct {
	ProjectCredentialResponseJSONResponse
}

func (response UpdateProjectCredential200JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectCredential403JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectCredential404JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectCredential422JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectCredential500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectCredential500JSONResponse) VisitUpdateProjectCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironmentsRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectEnvironmentsParams
}

type ListProjectEnvironmentsResponseObject interface {
	VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error
}

type ListProjectEnvironments200JSONResponse struct {
	ProjectEnvironmentsResponseJSONResponse
}

func (response ListProjectEnvironments200JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectEnvironments403JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectEnvironments404JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEnvironments500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectEnvironments500JSONResponse) VisitListProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectEnvironmentJSONRequestBody
}

type CreateProjectEnvironmentResponseObject interface {
	VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error
}

type CreateProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentResponseJSONResponse
}

func (response CreateProjectEnvironment200JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectEnvironment403JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectEnvironment404JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectEnvironment422JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectEnvironment500JSONResponse) VisitCreateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
}

type DeleteProjectEnvironmentResponseObject interface {
	VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error
}

type DeleteProjectEnvironment200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectEnvironment200JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectEnvironment400JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectEnvironment403JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectEnvironment404JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectEnvironment500JSONResponse) VisitDeleteProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironmentRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
}

type ShowProjectEnvironmentResponseObject interface {
	VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error
}

type ShowProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentResponseJSONResponse
}

func (response ShowProjectEnvironment200JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectEnvironment403JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectEnvironment404JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectEnvironment500JSONResponse) VisitShowProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	Body          *UpdateProjectEnvironmentJSONRequestBody
}

type UpdateProjectEnvironmentResponseObject interface {
	VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error
}

type UpdateProjectEnvironment200JSONResponse struct {
	ProjectEnvironmentResponseJSONResponse
}

func (response UpdateProjectEnvironment200JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectEnvironment403JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectEnvironment404JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectEnvironment422JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectEnvironment500JSONResponse) VisitUpdateProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentSecretRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	Body          *CreateProjectEnvironmentSecretJSONRequestBody
}

type CreateProjectEnvironmentSecretResponseObject interface {
	VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error
}

type CreateProjectEnvironmentSecret200JSONResponse struct {
	ProjectEnvironmentSecretResponseJSONResponse
}

func (response CreateProjectEnvironmentSecret200JSONResponse) VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentSecret403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectEnvironmentSecret403JSONResponse) VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentSecret404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectEnvironmentSecret404JSONResponse) VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentSecret422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectEnvironmentSecret422JSONResponse) VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentSecret500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectEnvironmentSecret500JSONResponse) VisitCreateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentSecretRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	SecretID      SecretID      `json:"secret_id"`
}

type DeleteProjectEnvironmentSecretResponseObject interface {
	VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error
}

type DeleteProjectEnvironmentSecret200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectEnvironmentSecret200JSONResponse) VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentSecret400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectEnvironmentSecret400JSONResponse) VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentSecret403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectEnvironmentSecret403JSONResponse) VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentSecret404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectEnvironmentSecret404JSONResponse) VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentSecret500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectEnvironmentSecret500JSONResponse) VisitDeleteProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentSecretRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	SecretID      SecretID      `json:"secret_id"`
	Body          *UpdateProjectEnvironmentSecretJSONRequestBody
}

type UpdateProjectEnvironmentSecretResponseObject interface {
	VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error
}

type UpdateProjectEnvironmentSecret200JSONResponse struct {
	ProjectEnvironmentSecretResponseJSONResponse
}

func (response UpdateProjectEnvironmentSecret200JSONResponse) VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentSecret403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectEnvironmentSecret403JSONResponse) VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentSecret404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectEnvironmentSecret404JSONResponse) VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentSecret422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectEnvironmentSecret422JSONResponse) VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentSecret500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectEnvironmentSecret500JSONResponse) VisitUpdateProjectEnvironmentSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentValueRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	Body          *CreateProjectEnvironmentValueJSONRequestBody
}

type CreateProjectEnvironmentValueResponseObject interface {
	VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error
}

type CreateProjectEnvironmentValue200JSONResponse struct {
	ProjectEnvironmentValueResponseJSONResponse
}

func (response CreateProjectEnvironmentValue200JSONResponse) VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentValue403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectEnvironmentValue403JSONResponse) VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentValue404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectEnvironmentValue404JSONResponse) VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentValue422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectEnvironmentValue422JSONResponse) VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectEnvironmentValue500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectEnvironmentValue500JSONResponse) VisitCreateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentValueRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	ValueID       ValueID       `json:"value_id"`
}

type DeleteProjectEnvironmentValueResponseObject interface {
	VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error
}

type DeleteProjectEnvironmentValue200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectEnvironmentValue200JSONResponse) VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentValue400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectEnvironmentValue400JSONResponse) VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentValue403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectEnvironmentValue403JSONResponse) VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentValue404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectEnvironmentValue404JSONResponse) VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectEnvironmentValue500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectEnvironmentValue500JSONResponse) VisitDeleteProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentValueRequestObject struct {
	ProjectID     ProjectID     `json:"project_id"`
	EnvironmentID EnvironmentID `json:"environment_id"`
	ValueID       ValueID       `json:"value_id"`
	Body          *UpdateProjectEnvironmentValueJSONRequestBody
}

type UpdateProjectEnvironmentValueResponseObject interface {
	VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error
}

type UpdateProjectEnvironmentValue200JSONResponse struct {
	ProjectEnvironmentValueResponseJSONResponse
}

func (response UpdateProjectEnvironmentValue200JSONResponse) VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentValue403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectEnvironmentValue403JSONResponse) VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentValue404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectEnvironmentValue404JSONResponse) VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentValue422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectEnvironmentValue422JSONResponse) VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectEnvironmentValue500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectEnvironmentValue500JSONResponse) VisitUpdateProjectEnvironmentValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEventsRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectEventsParams
}

type ListProjectEventsResponseObject interface {
	VisitListProjectEventsResponse(w http.ResponseWriter) error
}

type ListProjectEvents200JSONResponse struct {
	ProjectEventsResponseJSONResponse
}

func (response ListProjectEvents200JSONResponse) VisitListProjectEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEvents403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectEvents403JSONResponse) VisitListProjectEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEvents404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectEvents404JSONResponse) VisitListProjectEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectEvents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectEvents500JSONResponse) VisitListProjectEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectExecutionsRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectExecutionsParams
}

type ListProjectExecutionsResponseObject interface {
	VisitListProjectExecutionsResponse(w http.ResponseWriter) error
}

type ListProjectExecutions200JSONResponse struct {
	ProjectExecutionsResponseJSONResponse
}

func (response ListProjectExecutions200JSONResponse) VisitListProjectExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectExecutions403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectExecutions403JSONResponse) VisitListProjectExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectExecutions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectExecutions404JSONResponse) VisitListProjectExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectExecutions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectExecutions500JSONResponse) VisitListProjectExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectExecutionRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectExecutionJSONRequestBody
}

type CreateProjectExecutionResponseObject interface {
	VisitCreateProjectExecutionResponse(w http.ResponseWriter) error
}

type CreateProjectExecution200JSONResponse struct {
	ProjectExecutionResponseJSONResponse
}

func (response CreateProjectExecution200JSONResponse) VisitCreateProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectExecution403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectExecution403JSONResponse) VisitCreateProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectExecution404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectExecution404JSONResponse) VisitCreateProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectExecution422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectExecution422JSONResponse) VisitCreateProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectExecution500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectExecution500JSONResponse) VisitCreateProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectExecutionRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	ExecutionID ExecutionID `json:"execution_id"`
}

type DeleteProjectExecutionResponseObject interface {
	VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error
}

type DeleteProjectExecution200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectExecution200JSONResponse) VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectExecution400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectExecution400JSONResponse) VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectExecution403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectExecution403JSONResponse) VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectExecution404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectExecution404JSONResponse) VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectExecution500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectExecution500JSONResponse) VisitDeleteProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectExecutionRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	ExecutionID ExecutionID `json:"execution_id"`
}

type ShowProjectExecutionResponseObject interface {
	VisitShowProjectExecutionResponse(w http.ResponseWriter) error
}

type ShowProjectExecution200JSONResponse struct {
	ProjectExecutionResponseJSONResponse
}

func (response ShowProjectExecution200JSONResponse) VisitShowProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectExecution403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectExecution403JSONResponse) VisitShowProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectExecution404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectExecution404JSONResponse) VisitShowProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectExecution500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectExecution500JSONResponse) VisitShowProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectExecutionRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	ExecutionID ExecutionID `json:"execution_id"`
}

type OutputProjectExecutionResponseObject interface {
	VisitOutputProjectExecutionResponse(w http.ResponseWriter) error
}

type OutputProjectExecution200JSONResponse struct {
	ProjectOutputResponseJSONResponse
}

func (response OutputProjectExecution200JSONResponse) VisitOutputProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectExecution403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response OutputProjectExecution403JSONResponse) VisitOutputProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectExecution404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response OutputProjectExecution404JSONResponse) VisitOutputProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OutputProjectExecution500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response OutputProjectExecution500JSONResponse) VisitOutputProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PurgeProjectExecutionRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	ExecutionID ExecutionID `json:"execution_id"`
}

type PurgeProjectExecutionResponseObject interface {
	VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error
}

type PurgeProjectExecution200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PurgeProjectExecution200JSONResponse) VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PurgeProjectExecution400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response PurgeProjectExecution400JSONResponse) VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PurgeProjectExecution403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PurgeProjectExecution403JSONResponse) VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PurgeProjectExecution404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PurgeProjectExecution404JSONResponse) VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PurgeProjectExecution500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PurgeProjectExecution500JSONResponse) VisitPurgeProjectExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromGroupRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *DeleteProjectFromGroupJSONRequestBody
}

type DeleteProjectFromGroupResponseObject interface {
	VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error
}

type DeleteProjectFromGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectFromGroup200JSONResponse) VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectFromGroup403JSONResponse) VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectFromGroup404JSONResponse) VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromGroup412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteProjectFromGroup412JSONResponse) VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectFromGroup500JSONResponse) VisitDeleteProjectFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectGroupsRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectGroupsParams
}

type ListProjectGroupsResponseObject interface {
	VisitListProjectGroupsResponse(w http.ResponseWriter) error
}

type ListProjectGroups200JSONResponse struct {
	ProjectGroupsResponseJSONResponse
}

func (response ListProjectGroups200JSONResponse) VisitListProjectGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectGroups403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectGroups403JSONResponse) VisitListProjectGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectGroups404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectGroups404JSONResponse) VisitListProjectGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectGroups500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectGroups500JSONResponse) VisitListProjectGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroupRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *AttachProjectToGroupJSONRequestBody
}

type AttachProjectToGroupResponseObject interface {
	VisitAttachProjectToGroupResponse(w http.ResponseWriter) error
}

type AttachProjectToGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachProjectToGroup200JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachProjectToGroup403JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachProjectToGroup404JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroup412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachProjectToGroup412JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachProjectToGroup422JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachProjectToGroup500JSONResponse) VisitAttachProjectToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroupRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *PermitProjectGroupJSONRequestBody
}

type PermitProjectGroupResponseObject interface {
	VisitPermitProjectGroupResponse(w http.ResponseWriter) error
}

type PermitProjectGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitProjectGroup200JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitProjectGroup403JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitProjectGroup404JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroup412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitProjectGroup412JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitProjectGroup422JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitProjectGroup500JSONResponse) VisitPermitProjectGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventoriesRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectInventoriesParams
}

type ListProjectInventoriesResponseObject interface {
	VisitListProjectInventoriesResponse(w http.ResponseWriter) error
}

type ListProjectInventories200JSONResponse struct {
	ProjectInventoriesResponseJSONResponse
}

func (response ListProjectInventories200JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectInventories403JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectInventories404JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectInventories500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectInventories500JSONResponse) VisitListProjectInventoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventoryRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectInventoryJSONRequestBody
}

type CreateProjectInventoryResponseObject interface {
	VisitCreateProjectInventoryResponse(w http.ResponseWriter) error
}

type CreateProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response CreateProjectInventory200JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectInventory403JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectInventory404JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectInventory422JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectInventory500JSONResponse) VisitCreateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventoryRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	InventoryID InventoryID `json:"inventory_id"`
}

type DeleteProjectInventoryResponseObject interface {
	VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error
}

type DeleteProjectInventory200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectInventory200JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectInventory400JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectInventory403JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectInventory404JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectInventory500JSONResponse) VisitDeleteProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventoryRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	InventoryID InventoryID `json:"inventory_id"`
}

type ShowProjectInventoryResponseObject interface {
	VisitShowProjectInventoryResponse(w http.ResponseWriter) error
}

type ShowProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response ShowProjectInventory200JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectInventory403JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectInventory404JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectInventory500JSONResponse) VisitShowProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventoryRequestObject struct {
	ProjectID   ProjectID   `json:"project_id"`
	InventoryID InventoryID `json:"inventory_id"`
	Body        *UpdateProjectInventoryJSONRequestBody
}

type UpdateProjectInventoryResponseObject interface {
	VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error
}

type UpdateProjectInventory200JSONResponse struct {
	ProjectInventoryResponseJSONResponse
}

func (response UpdateProjectInventory200JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectInventory403JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectInventory404JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectInventory422JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectInventory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectInventory500JSONResponse) VisitUpdateProjectInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositoriesRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectRepositoriesParams
}

type ListProjectRepositoriesResponseObject interface {
	VisitListProjectRepositoriesResponse(w http.ResponseWriter) error
}

type ListProjectRepositories200JSONResponse struct {
	ProjectRepositoriesResponseJSONResponse
}

func (response ListProjectRepositories200JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectRepositories403JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectRepositories404JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRepositories500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectRepositories500JSONResponse) VisitListProjectRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepositoryRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectRepositoryJSONRequestBody
}

type CreateProjectRepositoryResponseObject interface {
	VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error
}

type CreateProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response CreateProjectRepository200JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectRepository403JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectRepository404JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectRepository422JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectRepository500JSONResponse) VisitCreateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepositoryRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	RepositoryID RepositoryID `json:"repository_id"`
}

type DeleteProjectRepositoryResponseObject interface {
	VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error
}

type DeleteProjectRepository200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectRepository200JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectRepository400JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectRepository403JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectRepository404JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectRepository500JSONResponse) VisitDeleteProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepositoryRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	RepositoryID RepositoryID `json:"repository_id"`
}

type ShowProjectRepositoryResponseObject interface {
	VisitShowProjectRepositoryResponse(w http.ResponseWriter) error
}

type ShowProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response ShowProjectRepository200JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectRepository403JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectRepository404JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectRepository500JSONResponse) VisitShowProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepositoryRequestObject struct {
	ProjectID    ProjectID    `json:"project_id"`
	RepositoryID RepositoryID `json:"repository_id"`
	Body         *UpdateProjectRepositoryJSONRequestBody
}

type UpdateProjectRepositoryResponseObject interface {
	VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error
}

type UpdateProjectRepository200JSONResponse struct {
	ProjectRepositoryResponseJSONResponse
}

func (response UpdateProjectRepository200JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectRepository403JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectRepository404JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectRepository422JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRepository500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectRepository500JSONResponse) VisitUpdateProjectRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRunnersRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectRunnersParams
}

type ListProjectRunnersResponseObject interface {
	VisitListProjectRunnersResponse(w http.ResponseWriter) error
}

type ListProjectRunners200JSONResponse struct {
	ProjectRunnersResponseJSONResponse
}

func (response ListProjectRunners200JSONResponse) VisitListProjectRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRunners403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectRunners403JSONResponse) VisitListProjectRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRunners404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectRunners404JSONResponse) VisitListProjectRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectRunners500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectRunners500JSONResponse) VisitListProjectRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRunnerRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectRunnerJSONRequestBody
}

type CreateProjectRunnerResponseObject interface {
	VisitCreateProjectRunnerResponse(w http.ResponseWriter) error
}

type CreateProjectRunner200JSONResponse struct {
	ProjectRunnerResponseJSONResponse
}

func (response CreateProjectRunner200JSONResponse) VisitCreateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectRunner403JSONResponse) VisitCreateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectRunner404JSONResponse) VisitCreateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectRunner422JSONResponse) VisitCreateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectRunner500JSONResponse) VisitCreateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRunnerRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	RunnerID  RunnerID  `json:"runner_id"`
}

type DeleteProjectRunnerResponseObject interface {
	VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error
}

type DeleteProjectRunner200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectRunner200JSONResponse) VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRunner400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectRunner400JSONResponse) VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectRunner403JSONResponse) VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectRunner404JSONResponse) VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectRunner500JSONResponse) VisitDeleteProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRunnerRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	RunnerID  RunnerID  `json:"runner_id"`
}

type ShowProjectRunnerResponseObject interface {
	VisitShowProjectRunnerResponse(w http.ResponseWriter) error
}

type ShowProjectRunner200JSONResponse struct {
	ProjectRunnerResponseJSONResponse
}

func (response ShowProjectRunner200JSONResponse) VisitShowProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectRunner403JSONResponse) VisitShowProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectRunner404JSONResponse) VisitShowProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectRunner500JSONResponse) VisitShowProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRunnerRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	RunnerID  RunnerID  `json:"runner_id"`
	Body      *UpdateProjectRunnerJSONRequestBody
}

type UpdateProjectRunnerResponseObject interface {
	VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error
}

type UpdateProjectRunner200JSONResponse struct {
	ProjectRunnerResponseJSONResponse
}

func (response UpdateProjectRunner200JSONResponse) VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectRunner403JSONResponse) VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectRunner404JSONResponse) VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectRunner422JSONResponse) VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectRunner500JSONResponse) VisitUpdateProjectRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedulesRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectSchedulesParams
}

type ListProjectSchedulesResponseObject interface {
	VisitListProjectSchedulesResponse(w http.ResponseWriter) error
}

type ListProjectSchedules200JSONResponse struct {
	ProjectSchedulesResponseJSONResponse
}

func (response ListProjectSchedules200JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectSchedules403JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectSchedules404JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectSchedules500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectSchedules500JSONResponse) VisitListProjectSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectScheduleRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectScheduleJSONRequestBody
}

type CreateProjectScheduleResponseObject interface {
	VisitCreateProjectScheduleResponse(w http.ResponseWriter) error
}

type CreateProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response CreateProjectSchedule200JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectSchedule403JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectSchedule404JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectSchedule422JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectSchedule500JSONResponse) VisitCreateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectScheduleRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	ScheduleID ScheduleID `json:"schedule_id"`
}

type DeleteProjectScheduleResponseObject interface {
	VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error
}

type DeleteProjectSchedule200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectSchedule200JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectSchedule400JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectSchedule403JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectSchedule404JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectSchedule500JSONResponse) VisitDeleteProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectScheduleRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	ScheduleID ScheduleID `json:"schedule_id"`
}

type ShowProjectScheduleResponseObject interface {
	VisitShowProjectScheduleResponse(w http.ResponseWriter) error
}

type ShowProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response ShowProjectSchedule200JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectSchedule403JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectSchedule404JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectSchedule500JSONResponse) VisitShowProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectScheduleRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	ScheduleID ScheduleID `json:"schedule_id"`
	Body       *UpdateProjectScheduleJSONRequestBody
}

type UpdateProjectScheduleResponseObject interface {
	VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error
}

type UpdateProjectSchedule200JSONResponse struct {
	ProjectScheduleResponseJSONResponse
}

func (response UpdateProjectSchedule200JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectSchedule403JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectSchedule404JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectSchedule422JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectSchedule500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectSchedule500JSONResponse) VisitUpdateProjectScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplatesRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectTemplatesParams
}

type ListProjectTemplatesResponseObject interface {
	VisitListProjectTemplatesResponse(w http.ResponseWriter) error
}

type ListProjectTemplates200JSONResponse struct {
	ProjectTemplatesResponseJSONResponse
}

func (response ListProjectTemplates200JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectTemplates403JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectTemplates404JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectTemplates500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectTemplates500JSONResponse) VisitListProjectTemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *CreateProjectTemplateJSONRequestBody
}

type CreateProjectTemplateResponseObject interface {
	VisitCreateProjectTemplateResponse(w http.ResponseWriter) error
}

type CreateProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response CreateProjectTemplate200JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectTemplate403JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectTemplate404JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectTemplate422JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectTemplate500JSONResponse) VisitCreateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
}

type DeleteProjectTemplateResponseObject interface {
	VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error
}

type DeleteProjectTemplate200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectTemplate200JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectTemplate400JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectTemplate403JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectTemplate404JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectTemplate500JSONResponse) VisitDeleteProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplateRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
}

type ShowProjectTemplateResponseObject interface {
	VisitShowProjectTemplateResponse(w http.ResponseWriter) error
}

type ShowProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response ShowProjectTemplate200JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowProjectTemplate403JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowProjectTemplate404JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowProjectTemplate500JSONResponse) VisitShowProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	Body       *UpdateProjectTemplateJSONRequestBody
}

type UpdateProjectTemplateResponseObject interface {
	VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error
}

type UpdateProjectTemplate200JSONResponse struct {
	ProjectTemplateResponseJSONResponse
}

func (response UpdateProjectTemplate200JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectTemplate403JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectTemplate404JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectTemplate422JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectTemplate500JSONResponse) VisitUpdateProjectTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateSurveyRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	Body       *CreateProjectTemplateSurveyJSONRequestBody
}

type CreateProjectTemplateSurveyResponseObject interface {
	VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error
}

type CreateProjectTemplateSurvey200JSONResponse struct {
	ProjectTemplateSurveyResponseJSONResponse
}

func (response CreateProjectTemplateSurvey200JSONResponse) VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateSurvey403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectTemplateSurvey403JSONResponse) VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateSurvey404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectTemplateSurvey404JSONResponse) VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateSurvey422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectTemplateSurvey422JSONResponse) VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateSurvey500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectTemplateSurvey500JSONResponse) VisitCreateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateSurveyRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	SurveyID   SurveyID   `json:"survey_id"`
}

type DeleteProjectTemplateSurveyResponseObject interface {
	VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error
}

type DeleteProjectTemplateSurvey200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectTemplateSurvey200JSONResponse) VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateSurvey400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectTemplateSurvey400JSONResponse) VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateSurvey403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectTemplateSurvey403JSONResponse) VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateSurvey404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectTemplateSurvey404JSONResponse) VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateSurvey500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectTemplateSurvey500JSONResponse) VisitDeleteProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateSurveyRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	SurveyID   SurveyID   `json:"survey_id"`
	Body       *UpdateProjectTemplateSurveyJSONRequestBody
}

type UpdateProjectTemplateSurveyResponseObject interface {
	VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error
}

type UpdateProjectTemplateSurvey200JSONResponse struct {
	ProjectTemplateSurveyResponseJSONResponse
}

func (response UpdateProjectTemplateSurvey200JSONResponse) VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateSurvey403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectTemplateSurvey403JSONResponse) VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateSurvey404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectTemplateSurvey404JSONResponse) VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateSurvey422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectTemplateSurvey422JSONResponse) VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateSurvey500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectTemplateSurvey500JSONResponse) VisitUpdateProjectTemplateSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateVaultRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	Body       *CreateProjectTemplateVaultJSONRequestBody
}

type CreateProjectTemplateVaultResponseObject interface {
	VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error
}

type CreateProjectTemplateVault200JSONResponse struct {
	ProjectTemplateVaultResponseJSONResponse
}

func (response CreateProjectTemplateVault200JSONResponse) VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateVault403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateProjectTemplateVault403JSONResponse) VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateVault404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateProjectTemplateVault404JSONResponse) VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateVault422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateProjectTemplateVault422JSONResponse) VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectTemplateVault500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProjectTemplateVault500JSONResponse) VisitCreateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateVaultRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	VaultID    VaultID    `json:"vault_id"`
}

type DeleteProjectTemplateVaultResponseObject interface {
	VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error
}

type DeleteProjectTemplateVault200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectTemplateVault200JSONResponse) VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateVault400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteProjectTemplateVault400JSONResponse) VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateVault403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectTemplateVault403JSONResponse) VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateVault404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectTemplateVault404JSONResponse) VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectTemplateVault500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectTemplateVault500JSONResponse) VisitDeleteProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateVaultRequestObject struct {
	ProjectID  ProjectID  `json:"project_id"`
	TemplateID TemplateID `json:"template_id"`
	VaultID    VaultID    `json:"vault_id"`
	Body       *UpdateProjectTemplateVaultJSONRequestBody
}

type UpdateProjectTemplateVaultResponseObject interface {
	VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error
}

type UpdateProjectTemplateVault200JSONResponse struct {
	ProjectTemplateVaultResponseJSONResponse
}

func (response UpdateProjectTemplateVault200JSONResponse) VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateVault403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateProjectTemplateVault403JSONResponse) VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateVault404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateProjectTemplateVault404JSONResponse) VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateVault422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateProjectTemplateVault422JSONResponse) VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectTemplateVault500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProjectTemplateVault500JSONResponse) VisitUpdateProjectTemplateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUserRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *DeleteProjectFromUserJSONRequestBody
}

type DeleteProjectFromUserResponseObject interface {
	VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error
}

type DeleteProjectFromUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteProjectFromUser200JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteProjectFromUser403JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteProjectFromUser404JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteProjectFromUser412JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectFromUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProjectFromUser500JSONResponse) VisitDeleteProjectFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsersRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Params    ListProjectUsersParams
}

type ListProjectUsersResponseObject interface {
	VisitListProjectUsersResponse(w http.ResponseWriter) error
}

type ListProjectUsers200JSONResponse struct {
	ProjectUsersResponseJSONResponse
}

func (response ListProjectUsers200JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListProjectUsers403JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListProjectUsers404JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProjectUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListProjectUsers500JSONResponse) VisitListProjectUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUserRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *AttachProjectToUserJSONRequestBody
}

type AttachProjectToUserResponseObject interface {
	VisitAttachProjectToUserResponse(w http.ResponseWriter) error
}

type AttachProjectToUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachProjectToUser200JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachProjectToUser403JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachProjectToUser404JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachProjectToUser412JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachProjectToUser422JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachProjectToUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachProjectToUser500JSONResponse) VisitAttachProjectToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUserRequestObject struct {
	ProjectID ProjectID `json:"project_id"`
	Body      *PermitProjectUserJSONRequestBody
}

type PermitProjectUserResponseObject interface {
	VisitPermitProjectUserResponse(w http.ResponseWriter) error
}

type PermitProjectUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitProjectUser200JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitProjectUser403JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitProjectUser404JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitProjectUser412JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitProjectUser422JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitProjectUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitProjectUser500JSONResponse) VisitPermitProjectUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListGlobalRunnersRequestObject struct {
	Params ListGlobalRunnersParams
}

type ListGlobalRunnersResponseObject interface {
	VisitListGlobalRunnersResponse(w http.ResponseWriter) error
}

type ListGlobalRunners200JSONResponse struct {
	GlobalRunnersResponseJSONResponse
}

func (response ListGlobalRunners200JSONResponse) VisitListGlobalRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGlobalRunners403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListGlobalRunners403JSONResponse) VisitListGlobalRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListGlobalRunners500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListGlobalRunners500JSONResponse) VisitListGlobalRunnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateGlobalRunnerRequestObject struct {
	Body *CreateGlobalRunnerJSONRequestBody
}

type CreateGlobalRunnerResponseObject interface {
	VisitCreateGlobalRunnerResponse(w http.ResponseWriter) error
}

type CreateGlobalRunner200JSONResponse struct {
	GlobalRunnerResponseJSONResponse
}

func (response CreateGlobalRunner200JSONResponse) VisitCreateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateGlobalRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateGlobalRunner403JSONResponse) VisitCreateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateGlobalRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateGlobalRunner422JSONResponse) VisitCreateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateGlobalRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateGlobalRunner500JSONResponse) VisitCreateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGlobalRunnerRequestObject struct {
	RunnerID RunnerID `json:"runner_id"`
}

type DeleteGlobalRunnerResponseObject interface {
	VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error
}

type DeleteGlobalRunner200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteGlobalRunner200JSONResponse) VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGlobalRunner400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteGlobalRunner400JSONResponse) VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGlobalRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteGlobalRunner403JSONResponse) VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGlobalRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteGlobalRunner404JSONResponse) VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteGlobalRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteGlobalRunner500JSONResponse) VisitDeleteGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowGlobalRunnerRequestObject struct {
	RunnerID RunnerID `json:"runner_id"`
}

type ShowGlobalRunnerResponseObject interface {
	VisitShowGlobalRunnerResponse(w http.ResponseWriter) error
}

type ShowGlobalRunner200JSONResponse struct {
	GlobalRunnerResponseJSONResponse
}

func (response ShowGlobalRunner200JSONResponse) VisitShowGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowGlobalRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowGlobalRunner403JSONResponse) VisitShowGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowGlobalRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowGlobalRunner404JSONResponse) VisitShowGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowGlobalRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowGlobalRunner500JSONResponse) VisitShowGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGlobalRunnerRequestObject struct {
	RunnerID RunnerID `json:"runner_id"`
	Body     *UpdateGlobalRunnerJSONRequestBody
}

type UpdateGlobalRunnerResponseObject interface {
	VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error
}

type UpdateGlobalRunner200JSONResponse struct {
	GlobalRunnerResponseJSONResponse
}

func (response UpdateGlobalRunner200JSONResponse) VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGlobalRunner403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateGlobalRunner403JSONResponse) VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGlobalRunner404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateGlobalRunner404JSONResponse) VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGlobalRunner422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateGlobalRunner422JSONResponse) VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGlobalRunner500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateGlobalRunner500JSONResponse) VisitUpdateGlobalRunnerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
	Params ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse struct{ UsersResponseJSONResponse }

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUsers403JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse struct{ UserResponseJSONResponse }

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response CreateUser403JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	UserID UserID `json:"user_id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser400JSONResponse struct{ ActionFailedErrorJSONResponse }

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUser403JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowUserRequestObject struct {
	UserID UserID `json:"user_id"`
}

type ShowUserResponseObject interface {
	VisitShowUserResponse(w http.ResponseWriter) error
}

type ShowUser200JSONResponse struct{ UserResponseJSONResponse }

func (response ShowUser200JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ShowUser403JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ShowUser404JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ShowUser500JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse struct{ UserResponseJSONResponse }

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response UpdateUser403JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser422JSONResponse struct{ ValidationErrorJSONResponse }

func (response UpdateUser422JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromGroupRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *DeleteUserFromGroupJSONRequestBody
}

type DeleteUserFromGroupResponseObject interface {
	VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error
}

type DeleteUserFromGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUserFromGroup200JSONResponse) VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUserFromGroup403JSONResponse) VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUserFromGroup404JSONResponse) VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromGroup412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteUserFromGroup412JSONResponse) VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUserFromGroup500JSONResponse) VisitDeleteUserFromGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserGroupsRequestObject struct {
	UserID UserID `json:"user_id"`
	Params ListUserGroupsParams
}

type ListUserGroupsResponseObject interface {
	VisitListUserGroupsResponse(w http.ResponseWriter) error
}

type ListUserGroups200JSONResponse struct{ UserGroupsResponseJSONResponse }

func (response ListUserGroups200JSONResponse) VisitListUserGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserGroups403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUserGroups403JSONResponse) VisitListUserGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserGroups404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListUserGroups404JSONResponse) VisitListUserGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserGroups500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUserGroups500JSONResponse) VisitListUserGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroupRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *AttachUserToGroupJSONRequestBody
}

type AttachUserToGroupResponseObject interface {
	VisitAttachUserToGroupResponse(w http.ResponseWriter) error
}

type AttachUserToGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachUserToGroup200JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachUserToGroup403JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachUserToGroup404JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroup412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachUserToGroup412JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachUserToGroup422JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachUserToGroup500JSONResponse) VisitAttachUserToGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroupRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *PermitUserGroupJSONRequestBody
}

type PermitUserGroupResponseObject interface {
	VisitPermitUserGroupResponse(w http.ResponseWriter) error
}

type PermitUserGroup200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitUserGroup200JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroup403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitUserGroup403JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroup404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitUserGroup404JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroup412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitUserGroup412JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroup422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitUserGroup422JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserGroup500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitUserGroup500JSONResponse) VisitPermitUserGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProjectRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *DeleteUserFromProjectJSONRequestBody
}

type DeleteUserFromProjectResponseObject interface {
	VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error
}

type DeleteUserFromProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response DeleteUserFromProject200JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response DeleteUserFromProject403JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteUserFromProject404JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response DeleteUserFromProject412JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUserFromProject500JSONResponse) VisitDeleteUserFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjectsRequestObject struct {
	UserID UserID `json:"user_id"`
	Params ListUserProjectsParams
}

type ListUserProjectsResponseObject interface {
	VisitListUserProjectsResponse(w http.ResponseWriter) error
}

type ListUserProjects200JSONResponse struct {
	UserProjectsResponseJSONResponse
}

func (response ListUserProjects200JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response ListUserProjects403JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListUserProjects404JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ListUserProjects500JSONResponse) VisitListUserProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProjectRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *AttachUserToProjectJSONRequestBody
}

type AttachUserToProjectResponseObject interface {
	VisitAttachUserToProjectResponse(w http.ResponseWriter) error
}

type AttachUserToProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response AttachUserToProject200JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response AttachUserToProject403JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response AttachUserToProject404JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject412JSONResponse struct {
	AlreadyAttachedErrorJSONResponse
}

func (response AttachUserToProject412JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response AttachUserToProject422JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AttachUserToProject500JSONResponse) VisitAttachUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProjectRequestObject struct {
	UserID UserID `json:"user_id"`
	Body   *PermitUserProjectJSONRequestBody
}

type PermitUserProjectResponseObject interface {
	VisitPermitUserProjectResponse(w http.ResponseWriter) error
}

type PermitUserProject200JSONResponse struct{ SuccessMessageJSONResponse }

func (response PermitUserProject200JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject403JSONResponse struct{ NotAuthorizedErrorJSONResponse }

func (response PermitUserProject403JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PermitUserProject404JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject412JSONResponse struct{ NotAttachedErrorJSONResponse }

func (response PermitUserProject412JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject422JSONResponse struct{ ValidationErrorJSONResponse }

func (response PermitUserProject422JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PermitUserProject500JSONResponse) VisitPermitUserProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(ctx context.Context, request LoginAuthRequestObject) (LoginAuthResponseObject, error)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ListProviders(ctx context.Context, request ListProvidersRequestObject) (ListProvidersResponseObject, error)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(ctx context.Context, request RefreshAuthRequestObject) (RefreshAuthResponseObject, error)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(ctx context.Context, request VerifyAuthRequestObject) (VerifyAuthResponseObject, error)
	// Callback to parse the defined provider
	// (GET /auth/{provider}/callback)
	CallbackProvider(ctx context.Context, request CallbackProviderRequestObject) (CallbackProviderResponseObject, error)
	// Request the redirect to defined provider
	// (GET /auth/{provider}/request)
	RequestProvider(ctx context.Context, request RequestProviderRequestObject) (RequestProviderResponseObject, error)
	// Fetch all events
	// (GET /events)
	ListGlobalEvents(ctx context.Context, request ListGlobalEventsRequestObject) (ListGlobalEventsResponseObject, error)
	// Fetch all available groups
	// (GET /groups)
	ListGroups(ctx context.Context, request ListGroupsRequestObject) (ListGroupsResponseObject, error)
	// Create a new group
	// (POST /groups)
	CreateGroup(ctx context.Context, request CreateGroupRequestObject) (CreateGroupResponseObject, error)
	// Delete a specific group
	// (DELETE /groups/{group_id})
	DeleteGroup(ctx context.Context, request DeleteGroupRequestObject) (DeleteGroupResponseObject, error)
	// Fetch a specific group
	// (GET /groups/{group_id})
	ShowGroup(ctx context.Context, request ShowGroupRequestObject) (ShowGroupResponseObject, error)
	// Update a specific group
	// (PUT /groups/{group_id})
	UpdateGroup(ctx context.Context, request UpdateGroupRequestObject) (UpdateGroupResponseObject, error)
	// Unlink a project from group
	// (DELETE /groups/{group_id}/projects)
	DeleteGroupFromProject(ctx context.Context, request DeleteGroupFromProjectRequestObject) (DeleteGroupFromProjectResponseObject, error)
	// Fetch all projects attached to group
	// (GET /groups/{group_id}/projects)
	ListGroupProjects(ctx context.Context, request ListGroupProjectsRequestObject) (ListGroupProjectsResponseObject, error)
	// Attach a project to group
	// (POST /groups/{group_id}/projects)
	AttachGroupToProject(ctx context.Context, request AttachGroupToProjectRequestObject) (AttachGroupToProjectResponseObject, error)
	// Update project perms for group
	// (PUT /groups/{group_id}/projects)
	PermitGroupProject(ctx context.Context, request PermitGroupProjectRequestObject) (PermitGroupProjectResponseObject, error)
	// Unlink a user from group
	// (DELETE /groups/{group_id}/users)
	DeleteGroupFromUser(ctx context.Context, request DeleteGroupFromUserRequestObject) (DeleteGroupFromUserResponseObject, error)
	// Fetch all users attached to group
	// (GET /groups/{group_id}/users)
	ListGroupUsers(ctx context.Context, request ListGroupUsersRequestObject) (ListGroupUsersResponseObject, error)
	// Attach a user to group
	// (POST /groups/{group_id}/users)
	AttachGroupToUser(ctx context.Context, request AttachGroupToUserRequestObject) (AttachGroupToUserResponseObject, error)
	// Update user perms for group
	// (PUT /groups/{group_id}/users)
	PermitGroupUser(ctx context.Context, request PermitGroupUserRequestObject) (PermitGroupUserResponseObject, error)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(ctx context.Context, request ShowProfileRequestObject) (ShowProfileResponseObject, error)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(ctx context.Context, request TokenProfileRequestObject) (TokenProfileResponseObject, error)
	// Fetch all available projects
	// (GET /projects)
	ListProjects(ctx context.Context, request ListProjectsRequestObject) (ListProjectsResponseObject, error)
	// Create a new project
	// (POST /projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)
	// Delete a specific project
	// (DELETE /projects/{project_id})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Fetch a specific project
	// (GET /projects/{project_id})
	ShowProject(ctx context.Context, request ShowProjectRequestObject) (ShowProjectResponseObject, error)
	// Update a specific project
	// (PUT /projects/{project_id})
	UpdateProject(ctx context.Context, request UpdateProjectRequestObject) (UpdateProjectResponseObject, error)
	// Fetch all credentials for a project
	// (GET /projects/{project_id}/credentials)
	ListProjectCredentials(ctx context.Context, request ListProjectCredentialsRequestObject) (ListProjectCredentialsResponseObject, error)
	// Create a new credential
	// (POST /projects/{project_id}/credentials)
	CreateProjectCredential(ctx context.Context, request CreateProjectCredentialRequestObject) (CreateProjectCredentialResponseObject, error)
	// Delete a specific credential for a project
	// (DELETE /projects/{project_id}/credentials/{credential_id})
	DeleteProjectCredential(ctx context.Context, request DeleteProjectCredentialRequestObject) (DeleteProjectCredentialResponseObject, error)
	// Fetch a specific credential for a project
	// (GET /projects/{project_id}/credentials/{credential_id})
	ShowProjectCredential(ctx context.Context, request ShowProjectCredentialRequestObject) (ShowProjectCredentialResponseObject, error)
	// Update a specific credential for a project
	// (PUT /projects/{project_id}/credentials/{credential_id})
	UpdateProjectCredential(ctx context.Context, request UpdateProjectCredentialRequestObject) (UpdateProjectCredentialResponseObject, error)
	// Fetch all environments for a project
	// (GET /projects/{project_id}/environments)
	ListProjectEnvironments(ctx context.Context, request ListProjectEnvironmentsRequestObject) (ListProjectEnvironmentsResponseObject, error)
	// Create a new environment
	// (POST /projects/{project_id}/environments)
	CreateProjectEnvironment(ctx context.Context, request CreateProjectEnvironmentRequestObject) (CreateProjectEnvironmentResponseObject, error)
	// Delete a specific environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id})
	DeleteProjectEnvironment(ctx context.Context, request DeleteProjectEnvironmentRequestObject) (DeleteProjectEnvironmentResponseObject, error)
	// Fetch a specific environment for a project
	// (GET /projects/{project_id}/environments/{environment_id})
	ShowProjectEnvironment(ctx context.Context, request ShowProjectEnvironmentRequestObject) (ShowProjectEnvironmentResponseObject, error)
	// Update a specific environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id})
	UpdateProjectEnvironment(ctx context.Context, request UpdateProjectEnvironmentRequestObject) (UpdateProjectEnvironmentResponseObject, error)
	// Create a new secret on an environment
	// (POST /projects/{project_id}/environments/{environment_id}/secrets)
	CreateProjectEnvironmentSecret(ctx context.Context, request CreateProjectEnvironmentSecretRequestObject) (CreateProjectEnvironmentSecretResponseObject, error)
	// Delete a secret on an environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
	DeleteProjectEnvironmentSecret(ctx context.Context, request DeleteProjectEnvironmentSecretRequestObject) (DeleteProjectEnvironmentSecretResponseObject, error)
	// Update a secret on an environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id}/secrets/{secret_id})
	UpdateProjectEnvironmentSecret(ctx context.Context, request UpdateProjectEnvironmentSecretRequestObject) (UpdateProjectEnvironmentSecretResponseObject, error)
	// Create a new value on an environment
	// (POST /projects/{project_id}/environments/{environment_id}/values)
	CreateProjectEnvironmentValue(ctx context.Context, request CreateProjectEnvironmentValueRequestObject) (CreateProjectEnvironmentValueResponseObject, error)
	// Delete a value on an environment for a project
	// (DELETE /projects/{project_id}/environments/{environment_id}/values/{value_id})
	DeleteProjectEnvironmentValue(ctx context.Context, request DeleteProjectEnvironmentValueRequestObject) (DeleteProjectEnvironmentValueResponseObject, error)
	// Update a value on an environment for a project
	// (PUT /projects/{project_id}/environments/{environment_id}/values/{value_id})
	UpdateProjectEnvironmentValue(ctx context.Context, request UpdateProjectEnvironmentValueRequestObject) (UpdateProjectEnvironmentValueResponseObject, error)
	// Fetch all events for a project
	// (GET /projects/{project_id}/events)
	ListProjectEvents(ctx context.Context, request ListProjectEventsRequestObject) (ListProjectEventsResponseObject, error)
	// Fetch all executions for a project
	// (GET /projects/{project_id}/executions)
	ListProjectExecutions(ctx context.Context, request ListProjectExecutionsRequestObject) (ListProjectExecutionsResponseObject, error)
	// Create a new execution
	// (POST /projects/{project_id}/executions)
	CreateProjectExecution(ctx context.Context, request CreateProjectExecutionRequestObject) (CreateProjectExecutionResponseObject, error)
	// Delete a specific execution for a project
	// (DELETE /projects/{project_id}/executions/{execution_id})
	DeleteProjectExecution(ctx context.Context, request DeleteProjectExecutionRequestObject) (DeleteProjectExecutionResponseObject, error)
	// Fetch a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id})
	ShowProjectExecution(ctx context.Context, request ShowProjectExecutionRequestObject) (ShowProjectExecutionResponseObject, error)
	// Output a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id}/output)
	OutputProjectExecution(ctx context.Context, request OutputProjectExecutionRequestObject) (OutputProjectExecutionResponseObject, error)
	// Purge a specific execution for a project
	// (GET /projects/{project_id}/executions/{execution_id}/purge)
	PurgeProjectExecution(ctx context.Context, request PurgeProjectExecutionRequestObject) (PurgeProjectExecutionResponseObject, error)
	// Unlink a group from project
	// (DELETE /projects/{project_id}/groups)
	DeleteProjectFromGroup(ctx context.Context, request DeleteProjectFromGroupRequestObject) (DeleteProjectFromGroupResponseObject, error)
	// Fetch all groups attached to project
	// (GET /projects/{project_id}/groups)
	ListProjectGroups(ctx context.Context, request ListProjectGroupsRequestObject) (ListProjectGroupsResponseObject, error)
	// Attach a group to project
	// (POST /projects/{project_id}/groups)
	AttachProjectToGroup(ctx context.Context, request AttachProjectToGroupRequestObject) (AttachProjectToGroupResponseObject, error)
	// Update group perms for project
	// (PUT /projects/{project_id}/groups)
	PermitProjectGroup(ctx context.Context, request PermitProjectGroupRequestObject) (PermitProjectGroupResponseObject, error)
	// Fetch all inventories for a project
	// (GET /projects/{project_id}/inventories)
	ListProjectInventories(ctx context.Context, request ListProjectInventoriesRequestObject) (ListProjectInventoriesResponseObject, error)
	// Create a new inventory
	// (POST /projects/{project_id}/inventories)
	CreateProjectInventory(ctx context.Context, request CreateProjectInventoryRequestObject) (CreateProjectInventoryResponseObject, error)
	// Delete a specific inventory for a project
	// (DELETE /projects/{project_id}/inventories/{inventory_id})
	DeleteProjectInventory(ctx context.Context, request DeleteProjectInventoryRequestObject) (DeleteProjectInventoryResponseObject, error)
	// Fetch a specific inventory for a project
	// (GET /projects/{project_id}/inventories/{inventory_id})
	ShowProjectInventory(ctx context.Context, request ShowProjectInventoryRequestObject) (ShowProjectInventoryResponseObject, error)
	// Update a specific inventory for a project
	// (PUT /projects/{project_id}/inventories/{inventory_id})
	UpdateProjectInventory(ctx context.Context, request UpdateProjectInventoryRequestObject) (UpdateProjectInventoryResponseObject, error)
	// Fetch all repositories for a project
	// (GET /projects/{project_id}/repositories)
	ListProjectRepositories(ctx context.Context, request ListProjectRepositoriesRequestObject) (ListProjectRepositoriesResponseObject, error)
	// Create a new repository
	// (POST /projects/{project_id}/repositories)
	CreateProjectRepository(ctx context.Context, request CreateProjectRepositoryRequestObject) (CreateProjectRepositoryResponseObject, error)
	// Delete a specific repository for a project
	// (DELETE /projects/{project_id}/repositories/{repository_id})
	DeleteProjectRepository(ctx context.Context, request DeleteProjectRepositoryRequestObject) (DeleteProjectRepositoryResponseObject, error)
	// Fetch a specific repository for a project
	// (GET /projects/{project_id}/repositories/{repository_id})
	ShowProjectRepository(ctx context.Context, request ShowProjectRepositoryRequestObject) (ShowProjectRepositoryResponseObject, error)
	// Update a specific repository for a project
	// (PUT /projects/{project_id}/repositories/{repository_id})
	UpdateProjectRepository(ctx context.Context, request UpdateProjectRepositoryRequestObject) (UpdateProjectRepositoryResponseObject, error)
	// Fetch all runners for a project
	// (GET /projects/{project_id}/runners)
	ListProjectRunners(ctx context.Context, request ListProjectRunnersRequestObject) (ListProjectRunnersResponseObject, error)
	// Create a new runner
	// (POST /projects/{project_id}/runners)
	CreateProjectRunner(ctx context.Context, request CreateProjectRunnerRequestObject) (CreateProjectRunnerResponseObject, error)
	// Delete a specific runner for a project
	// (DELETE /projects/{project_id}/runners/{runner_id})
	DeleteProjectRunner(ctx context.Context, request DeleteProjectRunnerRequestObject) (DeleteProjectRunnerResponseObject, error)
	// Fetch a specific runner for a project
	// (GET /projects/{project_id}/runners/{runner_id})
	ShowProjectRunner(ctx context.Context, request ShowProjectRunnerRequestObject) (ShowProjectRunnerResponseObject, error)
	// Update a specific runner for a project
	// (PUT /projects/{project_id}/runners/{runner_id})
	UpdateProjectRunner(ctx context.Context, request UpdateProjectRunnerRequestObject) (UpdateProjectRunnerResponseObject, error)
	// Fetch all schedules for a project
	// (GET /projects/{project_id}/schedules)
	ListProjectSchedules(ctx context.Context, request ListProjectSchedulesRequestObject) (ListProjectSchedulesResponseObject, error)
	// Create a new schedule
	// (POST /projects/{project_id}/schedules)
	CreateProjectSchedule(ctx context.Context, request CreateProjectScheduleRequestObject) (CreateProjectScheduleResponseObject, error)
	// Delete a specific schedule for a project
	// (DELETE /projects/{project_id}/schedules/{schedule_id})
	DeleteProjectSchedule(ctx context.Context, request DeleteProjectScheduleRequestObject) (DeleteProjectScheduleResponseObject, error)
	// Fetch a specific schedule for a project
	// (GET /projects/{project_id}/schedules/{schedule_id})
	ShowProjectSchedule(ctx context.Context, request ShowProjectScheduleRequestObject) (ShowProjectScheduleResponseObject, error)
	// Update a specific schedule for a project
	// (PUT /projects/{project_id}/schedules/{schedule_id})
	UpdateProjectSchedule(ctx context.Context, request UpdateProjectScheduleRequestObject) (UpdateProjectScheduleResponseObject, error)
	// Fetch all templates for a project
	// (GET /projects/{project_id}/templates)
	ListProjectTemplates(ctx context.Context, request ListProjectTemplatesRequestObject) (ListProjectTemplatesResponseObject, error)
	// Create a new template
	// (POST /projects/{project_id}/templates)
	CreateProjectTemplate(ctx context.Context, request CreateProjectTemplateRequestObject) (CreateProjectTemplateResponseObject, error)
	// Delete a specific template for a project
	// (DELETE /projects/{project_id}/templates/{template_id})
	DeleteProjectTemplate(ctx context.Context, request DeleteProjectTemplateRequestObject) (DeleteProjectTemplateResponseObject, error)
	// Fetch a specific template for a project
	// (GET /projects/{project_id}/templates/{template_id})
	ShowProjectTemplate(ctx context.Context, request ShowProjectTemplateRequestObject) (ShowProjectTemplateResponseObject, error)
	// Update a specific template for a project
	// (PUT /projects/{project_id}/templates/{template_id})
	UpdateProjectTemplate(ctx context.Context, request UpdateProjectTemplateRequestObject) (UpdateProjectTemplateResponseObject, error)
	// Create a new survey on a template
	// (POST /projects/{project_id}/templates/{template_id}/surveys)
	CreateProjectTemplateSurvey(ctx context.Context, request CreateProjectTemplateSurveyRequestObject) (CreateProjectTemplateSurveyResponseObject, error)
	// Delete a survey on a template for a project
	// (DELETE /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
	DeleteProjectTemplateSurvey(ctx context.Context, request DeleteProjectTemplateSurveyRequestObject) (DeleteProjectTemplateSurveyResponseObject, error)
	// Update a survey on a template for a project
	// (PUT /projects/{project_id}/templates/{template_id}/surveys/{survey_id})
	UpdateProjectTemplateSurvey(ctx context.Context, request UpdateProjectTemplateSurveyRequestObject) (UpdateProjectTemplateSurveyResponseObject, error)
	// Create a new vault on a template
	// (POST /projects/{project_id}/templates/{template_id}/vaults)
	CreateProjectTemplateVault(ctx context.Context, request CreateProjectTemplateVaultRequestObject) (CreateProjectTemplateVaultResponseObject, error)
	// Delete a vault on a template for a project
	// (DELETE /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
	DeleteProjectTemplateVault(ctx context.Context, request DeleteProjectTemplateVaultRequestObject) (DeleteProjectTemplateVaultResponseObject, error)
	// Update a vault on a template for a project
	// (PUT /projects/{project_id}/templates/{template_id}/vaults/{vault_id})
	UpdateProjectTemplateVault(ctx context.Context, request UpdateProjectTemplateVaultRequestObject) (UpdateProjectTemplateVaultResponseObject, error)
	// Unlink a user from project
	// (DELETE /projects/{project_id}/users)
	DeleteProjectFromUser(ctx context.Context, request DeleteProjectFromUserRequestObject) (DeleteProjectFromUserResponseObject, error)
	// Fetch all users attached to project
	// (GET /projects/{project_id}/users)
	ListProjectUsers(ctx context.Context, request ListProjectUsersRequestObject) (ListProjectUsersResponseObject, error)
	// Attach a user to project
	// (POST /projects/{project_id}/users)
	AttachProjectToUser(ctx context.Context, request AttachProjectToUserRequestObject) (AttachProjectToUserResponseObject, error)
	// Update user perms for project
	// (PUT /projects/{project_id}/users)
	PermitProjectUser(ctx context.Context, request PermitProjectUserRequestObject) (PermitProjectUserResponseObject, error)
	// Fetch all runners
	// (GET /runners)
	ListGlobalRunners(ctx context.Context, request ListGlobalRunnersRequestObject) (ListGlobalRunnersResponseObject, error)
	// Create a new global runner
	// (POST /runners)
	CreateGlobalRunner(ctx context.Context, request CreateGlobalRunnerRequestObject) (CreateGlobalRunnerResponseObject, error)
	// Delete a specific runner
	// (DELETE /runners/{runner_id})
	DeleteGlobalRunner(ctx context.Context, request DeleteGlobalRunnerRequestObject) (DeleteGlobalRunnerResponseObject, error)
	// Fetch a specific runner
	// (GET /runners/{runner_id})
	ShowGlobalRunner(ctx context.Context, request ShowGlobalRunnerRequestObject) (ShowGlobalRunnerResponseObject, error)
	// Update a specific runner
	// (PUT /runners/{runner_id})
	UpdateGlobalRunner(ctx context.Context, request UpdateGlobalRunnerRequestObject) (UpdateGlobalRunnerResponseObject, error)
	// Fetch all available users
	// (GET /users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(ctx context.Context, request ShowUserRequestObject) (ShowUserResponseObject, error)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Unlink a group from user
	// (DELETE /users/{user_id}/groups)
	DeleteUserFromGroup(ctx context.Context, request DeleteUserFromGroupRequestObject) (DeleteUserFromGroupResponseObject, error)
	// Fetch all groups attached to user
	// (GET /users/{user_id}/groups)
	ListUserGroups(ctx context.Context, request ListUserGroupsRequestObject) (ListUserGroupsResponseObject, error)
	// Attach a group to user
	// (POST /users/{user_id}/groups)
	AttachUserToGroup(ctx context.Context, request AttachUserToGroupRequestObject) (AttachUserToGroupResponseObject, error)
	// Update group perms for user
	// (PUT /users/{user_id}/groups)
	PermitUserGroup(ctx context.Context, request PermitUserGroupRequestObject) (PermitUserGroupResponseObject, error)
	// Unlink a project from user
	// (DELETE /users/{user_id}/projects)
	DeleteUserFromProject(ctx context.Context, request DeleteUserFromProjectRequestObject) (DeleteUserFromProjectResponseObject, error)
	// Fetch all projects attached to user
	// (GET /users/{user_id}/projects)
	ListUserProjects(ctx context.Context, request ListUserProjectsRequestObject) (ListUserProjectsResponseObject, error)
	// Attach a project to user
	// (POST /users/{user_id}/projects)
	AttachUserToProject(ctx context.Context, request AttachUserToProjectRequestObject) (AttachUserToProjectResponseObject, error)
	// Update project perms for user
	// (PUT /users/{user_id}/projects)
	PermitUserProject(ctx context.Context, request PermitUserProjectRequestObject) (PermitUserProjectResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// LoginAuth operation middleware
func (sh *strictHandler) LoginAuth(w http.ResponseWriter, r *http.Request) {
	var request LoginAuthRequestObject

	var body LoginAuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginAuth(ctx, request.(LoginAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginAuthResponseObject); ok {
		if err := validResponse.VisitLoginAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProviders operation middleware
func (sh *strictHandler) ListProviders(w http.ResponseWriter, r *http.Request) {
	var request ListProvidersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProviders(ctx, request.(ListProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProviders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProvidersResponseObject); ok {
		if err := validResponse.VisitListProvidersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshAuth operation middleware
func (sh *strictHandler) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	var request RefreshAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshAuth(ctx, request.(RefreshAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshAuthResponseObject); ok {
		if err := validResponse.VisitRefreshAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAuth operation middleware
func (sh *strictHandler) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	var request VerifyAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAuth(ctx, request.(VerifyAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(VerifyAuthResponseObject); ok {
		if err := validResponse.VisitVerifyAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CallbackProvider operation middleware
func (sh *strictHandler) CallbackProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam, params CallbackProviderParams) {
	var request CallbackProviderRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CallbackProvider(ctx, request.(CallbackProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CallbackProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CallbackProviderResponseObject); ok {
		if err := validResponse.VisitCallbackProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RequestProvider operation middleware
func (sh *strictHandler) RequestProvider(w http.ResponseWriter, r *http.Request, provider AuthProviderParam) {
	var request RequestProviderRequestObject

	request.Provider = provider

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RequestProvider(ctx, request.(RequestProviderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestProvider")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RequestProviderResponseObject); ok {
		if err := validResponse.VisitRequestProviderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGlobalEvents operation middleware
func (sh *strictHandler) ListGlobalEvents(w http.ResponseWriter, r *http.Request, params ListGlobalEventsParams) {
	var request ListGlobalEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGlobalEvents(ctx, request.(ListGlobalEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGlobalEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGlobalEventsResponseObject); ok {
		if err := validResponse.VisitListGlobalEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGroups operation middleware
func (sh *strictHandler) ListGroups(w http.ResponseWriter, r *http.Request, params ListGroupsParams) {
	var request ListGroupsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroups(ctx, request.(ListGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGroupsResponseObject); ok {
		if err := validResponse.VisitListGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateGroup operation middleware
func (sh *strictHandler) CreateGroup(w http.ResponseWriter, r *http.Request) {
	var request CreateGroupRequestObject

	var body CreateGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGroup(ctx, request.(CreateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateGroupResponseObject); ok {
		if err := validResponse.VisitCreateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroup operation middleware
func (sh *strictHandler) DeleteGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request DeleteGroupRequestObject

	request.GroupID = groupID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroup(ctx, request.(DeleteGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGroupResponseObject); ok {
		if err := validResponse.VisitDeleteGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowGroup operation middleware
func (sh *strictHandler) ShowGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request ShowGroupRequestObject

	request.GroupID = groupID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowGroup(ctx, request.(ShowGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowGroupResponseObject); ok {
		if err := validResponse.VisitShowGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGroup operation middleware
func (sh *strictHandler) UpdateGroup(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request UpdateGroupRequestObject

	request.GroupID = groupID

	var body UpdateGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGroup(ctx, request.(UpdateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGroupResponseObject); ok {
		if err := validResponse.VisitUpdateGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupFromProject operation middleware
func (sh *strictHandler) DeleteGroupFromProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request DeleteGroupFromProjectRequestObject

	request.GroupID = groupID

	var body DeleteGroupFromProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupFromProject(ctx, request.(DeleteGroupFromProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupFromProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGroupFromProjectResponseObject); ok {
		if err := validResponse.VisitDeleteGroupFromProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGroupProjects operation middleware
func (sh *strictHandler) ListGroupProjects(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupProjectsParams) {
	var request ListGroupProjectsRequestObject

	request.GroupID = groupID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroupProjects(ctx, request.(ListGroupProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroupProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGroupProjectsResponseObject); ok {
		if err := validResponse.VisitListGroupProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachGroupToProject operation middleware
func (sh *strictHandler) AttachGroupToProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request AttachGroupToProjectRequestObject

	request.GroupID = groupID

	var body AttachGroupToProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachGroupToProject(ctx, request.(AttachGroupToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachGroupToProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachGroupToProjectResponseObject); ok {
		if err := validResponse.VisitAttachGroupToProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitGroupProject operation middleware
func (sh *strictHandler) PermitGroupProject(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request PermitGroupProjectRequestObject

	request.GroupID = groupID

	var body PermitGroupProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitGroupProject(ctx, request.(PermitGroupProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitGroupProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitGroupProjectResponseObject); ok {
		if err := validResponse.VisitPermitGroupProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGroupFromUser operation middleware
func (sh *strictHandler) DeleteGroupFromUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request DeleteGroupFromUserRequestObject

	request.GroupID = groupID

	var body DeleteGroupFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupFromUser(ctx, request.(DeleteGroupFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGroupFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteGroupFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGroupUsers operation middleware
func (sh *strictHandler) ListGroupUsers(w http.ResponseWriter, r *http.Request, groupID GroupID, params ListGroupUsersParams) {
	var request ListGroupUsersRequestObject

	request.GroupID = groupID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroupUsers(ctx, request.(ListGroupUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroupUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGroupUsersResponseObject); ok {
		if err := validResponse.VisitListGroupUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachGroupToUser operation middleware
func (sh *strictHandler) AttachGroupToUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request AttachGroupToUserRequestObject

	request.GroupID = groupID

	var body AttachGroupToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachGroupToUser(ctx, request.(AttachGroupToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachGroupToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachGroupToUserResponseObject); ok {
		if err := validResponse.VisitAttachGroupToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitGroupUser operation middleware
func (sh *strictHandler) PermitGroupUser(w http.ResponseWriter, r *http.Request, groupID GroupID) {
	var request PermitGroupUserRequestObject

	request.GroupID = groupID

	var body PermitGroupUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitGroupUser(ctx, request.(PermitGroupUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitGroupUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitGroupUserResponseObject); ok {
		if err := validResponse.VisitPermitGroupUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProfile operation middleware
func (sh *strictHandler) ShowProfile(w http.ResponseWriter, r *http.Request) {
	var request ShowProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProfile(ctx, request.(ShowProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProfileResponseObject); ok {
		if err := validResponse.VisitShowProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateProfileRequestObject

	var body UpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx, request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		if err := validResponse.VisitUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TokenProfile operation middleware
func (sh *strictHandler) TokenProfile(w http.ResponseWriter, r *http.Request) {
	var request TokenProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TokenProfile(ctx, request.(TokenProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TokenProfileResponseObject); ok {
		if err := validResponse.VisitTokenProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjects operation middleware
func (sh *strictHandler) ListProjects(w http.ResponseWriter, r *http.Request, params ListProjectsParams) {
	var request ListProjectsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjects(ctx, request.(ListProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectsResponseObject); ok {
		if err := validResponse.VisitListProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(w http.ResponseWriter, r *http.Request) {
	var request CreateProjectRequestObject

	var body CreateProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx, request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		if err := validResponse.VisitCreateProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request DeleteProjectRequestObject

	request.ProjectID = projectID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProject operation middleware
func (sh *strictHandler) ShowProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request ShowProjectRequestObject

	request.ProjectID = projectID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProject(ctx, request.(ShowProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectResponseObject); ok {
		if err := validResponse.VisitShowProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProject operation middleware
func (sh *strictHandler) UpdateProject(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request UpdateProjectRequestObject

	request.ProjectID = projectID

	var body UpdateProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProject(ctx, request.(UpdateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectResponseObject); ok {
		if err := validResponse.VisitUpdateProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectCredentials operation middleware
func (sh *strictHandler) ListProjectCredentials(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectCredentialsParams) {
	var request ListProjectCredentialsRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectCredentials(ctx, request.(ListProjectCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectCredentialsResponseObject); ok {
		if err := validResponse.VisitListProjectCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectCredential operation middleware
func (sh *strictHandler) CreateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectCredentialRequestObject

	request.ProjectID = projectID

	var body CreateProjectCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectCredential(ctx, request.(CreateProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectCredentialResponseObject); ok {
		if err := validResponse.VisitCreateProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectCredential operation middleware
func (sh *strictHandler) DeleteProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	var request DeleteProjectCredentialRequestObject

	request.ProjectID = projectID
	request.CredentialID = credentialID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectCredential(ctx, request.(DeleteProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectCredentialResponseObject); ok {
		if err := validResponse.VisitDeleteProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectCredential operation middleware
func (sh *strictHandler) ShowProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	var request ShowProjectCredentialRequestObject

	request.ProjectID = projectID
	request.CredentialID = credentialID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectCredential(ctx, request.(ShowProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectCredentialResponseObject); ok {
		if err := validResponse.VisitShowProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectCredential operation middleware
func (sh *strictHandler) UpdateProjectCredential(w http.ResponseWriter, r *http.Request, projectID ProjectID, credentialID CredentialID) {
	var request UpdateProjectCredentialRequestObject

	request.ProjectID = projectID
	request.CredentialID = credentialID

	var body UpdateProjectCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectCredential(ctx, request.(UpdateProjectCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectCredentialResponseObject); ok {
		if err := validResponse.VisitUpdateProjectCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectEnvironments operation middleware
func (sh *strictHandler) ListProjectEnvironments(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEnvironmentsParams) {
	var request ListProjectEnvironmentsRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectEnvironments(ctx, request.(ListProjectEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectEnvironments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectEnvironmentsResponseObject); ok {
		if err := validResponse.VisitListProjectEnvironmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectEnvironment operation middleware
func (sh *strictHandler) CreateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectEnvironmentRequestObject

	request.ProjectID = projectID

	var body CreateProjectEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectEnvironment(ctx, request.(CreateProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitCreateProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectEnvironment operation middleware
func (sh *strictHandler) DeleteProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	var request DeleteProjectEnvironmentRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectEnvironment(ctx, request.(DeleteProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitDeleteProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectEnvironment operation middleware
func (sh *strictHandler) ShowProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	var request ShowProjectEnvironmentRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectEnvironment(ctx, request.(ShowProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitShowProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectEnvironment operation middleware
func (sh *strictHandler) UpdateProjectEnvironment(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	var request UpdateProjectEnvironmentRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID

	var body UpdateProjectEnvironmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectEnvironment(ctx, request.(UpdateProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectEnvironment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitUpdateProjectEnvironmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectEnvironmentSecret operation middleware
func (sh *strictHandler) CreateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	var request CreateProjectEnvironmentSecretRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID

	var body CreateProjectEnvironmentSecretJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectEnvironmentSecret(ctx, request.(CreateProjectEnvironmentSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectEnvironmentSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectEnvironmentSecretResponseObject); ok {
		if err := validResponse.VisitCreateProjectEnvironmentSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectEnvironmentSecret operation middleware
func (sh *strictHandler) DeleteProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID) {
	var request DeleteProjectEnvironmentSecretRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID
	request.SecretID = secretID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectEnvironmentSecret(ctx, request.(DeleteProjectEnvironmentSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectEnvironmentSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectEnvironmentSecretResponseObject); ok {
		if err := validResponse.VisitDeleteProjectEnvironmentSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectEnvironmentSecret operation middleware
func (sh *strictHandler) UpdateProjectEnvironmentSecret(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, secretID SecretID) {
	var request UpdateProjectEnvironmentSecretRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID
	request.SecretID = secretID

	var body UpdateProjectEnvironmentSecretJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectEnvironmentSecret(ctx, request.(UpdateProjectEnvironmentSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectEnvironmentSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectEnvironmentSecretResponseObject); ok {
		if err := validResponse.VisitUpdateProjectEnvironmentSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectEnvironmentValue operation middleware
func (sh *strictHandler) CreateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID) {
	var request CreateProjectEnvironmentValueRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID

	var body CreateProjectEnvironmentValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectEnvironmentValue(ctx, request.(CreateProjectEnvironmentValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectEnvironmentValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectEnvironmentValueResponseObject); ok {
		if err := validResponse.VisitCreateProjectEnvironmentValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectEnvironmentValue operation middleware
func (sh *strictHandler) DeleteProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID) {
	var request DeleteProjectEnvironmentValueRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID
	request.ValueID = valueID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectEnvironmentValue(ctx, request.(DeleteProjectEnvironmentValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectEnvironmentValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectEnvironmentValueResponseObject); ok {
		if err := validResponse.VisitDeleteProjectEnvironmentValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectEnvironmentValue operation middleware
func (sh *strictHandler) UpdateProjectEnvironmentValue(w http.ResponseWriter, r *http.Request, projectID ProjectID, environmentID EnvironmentID, valueID ValueID) {
	var request UpdateProjectEnvironmentValueRequestObject

	request.ProjectID = projectID
	request.EnvironmentID = environmentID
	request.ValueID = valueID

	var body UpdateProjectEnvironmentValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectEnvironmentValue(ctx, request.(UpdateProjectEnvironmentValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectEnvironmentValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectEnvironmentValueResponseObject); ok {
		if err := validResponse.VisitUpdateProjectEnvironmentValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectEvents operation middleware
func (sh *strictHandler) ListProjectEvents(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectEventsParams) {
	var request ListProjectEventsRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectEvents(ctx, request.(ListProjectEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectEventsResponseObject); ok {
		if err := validResponse.VisitListProjectEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectExecutions operation middleware
func (sh *strictHandler) ListProjectExecutions(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectExecutionsParams) {
	var request ListProjectExecutionsRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectExecutions(ctx, request.(ListProjectExecutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectExecutions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectExecutionsResponseObject); ok {
		if err := validResponse.VisitListProjectExecutionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectExecution operation middleware
func (sh *strictHandler) CreateProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectExecutionRequestObject

	request.ProjectID = projectID

	var body CreateProjectExecutionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectExecution(ctx, request.(CreateProjectExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectExecutionResponseObject); ok {
		if err := validResponse.VisitCreateProjectExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectExecution operation middleware
func (sh *strictHandler) DeleteProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	var request DeleteProjectExecutionRequestObject

	request.ProjectID = projectID
	request.ExecutionID = executionID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectExecution(ctx, request.(DeleteProjectExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectExecutionResponseObject); ok {
		if err := validResponse.VisitDeleteProjectExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectExecution operation middleware
func (sh *strictHandler) ShowProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	var request ShowProjectExecutionRequestObject

	request.ProjectID = projectID
	request.ExecutionID = executionID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectExecution(ctx, request.(ShowProjectExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectExecutionResponseObject); ok {
		if err := validResponse.VisitShowProjectExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OutputProjectExecution operation middleware
func (sh *strictHandler) OutputProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	var request OutputProjectExecutionRequestObject

	request.ProjectID = projectID
	request.ExecutionID = executionID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OutputProjectExecution(ctx, request.(OutputProjectExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OutputProjectExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OutputProjectExecutionResponseObject); ok {
		if err := validResponse.VisitOutputProjectExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PurgeProjectExecution operation middleware
func (sh *strictHandler) PurgeProjectExecution(w http.ResponseWriter, r *http.Request, projectID ProjectID, executionID ExecutionID) {
	var request PurgeProjectExecutionRequestObject

	request.ProjectID = projectID
	request.ExecutionID = executionID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PurgeProjectExecution(ctx, request.(PurgeProjectExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PurgeProjectExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PurgeProjectExecutionResponseObject); ok {
		if err := validResponse.VisitPurgeProjectExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectFromGroup operation middleware
func (sh *strictHandler) DeleteProjectFromGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request DeleteProjectFromGroupRequestObject

	request.ProjectID = projectID

	var body DeleteProjectFromGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectFromGroup(ctx, request.(DeleteProjectFromGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectFromGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectFromGroupResponseObject); ok {
		if err := validResponse.VisitDeleteProjectFromGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectGroups operation middleware
func (sh *strictHandler) ListProjectGroups(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectGroupsParams) {
	var request ListProjectGroupsRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectGroups(ctx, request.(ListProjectGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectGroupsResponseObject); ok {
		if err := validResponse.VisitListProjectGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachProjectToGroup operation middleware
func (sh *strictHandler) AttachProjectToGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request AttachProjectToGroupRequestObject

	request.ProjectID = projectID

	var body AttachProjectToGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachProjectToGroup(ctx, request.(AttachProjectToGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachProjectToGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachProjectToGroupResponseObject); ok {
		if err := validResponse.VisitAttachProjectToGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitProjectGroup operation middleware
func (sh *strictHandler) PermitProjectGroup(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request PermitProjectGroupRequestObject

	request.ProjectID = projectID

	var body PermitProjectGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitProjectGroup(ctx, request.(PermitProjectGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitProjectGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitProjectGroupResponseObject); ok {
		if err := validResponse.VisitPermitProjectGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectInventories operation middleware
func (sh *strictHandler) ListProjectInventories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectInventoriesParams) {
	var request ListProjectInventoriesRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectInventories(ctx, request.(ListProjectInventoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectInventories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectInventoriesResponseObject); ok {
		if err := validResponse.VisitListProjectInventoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectInventory operation middleware
func (sh *strictHandler) CreateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectInventoryRequestObject

	request.ProjectID = projectID

	var body CreateProjectInventoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectInventory(ctx, request.(CreateProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectInventoryResponseObject); ok {
		if err := validResponse.VisitCreateProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectInventory operation middleware
func (sh *strictHandler) DeleteProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	var request DeleteProjectInventoryRequestObject

	request.ProjectID = projectID
	request.InventoryID = inventoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectInventory(ctx, request.(DeleteProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectInventoryResponseObject); ok {
		if err := validResponse.VisitDeleteProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectInventory operation middleware
func (sh *strictHandler) ShowProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	var request ShowProjectInventoryRequestObject

	request.ProjectID = projectID
	request.InventoryID = inventoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectInventory(ctx, request.(ShowProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectInventoryResponseObject); ok {
		if err := validResponse.VisitShowProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectInventory operation middleware
func (sh *strictHandler) UpdateProjectInventory(w http.ResponseWriter, r *http.Request, projectID ProjectID, inventoryID InventoryID) {
	var request UpdateProjectInventoryRequestObject

	request.ProjectID = projectID
	request.InventoryID = inventoryID

	var body UpdateProjectInventoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectInventory(ctx, request.(UpdateProjectInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectInventoryResponseObject); ok {
		if err := validResponse.VisitUpdateProjectInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectRepositories operation middleware
func (sh *strictHandler) ListProjectRepositories(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRepositoriesParams) {
	var request ListProjectRepositoriesRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectRepositories(ctx, request.(ListProjectRepositoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectRepositories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectRepositoriesResponseObject); ok {
		if err := validResponse.VisitListProjectRepositoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectRepository operation middleware
func (sh *strictHandler) CreateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectRepositoryRequestObject

	request.ProjectID = projectID

	var body CreateProjectRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectRepository(ctx, request.(CreateProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitCreateProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectRepository operation middleware
func (sh *strictHandler) DeleteProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	var request DeleteProjectRepositoryRequestObject

	request.ProjectID = projectID
	request.RepositoryID = repositoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectRepository(ctx, request.(DeleteProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitDeleteProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectRepository operation middleware
func (sh *strictHandler) ShowProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	var request ShowProjectRepositoryRequestObject

	request.ProjectID = projectID
	request.RepositoryID = repositoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectRepository(ctx, request.(ShowProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitShowProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectRepository operation middleware
func (sh *strictHandler) UpdateProjectRepository(w http.ResponseWriter, r *http.Request, projectID ProjectID, repositoryID RepositoryID) {
	var request UpdateProjectRepositoryRequestObject

	request.ProjectID = projectID
	request.RepositoryID = repositoryID

	var body UpdateProjectRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectRepository(ctx, request.(UpdateProjectRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectRepositoryResponseObject); ok {
		if err := validResponse.VisitUpdateProjectRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectRunners operation middleware
func (sh *strictHandler) ListProjectRunners(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectRunnersParams) {
	var request ListProjectRunnersRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectRunners(ctx, request.(ListProjectRunnersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectRunners")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectRunnersResponseObject); ok {
		if err := validResponse.VisitListProjectRunnersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectRunner operation middleware
func (sh *strictHandler) CreateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectRunnerRequestObject

	request.ProjectID = projectID

	var body CreateProjectRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectRunner(ctx, request.(CreateProjectRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectRunnerResponseObject); ok {
		if err := validResponse.VisitCreateProjectRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectRunner operation middleware
func (sh *strictHandler) DeleteProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	var request DeleteProjectRunnerRequestObject

	request.ProjectID = projectID
	request.RunnerID = runnerID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectRunner(ctx, request.(DeleteProjectRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectRunnerResponseObject); ok {
		if err := validResponse.VisitDeleteProjectRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectRunner operation middleware
func (sh *strictHandler) ShowProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	var request ShowProjectRunnerRequestObject

	request.ProjectID = projectID
	request.RunnerID = runnerID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectRunner(ctx, request.(ShowProjectRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectRunnerResponseObject); ok {
		if err := validResponse.VisitShowProjectRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectRunner operation middleware
func (sh *strictHandler) UpdateProjectRunner(w http.ResponseWriter, r *http.Request, projectID ProjectID, runnerID RunnerID) {
	var request UpdateProjectRunnerRequestObject

	request.ProjectID = projectID
	request.RunnerID = runnerID

	var body UpdateProjectRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectRunner(ctx, request.(UpdateProjectRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectRunnerResponseObject); ok {
		if err := validResponse.VisitUpdateProjectRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectSchedules operation middleware
func (sh *strictHandler) ListProjectSchedules(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectSchedulesParams) {
	var request ListProjectSchedulesRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectSchedules(ctx, request.(ListProjectSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectSchedulesResponseObject); ok {
		if err := validResponse.VisitListProjectSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectSchedule operation middleware
func (sh *strictHandler) CreateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectScheduleRequestObject

	request.ProjectID = projectID

	var body CreateProjectScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectSchedule(ctx, request.(CreateProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectScheduleResponseObject); ok {
		if err := validResponse.VisitCreateProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectSchedule operation middleware
func (sh *strictHandler) DeleteProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	var request DeleteProjectScheduleRequestObject

	request.ProjectID = projectID
	request.ScheduleID = scheduleID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectSchedule(ctx, request.(DeleteProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectScheduleResponseObject); ok {
		if err := validResponse.VisitDeleteProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectSchedule operation middleware
func (sh *strictHandler) ShowProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	var request ShowProjectScheduleRequestObject

	request.ProjectID = projectID
	request.ScheduleID = scheduleID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectSchedule(ctx, request.(ShowProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectScheduleResponseObject); ok {
		if err := validResponse.VisitShowProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectSchedule operation middleware
func (sh *strictHandler) UpdateProjectSchedule(w http.ResponseWriter, r *http.Request, projectID ProjectID, scheduleID ScheduleID) {
	var request UpdateProjectScheduleRequestObject

	request.ProjectID = projectID
	request.ScheduleID = scheduleID

	var body UpdateProjectScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectSchedule(ctx, request.(UpdateProjectScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectScheduleResponseObject); ok {
		if err := validResponse.VisitUpdateProjectScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectTemplates operation middleware
func (sh *strictHandler) ListProjectTemplates(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectTemplatesParams) {
	var request ListProjectTemplatesRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectTemplates(ctx, request.(ListProjectTemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectTemplates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectTemplatesResponseObject); ok {
		if err := validResponse.VisitListProjectTemplatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectTemplate operation middleware
func (sh *strictHandler) CreateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request CreateProjectTemplateRequestObject

	request.ProjectID = projectID

	var body CreateProjectTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectTemplate(ctx, request.(CreateProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectTemplateResponseObject); ok {
		if err := validResponse.VisitCreateProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectTemplate operation middleware
func (sh *strictHandler) DeleteProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	var request DeleteProjectTemplateRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectTemplate(ctx, request.(DeleteProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectTemplateResponseObject); ok {
		if err := validResponse.VisitDeleteProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProjectTemplate operation middleware
func (sh *strictHandler) ShowProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	var request ShowProjectTemplateRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProjectTemplate(ctx, request.(ShowProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProjectTemplateResponseObject); ok {
		if err := validResponse.VisitShowProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectTemplate operation middleware
func (sh *strictHandler) UpdateProjectTemplate(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	var request UpdateProjectTemplateRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID

	var body UpdateProjectTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectTemplate(ctx, request.(UpdateProjectTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectTemplateResponseObject); ok {
		if err := validResponse.VisitUpdateProjectTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectTemplateSurvey operation middleware
func (sh *strictHandler) CreateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	var request CreateProjectTemplateSurveyRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID

	var body CreateProjectTemplateSurveyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectTemplateSurvey(ctx, request.(CreateProjectTemplateSurveyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectTemplateSurvey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectTemplateSurveyResponseObject); ok {
		if err := validResponse.VisitCreateProjectTemplateSurveyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectTemplateSurvey operation middleware
func (sh *strictHandler) DeleteProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID) {
	var request DeleteProjectTemplateSurveyRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID
	request.SurveyID = surveyID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectTemplateSurvey(ctx, request.(DeleteProjectTemplateSurveyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectTemplateSurvey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectTemplateSurveyResponseObject); ok {
		if err := validResponse.VisitDeleteProjectTemplateSurveyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectTemplateSurvey operation middleware
func (sh *strictHandler) UpdateProjectTemplateSurvey(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, surveyID SurveyID) {
	var request UpdateProjectTemplateSurveyRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID
	request.SurveyID = surveyID

	var body UpdateProjectTemplateSurveyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectTemplateSurvey(ctx, request.(UpdateProjectTemplateSurveyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectTemplateSurvey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectTemplateSurveyResponseObject); ok {
		if err := validResponse.VisitUpdateProjectTemplateSurveyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectTemplateVault operation middleware
func (sh *strictHandler) CreateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID) {
	var request CreateProjectTemplateVaultRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID

	var body CreateProjectTemplateVaultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectTemplateVault(ctx, request.(CreateProjectTemplateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectTemplateVault")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProjectTemplateVaultResponseObject); ok {
		if err := validResponse.VisitCreateProjectTemplateVaultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectTemplateVault operation middleware
func (sh *strictHandler) DeleteProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID) {
	var request DeleteProjectTemplateVaultRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID
	request.VaultID = vaultID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectTemplateVault(ctx, request.(DeleteProjectTemplateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectTemplateVault")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectTemplateVaultResponseObject); ok {
		if err := validResponse.VisitDeleteProjectTemplateVaultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProjectTemplateVault operation middleware
func (sh *strictHandler) UpdateProjectTemplateVault(w http.ResponseWriter, r *http.Request, projectID ProjectID, templateID TemplateID, vaultID VaultID) {
	var request UpdateProjectTemplateVaultRequestObject

	request.ProjectID = projectID
	request.TemplateID = templateID
	request.VaultID = vaultID

	var body UpdateProjectTemplateVaultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProjectTemplateVault(ctx, request.(UpdateProjectTemplateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProjectTemplateVault")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProjectTemplateVaultResponseObject); ok {
		if err := validResponse.VisitUpdateProjectTemplateVaultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectFromUser operation middleware
func (sh *strictHandler) DeleteProjectFromUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request DeleteProjectFromUserRequestObject

	request.ProjectID = projectID

	var body DeleteProjectFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectFromUser(ctx, request.(DeleteProjectFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteProjectFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProjectUsers operation middleware
func (sh *strictHandler) ListProjectUsers(w http.ResponseWriter, r *http.Request, projectID ProjectID, params ListProjectUsersParams) {
	var request ListProjectUsersRequestObject

	request.ProjectID = projectID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProjectUsers(ctx, request.(ListProjectUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProjectUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProjectUsersResponseObject); ok {
		if err := validResponse.VisitListProjectUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachProjectToUser operation middleware
func (sh *strictHandler) AttachProjectToUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request AttachProjectToUserRequestObject

	request.ProjectID = projectID

	var body AttachProjectToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachProjectToUser(ctx, request.(AttachProjectToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachProjectToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachProjectToUserResponseObject); ok {
		if err := validResponse.VisitAttachProjectToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitProjectUser operation middleware
func (sh *strictHandler) PermitProjectUser(w http.ResponseWriter, r *http.Request, projectID ProjectID) {
	var request PermitProjectUserRequestObject

	request.ProjectID = projectID

	var body PermitProjectUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitProjectUser(ctx, request.(PermitProjectUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitProjectUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitProjectUserResponseObject); ok {
		if err := validResponse.VisitPermitProjectUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGlobalRunners operation middleware
func (sh *strictHandler) ListGlobalRunners(w http.ResponseWriter, r *http.Request, params ListGlobalRunnersParams) {
	var request ListGlobalRunnersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGlobalRunners(ctx, request.(ListGlobalRunnersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGlobalRunners")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGlobalRunnersResponseObject); ok {
		if err := validResponse.VisitListGlobalRunnersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateGlobalRunner operation middleware
func (sh *strictHandler) CreateGlobalRunner(w http.ResponseWriter, r *http.Request) {
	var request CreateGlobalRunnerRequestObject

	var body CreateGlobalRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGlobalRunner(ctx, request.(CreateGlobalRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGlobalRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateGlobalRunnerResponseObject); ok {
		if err := validResponse.VisitCreateGlobalRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteGlobalRunner operation middleware
func (sh *strictHandler) DeleteGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	var request DeleteGlobalRunnerRequestObject

	request.RunnerID = runnerID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGlobalRunner(ctx, request.(DeleteGlobalRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGlobalRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteGlobalRunnerResponseObject); ok {
		if err := validResponse.VisitDeleteGlobalRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowGlobalRunner operation middleware
func (sh *strictHandler) ShowGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	var request ShowGlobalRunnerRequestObject

	request.RunnerID = runnerID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowGlobalRunner(ctx, request.(ShowGlobalRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowGlobalRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowGlobalRunnerResponseObject); ok {
		if err := validResponse.VisitShowGlobalRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGlobalRunner operation middleware
func (sh *strictHandler) UpdateGlobalRunner(w http.ResponseWriter, r *http.Request, runnerID RunnerID) {
	var request UpdateGlobalRunnerRequestObject

	request.RunnerID = runnerID

	var body UpdateGlobalRunnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGlobalRunner(ctx, request.(UpdateGlobalRunnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGlobalRunner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGlobalRunnerResponseObject); ok {
		if err := validResponse.VisitUpdateGlobalRunnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	var request ListUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request DeleteUserRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowUser operation middleware
func (sh *strictHandler) ShowUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request ShowUserRequestObject

	request.UserID = userID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowUser(ctx, request.(ShowUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowUserResponseObject); ok {
		if err := validResponse.VisitShowUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request UpdateUserRequestObject

	request.UserID = userID

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromGroup operation middleware
func (sh *strictHandler) DeleteUserFromGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request DeleteUserFromGroupRequestObject

	request.UserID = userID

	var body DeleteUserFromGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromGroup(ctx, request.(DeleteUserFromGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromGroupResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserGroups operation middleware
func (sh *strictHandler) ListUserGroups(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserGroupsParams) {
	var request ListUserGroupsRequestObject

	request.UserID = userID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserGroups(ctx, request.(ListUserGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserGroups")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserGroupsResponseObject); ok {
		if err := validResponse.VisitListUserGroupsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToGroup operation middleware
func (sh *strictHandler) AttachUserToGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request AttachUserToGroupRequestObject

	request.UserID = userID

	var body AttachUserToGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToGroup(ctx, request.(AttachUserToGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToGroupResponseObject); ok {
		if err := validResponse.VisitAttachUserToGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserGroup operation middleware
func (sh *strictHandler) PermitUserGroup(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request PermitUserGroupRequestObject

	request.UserID = userID

	var body PermitUserGroupJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserGroup(ctx, request.(PermitUserGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserGroupResponseObject); ok {
		if err := validResponse.VisitPermitUserGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromProject operation middleware
func (sh *strictHandler) DeleteUserFromProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request DeleteUserFromProjectRequestObject

	request.UserID = userID

	var body DeleteUserFromProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromProject(ctx, request.(DeleteUserFromProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromProjectResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserProjects operation middleware
func (sh *strictHandler) ListUserProjects(w http.ResponseWriter, r *http.Request, userID UserID, params ListUserProjectsParams) {
	var request ListUserProjectsRequestObject

	request.UserID = userID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserProjects(ctx, request.(ListUserProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserProjectsResponseObject); ok {
		if err := validResponse.VisitListUserProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToProject operation middleware
func (sh *strictHandler) AttachUserToProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request AttachUserToProjectRequestObject

	request.UserID = userID

	var body AttachUserToProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToProject(ctx, request.(AttachUserToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToProjectResponseObject); ok {
		if err := validResponse.VisitAttachUserToProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserProject operation middleware
func (sh *strictHandler) PermitUserProject(w http.ResponseWriter, r *http.Request, userID UserID) {
	var request PermitUserProjectRequestObject

	request.UserID = userID

	var body PermitUserProjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserProject(ctx, request.(PermitUserProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserProjectResponseObject); ok {
		if err := validResponse.VisitPermitUserProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdbW/buJb+K4J2P7p12ttdLPJp006nN7idaW7SDhYYBAUj07amsuRLUU59g/z3BV9F",
	"WW8USVmyo09tLIo6POfh4UPy8PDJD5LNNolhjFP/8snfAgQ2EENE/7rK8PpDsoA35FfywwKmAQq3OExi",
	"/5I+9oJkAf2ZH5If/pVBtPdnfgw20L/0+aM0WMMNIK/j/Zb8nmIUxiv/+XlGq7hByS5cQFT3ldgLFzDG",
	"4TKEyFsmyMNr6AHy7S1/U3x/C/A6/7zyFMF/ZSGCC/8Soww2iDTzf76CP8FmG5FfVyFeZw8+l/MOA9yo",
	"ipQUqNGFeNakjA8I0oaCqO4rXiCLqEpJkJdG2apaDfkr38OFuS7yal698cmjVfKKfyGX+/oX8trHeBei",
	"JN7AGNc2BOZltFuivGPVFKWeUlsU2XljfsIgI2LXN0WU0G+IeMOuGaKWciPEE9aETyjJtrXir8hTbdFp",
	"aSuxaQ0lkamMTNzreAdjnKB9rcihKKEttnzDSnRZS0l8KTNrwg1YhfHqc7gJ63oAK+FFpEiNyxDPcuEW",
	"cAmyCPuXby4uZkLUMMZwBdGBrG8uLqQcX5bLFLYIktAyNZLIhxWitAlCxUDJXzCodwZb9lzbmry8lS15",
	"HSVLclmZHW/hNknDRiwiWURb/PwVqxbk1ZQakcvN25HFcf0A6yH6WF9+WtxOdlpFWW76M5P5LljDRRbV",
	"jrheygtoyy1esJJcVFKSXcjLpYcABet/kn5U0wBWwhNdrZI00CItrOEOBgjW962UPtbXES1upyFaRVk/",
	"9GeunQThD0mUbepGVVKAuKWAFqpTT4Jwm3IShL+genIpvpMghUYeej/+rML5+SAN/JkP42zjX/7J/yJf",
	"8O9nzUqihYiAGdrBeu+S0sf61qPF7axHqyhbj/7MrPcVbrZRAxf2MC+gLbd4wUpyUUlJdiEvk/5b2uAJ",
	"s7SDHySFrST+a5HAA1mJdEzOP0CU1at4R55qS0pLW4lKayhplsooxM0i3CBuFuEO4mYRthQ3i3CFuFlE",
	"PdAzqxim+H2yCCGd7H5AEGD4KUoeQMTGoffJYk+eBEmMYYzJf8F2G4UBIO2a/5WSxj0pIm1RsoUI8wrZ",
	"Rw8FJRLFWRSBByIoa9TPV8kmJPDFe/bT80zlOJV1VDEW3bqp5o0lw8kPGJu+/iz9YvJApPafyU9FuHxd",
	"Q0FJFgADDydk3svmz0U8sEkzMRuZPgxqLxud6iqFTdV0dcJxYamVBdwkSrsekiSCINZWy/iVKiYfHdWa",
	"L3pYKvhHGC/MNRQlq5BW/58ILv1L/z/m+YLenH0yneeyfqbFre2S7CBC4QJaACNdwyjSF/yOFj8SJJRV",
	"to6oUJaPhvVGlGzTisijtE3RityMp/u5rgBCYH+ksYXSDCOxKRUxlFoXF+qipTkwmIIt4aG8ZqZpO7dj",
	"g04TbfNZrLnSKTwmnXfROZtidFW5WHq21PUDAnGwNlfWAj4U/FDX4UlRhMXgTFdwzacAEdg/JMkP22HA",
	"4n0McJZaTBWUeX3LLEaZpDuGtNye6QhluaZvC2UYJBsdFbynBTvM46wdUnFvsEW8wjbf+F3e7GCdvaV1",
	"hSXzMc1P8s2ujvjNWzSwLzZH2aATyJmfoaj3dY58+6ireYdfozq/dSSuW7GXY6ldEOBwZzNJDlASD+U9",
	"LY07gpFfbhB2tL4QyNb6UZQ8fnewVALQKtuICC0zc9jTaUW5ppUcxO+0wKIYiaP9Dcr2EmQuZSFUpEVG",
	"NezjSJOC6k7tZLYwbr4041uT+qtDoh+zvUvjFS26l9T9q3SzqecFKbnRaujhmGasdwgc+IZh5wlCV8Yu",
	"Goc4gkdb9swh1v+apy3EaDewXXg762kq03jfRLizHb+l1rOLnP/KiBnWDFMitNiwzS5Z3RJEqXl9cAPC",
	"yNxwyyyKLDf5QZo+JohCb5mgDcA0FoL/ODOdtqYQHWOxmAbLtMOJhR8zr/ALSmy36fl+bXW8V/7xP2XB",
	"+06764fbwVkchfGPtnbdQLSxbRdEm2pi17XBM1aXXbtJFTT8uLrdxDs4MCaBUHvDaKluzSlgs8WGNCKs",
	"RwN2aKSR6Qptrbcb3fu/yvDatp2dnFajP6rSAS2puMb7zpv2KdEDyPCa/BnUeCXecSkAHACZWqK9gazY",
	"fcfQlGLcTz2a1TY5AHRdm2Z1UK9sbEdIV7e5HtW8zeP1R6JBmh5Jac9p+qTK9tbb79t2MYVdjnW5PKPG",
	"aTDbCwy7bNPJDUqWofXWwTQ1sQ3qJEboYjQHsbKnF+yqqZcp2PVFBbtqomIKdn1pwa7dgTEFu/YY7Fqn",
	"9CnYtbdg14LKpwjBKUJwlBGCmn76DCIETyEWapgwQl0MTGGE7tdFpjDCcw4j1LT+FEZ4umGEJxkEeLxz",
	"RVOk4MlHCnZ0YlOk4BQp2DPEpkjBkUYKttnRaaSgbWjgFAo4eChgA15SiEYdcUPboRtuI1tzqrE2Fa1t",
	"CNRIITqBKE7aJv0gTqVVpxzDWdnqOlvST6bbJE6Z1FcBqelXEEZw8REhdnhKWwNN9OP3BIdL/mqV6Oyb",
	"RFZ2bgt6gMpC03wjmCYZCihtuYoQBIv9FcaAzMaPK+UtF8QLUw8wQTzAJSHCvQeLnEqkx5XtWwwyvE5Q",
	"+G+48B5DvPYeURKv1GhImgKaxld9JBPV9Jbb3iY6ZSfWEfR2LknxEvtUp8FyxAtj/N/v/KqcwjwJsV5h",
	"nGAQaZU96H/sxZlMvixTH/Mm63TIKy9IoggyJCdLj78qzcCWXI3M0KRlVm2dh1hADMIopT0L8PXMQ5Fc",
	"QKM3kzKR9UF3K5t4iDr34BCymaBDvHtwosCFLSSpaNIT/WivnZGPS/qmU/VwHANKEU0sWDhAkRvSeQfn",
	"ltLp3ythVHnA4YzwpG9+NgHSB55k9GXU6SKJfdAcRux9YTlnVuvY+U58sOZNNrZCyu6hwGTyHN1BtIPo",
	"uLTuLtlAL+QCeCmVwINUBHZDBojCxdfkB4yHIuwrGEMEMPQS5FFpyP/ZXqw4a+TcAV5leP2VfaIs2icu",
	"0IJJwcgw/LkNEV3JotOI3xM8/BQiTnBh+kCEkhz+yLMHmu6ciyRl4EL9mmTxUGoiAi3J9312JGYZRtA5",
	"nHi9tYGxGUIwxnksORth/fyQTj7rcy5bXrXegK9E8SZLDwg2Uimsi0FFnV/qjixqm444vChrLy1okHzT",
	"+YCkqstkVFIPNzKDlw2s7HQ7h6NStx4e1djKGkCWooT7lFoEemvIHlcF47a3gW6x9dkEvofXuQUstLW9",
	"AU4WhpTqTALbX5xjKCjMaHFJqaDeNbyYhb9R2NR2qbDejiKXrXs/I2rWc+8yJq7OrYjqnIBOVqYPvLw5",
	"Lw18ubJMACgMW4/BQdclGhYFz9qqFgsahYQK6uxFxC2G0IU1w7w2bZPKyMkXZ09VWyZGVd6v7ahSu84H",
	"C8VuOoNFfj6lZrT4kuFtZkb/tXDG6q9Y060UPkpW9EpUPpGR6eNrhJfhrW760Yhgj5SW6W+7yWjfI229",
	"qUIa7b8pFdT2pbxV7rdtFYVpbd3mR31qEel+oawp+KQoX4U8Y9nvrlXY+He/DXrvee+X16JNHLpyjjdR",
	"sZsZkqjtzFAn5w/auMvVegzk5fL1MzsSwezO0Scq1kOfjOGuQV/xWEdvworzNJ1E5ncet0hOTwv0Jjg/",
	"ktNJbnbHbYvYZ9bdReO7n0g5TnfP5TPp7vLt2u7uKrLmJCe7JtE1tQs4/cfXqIkJ1XWQU7CfvpJPJ2xO",
	"DZi7QckuXLjpS1tRVxed0Td6UVoujomSQIbXXl7F88y/hUsE0/Vxg2v4RxuDa+6yIIBp+htMU7CCR4sZ",
	"uYlAGHsp+7i34V9/nvm0McPGIMWQxm0RPfGDIDLCcIAV9IboxhFFa+q04igL5/npqNQvnhQ6rxGjcVge",
	"2n5WI4x6Kkra0LlH4A3SCcug+uFyjBpE/ZLAIdifZH1/sGDVMBksdFaGy5Imw5T2uj8gCpf7XkYrVnWV",
	"SL9BDOhhQTLXWUNGNngML1/L2QB2RFCOehW784QFpN9BEVukga9wuGHngMHiSxztD65/MU301FxdGUvk",
	"tTJkZr6inKr4RjKO998q9YR2t4bJN6vapsRaHibe8H9LFjAiQERwi2AKY6zEFzKf61ITzzNfI4kOvexV",
	"JFeAcbYhTWSqEvlzRQLg+4ovuE0N3Jz11zBNvPM8wAQ99Ki9jXHylCQqZhoR9VnougOsPGagWcNdIh3v",
	"DSlL7X3m32iQ/U5YoIvsAn4dZN+icAcw/P4D7t207Y7LUGrbx+JN9a3tUm+2H7Kv119kadi3nGeB7rfj",
	"uc//rCLnY8HKTaDhje8IHR4XXUZQXcJZi1FgBxCLlK30/O29SGmsdyfEblIJU29XjVBznpxC/uBSl/Wx",
	"0/YouypfwjI5qGLLrMoyQcwCRhDDylYAjJGaqTAXzIWTYrV9X4TpNgLVHpoXabfRl4fcCfGXWPFCy/OR",
	"teiAZXyRWKz4nqcAYX/zS3hEhhcZTZXPjr/L7C/8b3Fvj6wpDxqRu+/KZqiyUcLnWLJG+kdez8HNR2Wn",
	"XavRMVzAQxtjLSGtZQ3ihU0eN1pJexvJbLlTQlPRw3d1jl/CTatnK+DUy/jsqH8u4ENh4FWoNyzyHWOn",
	"WpOC0+yKbVvaUlljigHO0spHsrt22W01yqXrepLxUYFUCZ2fRIKBVmQqHm9U/PVIGcVdWuQTV2W1NW7y",
	"DWQ9o3hKCivnxumWgYKNn+0GpS8wq4oMXvKGYXEHnhjKk0c2dvKfWd7BhhGxw36toQdxAoZSLjkiRUGk",
	"+wPEeDfSziXk5AHiOrA5YDSlizG6nSvufplG0z0ZjsazoLAcp98Y83ymFtMLMu6EgT/z6en4DlMMYwgr",
	"9LRTeLl5HuqjLapdK+Au9ZPCnkGpq9Dd5DDwRLI+uotEk4CkHogXYh+BnvU67DmsmPbaQr4pUrUKssm3",
	"9MsKrhjbDnmL2CxqIa0FbVRoix/j0HEpCSvaMBnX6bLW3R6qbFv7vKJ8Sye9vShLMK3o8otQQEmLIuuF",
	"jhp56ovKuf2uactC4esyM69G0Qyvu+0kXmV4zRxBZd3d0rc7sfjQeYRtYkKcaFF31Okn4fE2R7fV+oNx",
	"+IQTHbpYXXaR+pk7kxvpBqq8ifb0oM+JgfWuw3HYQANnlkGIOqoshAWWFKoscbWvtKBwxz7aruMgibUK",
	"6u9nK3oRTSkp5rZADltVU1jqPOqi1ahJvvPttj53xipvTFPxcqsauYwYtsCthRaxFj7ejdD+VxBqbVlz",
	"t5prr3grjFCypDwcpmNLZTtD83YJZx0/ia3Woo/WOU933fhO2as6RMlXpVWtKFF2ujpetNZ8h1rD9WjO",
	"NkUark8q74x0SLllc6WanLCyWErjPhCqa4baWUNML2obzwbQuNa+Bro5zU04zSC3r3H/9DV3K7X+iSup",
	"i5fip2HLFL/FF5iv/fKicbZ5yDc+5D5lp9XghuvS6m9Cc33JWZWRvDuh1Vpb6ccAKQeAqwKArDnATkhS",
	"PzjKdtVG8xTR3rFZ5JVZbQLYY012XC9AHUJfWXviF611Arv95WxlYzLFl4z5LdWc3eRxQGO6a21a5rVf",
	"5j3xVdaRLXB+S6unnxJ7up2NLsz1spqwVZYHKwbaZf+zdJos/oq1r1JT+tE7+dHKlx4l4qoj6B676xZ3",
	"WHXkiAWGSKXdHwCkNppI3SfRxkifWwYvMtRnGLRUhxFRvDTsiChBCdWxESDyUoyyAGcIEvCk6+RRiYrg",
	"sRIl8CxDGFWf2qkNdFD9oCJW+RwqnShlKMT7O6JL9sH3IA0DeWiTUib6i3x9jTF1Re8hQMw6eUn2U6no",
	"3yHgowHhYv6a/Sn4qf9/r65url/9Q53jgG34D5GMKYyXiQiIAAy5nNL4K/gTBv/7CB/W4XYbwtcLmNdK",
	"tP4TEsHpCj0VJr2cz+k7r2Hml4/h3lx7C7gM41De68grmXmAXSITBkqSTcJ8Ca5pyWvwgR4CDiA/E8vF",
	"uNqCYA1fvX19UZDkcj5/fHx8DejT1wlazfmr6fzz9YePv999JK+8XuNN5Kvxj0we78sWxlc31/7M30GU",
	"MvHfvL54ffEKRNs1eEPj+7cwBtvQv/T/Rp4QaAFOZudk6J/Lc4jbJKVqJcCjYLle+JfsXhw+hvLTv+LK",
	"0ar+mBcJSSPEy/SVw1s8315c1FfDy82L9/I8z/x3F2/a36q64PJ55v+XzherblFSu4l/+ef9zE+zzQag",
	"PbFthtfkQwGZAfEj897DvnCh5czHYJUSF0Pp1j2pj6m/kPtlBassEKZYZpvxTXRYzlXT1J5fIQ7W7HT1",
	"DoSUkh4mdalvDmJpV2obw9OySEB1bcphLhldQJQvoLKGg1QYl4nYPj+P7j3AZYKgF2KedaZJazt5prtS",
	"aezIt7HODk7qj0FlTCQ28oV4L7JNgLwrEdfKNvPq1fYkEPk8D0AUPYDgR60OP/ACyr79FiCwgZj2vT+r",
	"25QXoYkJxMs35Gf/eab10h0GGHZ640OyEC/cHxj8bxf/c3hGD/7EczpCFHIsHLKBhsw/IttPfhnau4t3",
	"jr4iNFa8H+vdm7eO6s9zVNABG0Thv2EeZpID1sGnrqsvt2vwpAJz9GprgFJIvSolF3ChBsNoAFxk3qh3",
	"rPS5S3j3h71buAgRDDBRDFGJarC+sTckILiRaJuRogM9SORX2dTyBPXW7M4QuIMABet/ZhDttd3VDViF",
	"8epzuAlxx3e+0Aw5NVDTGtcqrwinCPpb+8sVdxi6G94YhQJRJG7Szu3Jjh4zg+aRr/UGZUWOYcq7BOEP",
	"SZRt4k6vfEFdBsRB8VLMYjcypORkeyVsLjDDVgfvn2c1c7QPdG1JrGN1nqUpr5vP04oXSNvp9t3btxqs",
	"9iArljubMH14wIvho1zzPbRF3n/nT2Jp8Zmt+tAMASUj/UJ/F0bq1p3ZuUYL6B9kuqTm0XjtimZEYBwr",
	"t46FYdnY3vqqcpGrO7MyA3jAS7cwCJdhUGvbWbU/vlsnjwPZz2nvGtII3N/p2ICfnCra4BtdT3ZkhY5+",
	"Uvn2SPykkSUH9q5MizoQqHSxc/W4i4av/RUlm3zF/riAUY+j/4ISC9RU+e9jw+bNW70PFq4rd4ibOArj",
	"H3lOe2+Jkk1XFy4ptciLa4WJ2cTDjV1gKTHx6Q9qUSRT98rr8snsvmGIq6TzrAdRLX1NxuC7biDanL/v",
	"uooQBIt9yX8NPF4yeRS/14yoKtJE7BcW/N4Ep0GGwnFQLwGkLUQblui7GwOT6bM16RePVRsAcOTLE/Fy",
	"RbzoxrYV66JZ5CfKNRDlKubwPwu+RV2RO7I1rKeaaNYYaBb1clYca0LRS2ZXLApYi1rxQwnzFEbL2l3A",
	"u3XymKczMQr+Iu+OcduLt1/eOcMv9dhClCYxiDwQBEnGssJy7YljHC3rw6q+jBZ5eQXm/cit1seB7H2S",
	"IS95jKXdwpgFdPPA4pKNVIzLxAyVIKdBZjYoL16dNgqM30KMQrhjMaExPbsNF+qNNQ0qkyvcTRGhZguY",
	"Ez+u7q4uVyN7DA7Y5nZX0EPXdNoCBG6U5OpGIQK8AiuvWLju/3zCBPJjP2WrqH2ahvTxkyUa4QKmy3Vi",
	"pW0KGXAcMtBk51kjgRvKjo773KiCB5qt0UwQXdnDlF+OypOeRyCBkROeq+d0NBjXh8KxHhv4TGuZNg5N",
	"scN5rWkqeDy4xb+M60IKR03+V7g079jur0YSa0eYV/WSXWKBkhaucGoBjpZ3nD8VUuHo01dniGt3Mvmn",
	"Ju7rmvsq90t29kttzPjkIDIuv9MXwbYxeTv9HtzoNtx9Grx65/Pm6Ksfz5TEoVp0/6NafuL7w/F91RDn",
	"RfhVSGoAXU2aq0n5i3frDsr5FVGs/aZS18T6Oesv3tXahh49Pzl/KqZb1mf+7oDX7m+Ub03c3zX3V6+N",
	"7u6i2tj/CcJkZC6orwmAnd3bpwAjsLzNJGAazY4wDbDBoOEAN2fJw9P6vGh1pEZe138KWG5uhEtEsxon",
	"lsZZGoOXl8QeiI9D2QSi50/sP6Y0bjB868yeiWgT93PF/Wow2jcPOCmEOSIPk8Ptk0i4ArKp681vB+nG",
	"JcTdGKdMJWgbXAKbVjgRCU4kKLSOyiMYmOdP9F9TFjEUstvfoZJNHMIRh6iBZ98U4oTg5YhATG62N/rg",
	"CsMNDnenvRu5G+0+5Bi2CHdnuDm4a9wWVNOJ1oBL3FSgB7C89LTZPSCSpRnODM2yXTruUxTW3uaWLwy9",
	"yS0EsR+RRU3TjEdscCtGbsaMjk+cP8n/d5vLOIKaBssUX5omJc43teUlPl2dUeuG9mnBY1TOpretbENr",
	"G7iReZJhPmGtRMoX+vikscKacA5AYS0ZCinbDLHr2yqBckOeTkPOqUKLmq9fZOV3SGjxll9RsjHLnm1P",
	"kXkN9PNTVj5XWfkoAFhaPoPD6crU3/CqkWna727a7/SGkpFM+ZmDKuToazm235Cnj+vpazIGHzbl6xtD",
	"vj7m/9pRVZ+0T7XpBKkXnbyPgSnP3meWUSKMdzDGCeK3N7cNvNdK8Wn0HW70VexwXkOwgkeNeYcovddd",
	"dr+WLwy87C4FsV52lzVNy+582T1UjNyMGS2/OH+Sr3Rad3eFtXbnIr80LYK4XneXpu/sjdrW3U8MHqPy",
	"Nn2tu5tbuz3ma2B72wRvTYNVz8fGTHFXP34huE3SUJ/Y36rlJ2Y/HLNXDXFe1F6FpAbOZXFtcn+bvzEw",
	"u88lcZA2U1Q18XvO75Fq5xbg6HnI+VP+UieO7wxy7X4m/9TE8l2z/Nz63R1TG88/OYiMy/H0RfVtTN5O",
	"9gc3ug3dn0av3gm/OfoaBrQsjvlth61snxediP6ARJ/Z4Mw4PmuUDqhpSW1qz0oPTeupFPZOkVYz0XlB",
	"54VtG0DS6vXmT+w/3di7C1RpjND0MxNrd87aqV67+ZpWtn4qkBiPL+mNoRuYV4OZD2VgK0Y+DTy9MfHO",
	"KKsfi9JgDRdZpLfificLTyx8OBYurXBePFwiUQPYoqwuFxcqG5qNCzms3aKoaGLkIuVfbuFGuGh4wvmT",
	"+G8nZu4IYxpOi39oYueu2bmwe1cP1MbQTwoaY/IwffF0U0O3c/VBTW3D16ehqVfOboa4+tEKw802AliP",
	"t3+VhSfePhxvl1Y4L94ukagBbVFWl7cLlQ3N24Uc1s5RVDTxds7bcW7hRrhoeML5k/hvJ97uCGPt7kR8",
	"aOLtrnm7sHtXD9TG208KGmPyMH3xdlNDt/P2QU1tw9unoalX3m6GuM6j1TzN0A7udbOYC1vd0bdOAbMN",
	"4jtDLqtuolZiSZSqg6bW7Y9mCeDOn9h/jKjXMDDWmGZSuSa+5oqvVQCyv5H8dEDlYvifXGlvVMAatd2d",
	"6g5kEe5KBv4gL50sF6DSO8MvrW1iAvIakyzCfRMBhtn5E/3XiAYMAmCdSyWyaLr3zN2dJSUs9scBTgVR",
	"LhjA5ED7uqDEErD1rjRL+eEX7eSi39JBjhTwGsjXp9SirlKLEuu7yCz6LZ3ORQ27s0stcF67utQ1uU4r",
	"Orz3mpKKjiGpKPV8DnKKTnh66RlFKZL0E4rqnDf+FCUPIDI9bjwNkxXmLKjU0TjZ1zlgBTua533V1vnG",
	"y2FqLeYeRa3FFSEZ0ULWijavfPy2cNDJ6HjtgRG7dfrptGyfp2UVO6drgOBC83jswCbtoyuO8LBri3Ua",
	"1uoc28doDW28XvecjqrWeWq5/lVLxszWNiYSVmE+l4sUzskX2IEwAg8RY/QqCSN/t1IwPhE0pF7kbfPO",
	"T94+Q6qVpYV+y80ge+38ifyjx62Mpul0dj0xKseMqtqqDSRqENu57FKjokx16m9gSU4MYMSNxuMWz4ML",
	"aXtU7VsHiY7Nrxy0BUkK0XTZYF+XDXZy1IIpG94xqABh2gc0HrBeyO2CtUNYwwYgUY/ppYKuvNS08zeq",
	"6wQ7MSG26SdNOWFouj+QbvfpMyoRf6XPqW7kVuLRscY/PfEqV7yKW9+CWd0I/EzcaghuJdR/XuxKOCVH",
	"/Gp4jzVxrDFwLOHtzFnWhKSXzrQEhlq5FnkZBhkK8Z4i5O8QLCDyL/+8J0PEewiQ8hdIw4D+cU/eIiIw",
	"WGUo8i/9Ncbb9HI+x2j/egV/wuA1zOZgG853b/zn++f/DwAA//+9Kf2Um8ABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
