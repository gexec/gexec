// This file is auto-generated by @hey-api/openapi-ts

export type AuthTokenReadable = {
  readonly token: string
  readonly expires_at?: string
}

export type AuthVerifyReadable = {
  readonly username: string
  readonly created_at?: string
}

/**
 * Model to represent profile
 */
export type ProfileReadable = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
  readonly admin?: boolean
  readonly active?: boolean
  readonly created_at?: string
  readonly updated_at?: string
  readonly auths?: Array<UserAuthReadable>
  readonly groups?: Array<UserGroupReadable>
  readonly projects?: Array<UserProjectReadable>
}

/**
 * Model to represent profile
 */
export type ProfileWritable = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
}

/**
 * Model to represent event
 */
export type EventReadable = {
  user_id?: string
  user_handle?: string
  user_display?: string
  project_id?: string
  project_display?: string
  object_id?: string
  object_display?: string
  object_type?:
    | 'credential'
    | 'environment'
    | 'execution'
    | 'group_project'
    | 'group_user'
    | 'group'
    | 'inventory'
    | 'project_group'
    | 'project_user'
    | 'project'
    | 'repository'
    | 'runner'
    | 'schedule'
    | 'template'
    | 'user_group'
    | 'user_project'
    | 'user'
  action?: 'create' | 'update' | 'delete'
  attrs?: {
    [key: string]: unknown
  }
  readonly created_at?: string
}

/**
 * Model to represent event
 */
export type EventWritable = {
  user_id?: string
  user_handle?: string
  user_display?: string
  project_id?: string
  project_display?: string
  object_id?: string
  object_display?: string
  object_type?:
    | 'credential'
    | 'environment'
    | 'execution'
    | 'group_project'
    | 'group_user'
    | 'group'
    | 'inventory'
    | 'project_group'
    | 'project_user'
    | 'project'
    | 'repository'
    | 'runner'
    | 'schedule'
    | 'template'
    | 'user_group'
    | 'user_project'
    | 'user'
  action?: 'create' | 'update' | 'delete'
  attrs?: {
    [key: string]: unknown
  }
}

/**
 * Model to represent output
 */
export type OutputReadable = {
  execution_id?: string
  execution?: ExecutionReadable
  readonly content?: string
  readonly created_at?: string
}

/**
 * Model to represent output
 */
export type OutputWritable = {
  execution_id?: string
  execution?: ExecutionWritable
}

/**
 * Model to represent project
 */
export type ProjectReadable = {
  id?: string
  slug?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent project
 */
export type ProjectWritable = {
  id?: string
  slug?: string
  name?: string
}

/**
 * Model to represent credential
 */
export type CredentialReadable = {
  id?: string
  project_id?: string
  slug?: string
  name?: string
  kind?: 'empty' | 'shell' | 'login'
  override?: boolean
  shell?: CredentialShell
  login?: CredentialLogin
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent credential
 */
export type CredentialWritable = {
  id?: string
  project_id?: string
  slug?: string
  name?: string
  kind?: 'empty' | 'shell' | 'login'
  override?: boolean
  shell?: CredentialShell
  login?: CredentialLogin
}

/**
 * Model to represent credential shell
 */
export type CredentialShell = {
  username?: string
  password?: string
  private_key?: string
}

/**
 * Model to represent credential login
 */
export type CredentialLogin = {
  username?: string
  password?: string
}

/**
 * Model to represent repository
 */
export type RepositoryReadable = {
  id?: string
  project_id?: string
  credential_id?: string
  credential?: CredentialReadable
  slug?: string
  name?: string
  url?: string
  branch?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent repository
 */
export type RepositoryWritable = {
  id?: string
  project_id?: string
  credential_id?: string
  credential?: CredentialWritable
  slug?: string
  name?: string
  url?: string
  branch?: string
}

/**
 * Model to represent inventory
 */
export type InventoryReadable = {
  id?: string
  project_id?: string
  repository_id?: string
  repository?: RepositoryReadable
  credential_id?: string
  credential?: CredentialReadable
  become_id?: string
  become?: CredentialReadable
  slug?: string
  name?: string
  kind?: 'static' | 'file'
  content?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent inventory
 */
export type InventoryWritable = {
  id?: string
  project_id?: string
  repository_id?: string
  repository?: RepositoryWritable
  credential_id?: string
  credential?: CredentialWritable
  become_id?: string
  become?: CredentialWritable
  slug?: string
  name?: string
  kind?: 'static' | 'file'
  content?: string
}

/**
 * Model to represent environment
 */
export type EnvironmentReadable = {
  id?: string
  project_id?: string
  slug?: string
  name?: string
  secrets?: Array<EnvironmentSecret>
  values?: Array<EnvironmentValue>
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent environment
 */
export type EnvironmentWritable = {
  id?: string
  project_id?: string
  slug?: string
  name?: string
  secrets?: Array<EnvironmentSecret>
  values?: Array<EnvironmentValue>
}

/**
 * Model to represent environment secret
 */
export type EnvironmentSecret = {
  id?: string
  name?: string
  kind?: 'var' | 'env'
  content?: string
}

/**
 * Model to represent environment value
 */
export type EnvironmentValue = {
  id?: string
  name?: string
  kind?: 'var' | 'env'
  content?: string
}

/**
 * Model to represent template
 */
export type TemplateReadable = {
  id?: string
  project_id?: string
  repository_id?: string
  repository?: RepositoryReadable
  inventory_id?: string
  inventory?: InventoryReadable
  environment_id?: string
  environment?: EnvironmentReadable
  slug?: string
  name?: string
  description?: string
  playbook?: string
  arguments?: string
  limit?: string
  executor?: string
  branch?: string
  allow_override?: boolean
  surveys?: Array<TemplateSurvey>
  vaults?: Array<TemplateVaultReadable>
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent template
 */
export type TemplateWritable = {
  id?: string
  project_id?: string
  repository_id?: string
  repository?: RepositoryWritable
  inventory_id?: string
  inventory?: InventoryWritable
  environment_id?: string
  environment?: EnvironmentWritable
  slug?: string
  name?: string
  description?: string
  playbook?: string
  arguments?: string
  limit?: string
  executor?: string
  branch?: string
  allow_override?: boolean
  surveys?: Array<TemplateSurvey>
  vaults?: Array<TemplateVaultWritable>
}

/**
 * Model to represent template survey
 */
export type TemplateSurvey = {
  id?: string
  name?: string
  title?: string
  description?: string
  kind?: 'string' | 'number' | 'enum' | 'secret'
  required?: boolean
  values?: Array<TemplateValue>
}

/**
 * Model to represent template value
 */
export type TemplateValue = {
  id?: string
  name?: string
  value?: string
}

/**
 * Model to represent template vault
 */
export type TemplateVaultReadable = {
  id?: string
  credential_id?: string
  credential?: CredentialReadable
  name?: string
  kind?: 'password' | 'script'
  script?: string
}

/**
 * Model to represent template vault
 */
export type TemplateVaultWritable = {
  id?: string
  credential_id?: string
  credential?: CredentialWritable
  name?: string
  kind?: 'password' | 'script'
  script?: string
}

/**
 * Model to represent schedule
 */
export type ScheduleReadable = {
  id?: string
  project_id?: string
  template_id?: string
  template?: TemplateReadable
  slug?: string
  name?: string
  cron?: string
  active?: boolean
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent schedule
 */
export type ScheduleWritable = {
  id?: string
  project_id?: string
  template_id?: string
  template?: TemplateWritable
  slug?: string
  name?: string
  cron?: string
  active?: boolean
}

/**
 * Model to represent runner
 */
export type RunnerReadable = {
  id?: string
  project_id?: string
  project?: ProjectReadable
  slug?: string
  name?: string
  token?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent runner
 */
export type RunnerWritable = {
  id?: string
  project_id?: string
  project?: ProjectWritable
  slug?: string
  name?: string
  token?: string
}

/**
 * Model to represent execution
 */
export type ExecutionReadable = {
  id?: string
  project_id?: string
  template_id?: string
  template?: TemplateReadable
  name?: string
  status?: string
  debug?: boolean
  playbook?: string
  environment?: string
  secret?: string
  limit?: string
  branch?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent execution
 */
export type ExecutionWritable = {
  id?: string
  project_id?: string
  template_id?: string
  template?: TemplateWritable
  name?: string
  status?: string
  debug?: boolean
  playbook?: string
  environment?: string
  secret?: string
  limit?: string
  branch?: string
}

/**
 * Model to represent group
 */
export type GroupReadable = {
  id?: string
  slug?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent group
 */
export type GroupWritable = {
  id?: string
  slug?: string
  name?: string
}

/**
 * Model to represent group project
 */
export type GroupProjectReadable = {
  group_id: string
  group?: GroupReadable
  project_id: string
  project?: ProjectReadable
  perm?: 'owner' | 'user' | 'admin'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent group project
 */
export type GroupProjectWritable = {
  group_id: string
  group?: GroupWritable
  project_id: string
  project?: ProjectWritable
  perm?: 'owner' | 'user' | 'admin'
}

/**
 * Model to represent user
 */
export type UserReadable = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
  admin?: boolean
  active?: boolean
  readonly created_at?: string
  readonly updated_at?: string
  readonly auths?: Array<UserAuthReadable>
}

/**
 * Model to represent user
 */
export type UserWritable = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
  admin?: boolean
  active?: boolean
}

/**
 * Model to represent user auth
 */
export type UserAuthReadable = {
  provider?: string
  ref?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user auth
 */
export type UserAuthWritable = {
  provider?: string
  ref?: string
}

/**
 * Model to represent user group
 */
export type UserGroupReadable = {
  user_id: string
  user?: UserReadable
  group_id: string
  group?: GroupReadable
  perm?: 'owner' | 'user' | 'admin'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user group
 */
export type UserGroupWritable = {
  user_id: string
  user?: UserWritable
  group_id: string
  group?: GroupWritable
  perm?: 'owner' | 'user' | 'admin'
}

/**
 * Model to represent user project
 */
export type UserProjectReadable = {
  user_id: string
  user?: UserReadable
  project_id: string
  project?: ProjectReadable
  perm?: 'owner' | 'user' | 'admin'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user project
 */
export type UserProjectWritable = {
  user_id: string
  user?: UserWritable
  project_id: string
  project?: ProjectWritable
  perm?: 'owner' | 'user' | 'admin'
}

/**
 * Model to represent auth provider
 */
export type ProviderReadable = {
  readonly name?: string
  readonly driver?: string
  readonly display?: string
  readonly icon?: string
}

/**
 * Structure of general project backup
 */
export type Backup = {
  meta?: {
    name?: string
    version?: string
  }
  credentials?: Array<{
    [key: string]: unknown
  }>
  repositories?: Array<{
    [key: string]: unknown
  }>
  inventories?: Array<{
    [key: string]: unknown
  }>
  environments?: Array<{
    [key: string]: unknown
  }>
  templates?: Array<{
    [key: string]: unknown
  }>
  schedules?: Array<{
    [key: string]: unknown
  }>
  runners?: Array<{
    [key: string]: unknown
  }>
}

/**
 * Generic response for errors and validations
 */
export type Notification = {
  status?: number
  message?: string
  errors?: Array<Validation>
}

/**
 * General structure to show validation errors
 */
export type Validation = {
  field?: string
  message?: string
}

/**
 * Search query
 */
export type SearchQueryParam = string

/**
 * Paging limit
 */
export type PagingLimitParam = number

/**
 * Paging offset
 */
export type PagingOffsetParam = number

/**
 * Sorting column
 */
export type SortColumnParam = string

/**
 * Sorting order
 */
export type SortOrderParam = 'asc' | 'desc'

/**
 * An identifier for the auth provider
 */
export type AuthProviderParam = string

/**
 * Auth state
 */
export type AuthStateParam = string

/**
 * Auth code
 */
export type AuthCodeParam = string

/**
 * A project identifier or slug
 */
export type ProjectParam = string

/**
 * A credential identifier or slug
 */
export type CredentialParam = string

/**
 * A repository identifier or slug
 */
export type RepositoryParam = string

/**
 * A inventory identifier or slug
 */
export type InventoryParam = string

/**
 * A environment identifier or slug
 */
export type EnvironmentParam = string

/**
 * A secret identifier or slug
 */
export type SecretParam = string

/**
 * A value identifier or slug
 */
export type ValueParam = string

/**
 * A template identifier or slug
 */
export type TemplateParam = string

/**
 * A survey identifier or slug
 */
export type SurveyParam = string

/**
 * A vault identifier or slug
 */
export type VaultParam = string

/**
 * A schedule identifier or slug
 */
export type ScheduleParam = string

/**
 * A runner identifier or slug
 */
export type RunnerParam = string

/**
 * A execution identifier or slug
 */
export type ExecutionParam = string

/**
 * A group identifier or slug
 */
export type GroupParam = string

/**
 * A user identifier or slug
 */
export type UserParam = string

/**
 * The redirect token to authenticate
 */
export type RedirectAuthBody = {
  token: string
}

/**
 * The credentials to authenticate
 */
export type LoginAuthBody = {
  username: string
  password: string
}

/**
 * The profile data to update
 */
export type UpdateProfileBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
}

/**
 * The project data to create
 */
export type CreateProjectBody = {
  slug?: string
  name?: string
  demo?: boolean
}

/**
 * The project data to update
 */
export type UpdateProjectBody = {
  slug?: string
  name?: string
}

/**
 * The project user data to permit
 */
export type ProjectUserPermBody = {
  user: string
  perm: string
}

/**
 * The project user data to unlink
 */
export type ProjectUserDropBody = {
  user: string
}

/**
 * The project group data to permit
 */
export type ProjectGroupPermBody = {
  group: string
  perm: string
}

/**
 * The project group data to unlink
 */
export type ProjectGroupDropBody = {
  group: string
}

/**
 * The runner data to create
 */
export type CreateProjectRunnerBody = {
  slug?: string
  name?: string
  token?: string
}

/**
 * The runner data to update
 */
export type UpdateProjectRunnerBody = {
  slug?: string
  name?: string
  token?: string
}

/**
 * The credential data to create
 */
export type CreateProjectCredentialBody = {
  slug?: string
  name?: string
  kind?: string
  override?: boolean
  shell?: CredentialShell
  login?: CredentialLogin
}

/**
 * The credential data to update
 */
export type UpdateProjectCredentialBody = {
  slug?: string
  name?: string
  kind?: string
  override?: boolean
  shell?: CredentialShell
  login?: CredentialLogin
}

/**
 * The repository data to create
 */
export type CreateProjectRepositoryBody = {
  credential_id?: string
  slug?: string
  name?: string
  url?: string
  branch?: string
}

/**
 * The repository data to update
 */
export type UpdateProjectRepositoryBody = {
  credential_id?: string
  slug?: string
  name?: string
  url?: string
  branch?: string
}

/**
 * The inventory data to create
 */
export type CreateProjectInventoryBody = {
  repository_id?: string
  credential_id?: string
  become_id?: string
  slug?: string
  name?: string
  kind?: string
  content?: string
}

/**
 * The inventory data to update
 */
export type UpdateProjectInventoryBody = {
  repository_id?: string
  credential_id?: string
  become_id?: string
  slug?: string
  name?: string
  kind?: string
  content?: string
}

/**
 * The environment data to create
 */
export type CreateProjectEnvironmentBody = {
  slug?: string
  name?: string
  secrets?: Array<EnvironmentSecret>
  values?: Array<EnvironmentValue>
}

/**
 * The environment data to update
 */
export type UpdateProjectEnvironmentBody = {
  slug?: string
  name?: string
  secrets?: Array<EnvironmentSecret>
  values?: Array<EnvironmentValue>
}

/**
 * The environment secret data to create
 */
export type CreateProjectEnvironmentSecretBody = {
  kind?: string
  name?: string
  content?: string
}

/**
 * The environment secret data to create
 */
export type UpdateProjectEnvironmentSecretBody = {
  kind?: string
  name?: string
  content?: string
}

/**
 * The environment value data to create
 */
export type CreateProjectEnvironmentValueBody = {
  kind?: string
  name?: string
  content?: string
}

/**
 * The environment value data to create
 */
export type UpdateProjectEnvironmentValueBody = {
  kind?: string
  name?: string
  content?: string
}

/**
 * The template data to create
 */
export type CreateProjectTemplateBody = {
  repository_id?: string
  inventory_id?: string
  environment_id?: string
  slug?: string
  name?: string
  description?: string
  playbook?: string
  arguments?: string
  limit?: string
  executor?: string
  branch?: string
  allow_override?: boolean
  surveys?: Array<TemplateSurvey>
  vaults?: Array<TemplateVaultWritable>
}

/**
 * The template data to update
 */
export type UpdateProjectTemplateBody = {
  repository_id?: string
  inventory_id?: string
  environment_id?: string
  slug?: string
  name?: string
  description?: string
  playbook?: string
  arguments?: string
  limit?: string
  branch?: string
  allow_override?: boolean
  surveys?: Array<TemplateSurvey>
  vaults?: Array<TemplateVaultWritable>
}

/**
 * The template data to create
 */
export type CreateProjectTemplateSurveyBody = {
  name?: string
  title?: string
  description?: string
  kind?: string
  required?: boolean
  values?: Array<TemplateValue>
}

/**
 * The template data to update
 */
export type UpdateProjectTemplateSurveyBody = {
  name?: string
  title?: string
  description?: string
  kind?: string
  required?: boolean
  values?: Array<TemplateValue>
}

/**
 * The template data to create
 */
export type CreateProjectTemplateVaultBody = {
  credential_id?: string
  name?: string
  kind?: string
  script?: string
}

/**
 * The template data to update
 */
export type UpdateProjectTemplateVaultBody = {
  credential_id?: string
  name?: string
  kind?: string
  script?: string
}

/**
 * The schedule data to create
 */
export type CreateProjectScheduleBody = {
  template_id?: string
  slug?: string
  name?: string
  cron?: string
  active?: boolean
}

/**
 * The schedule data to update
 */
export type UpdateProjectScheduleBody = {
  template_id?: string
  slug?: string
  name?: string
  cron?: string
  active?: boolean
}

/**
 * The execution data to create
 */
export type CreateProjectExecutionBody = {
  template_id?: string
  debug?: boolean
}

/**
 * The runner data to create
 */
export type CreateGlobalRunnerBody = {
  project_id?: string
  slug?: string
  name?: string
  token?: string
}

/**
 * The runner data to update
 */
export type UpdateGlobalRunnerBody = {
  project_id?: string
  slug?: string
  name?: string
  token?: string
}

/**
 * The group data to create
 */
export type CreateGroupBody = {
  slug?: string
  name?: string
}

/**
 * The group data to update
 */
export type UpdateGroupBody = {
  slug?: string
  name?: string
}

/**
 * The group user data to permit
 */
export type GroupUserPermBody = {
  user: string
  perm: string
}

/**
 * The group user data to unlink
 */
export type GroupUserDropBody = {
  user: string
}

/**
 * The group project data to permit
 */
export type GroupProjectPermBody = {
  project: string
  perm: string
}

/**
 * The group project data to unlink
 */
export type GroupProjectDropBody = {
  project: string
}

/**
 * The user data to create
 */
export type CreateUserBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
  admin?: boolean
  active?: boolean
}

/**
 * The user data to update
 */
export type UpdateUserBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
  admin?: boolean
  active?: boolean
}

/**
 * The user group data to permit
 */
export type UserGroupPermBody = {
  group: string
  perm: string
}

/**
 * The user group data to unlink
 */
export type UserGroupDropBody = {
  group: string
}

/**
 * The user project data to permit
 */
export type UserProjectPermBody = {
  project: string
  perm: string
}

/**
 * The user project data to unlink
 */
export type UserProjectDropBody = {
  project: string
}

export type RequestProviderData = {
  body?: never
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string
  }
  query?: never
  url: '/auth/{provider}/request'
}

export type RequestProviderErrors = {
  /**
   * Provider not found
   */
  404: string
  /**
   * Internal server error
   */
  500: string
}

export type RequestProviderError =
  RequestProviderErrors[keyof RequestProviderErrors]

export type CallbackProviderData = {
  body?: never
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string
  }
  query?: {
    /**
     * Auth state
     */
    state?: string
    /**
     * Auth code
     */
    code?: string
  }
  url: '/auth/{provider}/callback'
}

export type CallbackProviderErrors = {
  /**
   * Provider not found
   */
  404: string
  /**
   * Failed to initialize provider
   */
  412: string
  /**
   * Internal server error
   */
  500: string
}

export type CallbackProviderError =
  CallbackProviderErrors[keyof CallbackProviderErrors]

export type ListProvidersData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/providers'
}

export type ListProvidersResponses = {
  /**
   * A collection of auth providers
   */
  200: {
    total: number
    providers: Array<ProviderReadable>
  }
}

export type ListProvidersResponse =
  ListProvidersResponses[keyof ListProvidersResponses]

export type RedirectAuthData = {
  /**
   * The redirect token to authenticate
   */
  body: RedirectAuthBody
  path?: never
  query?: never
  url: '/auth/redirect'
}

export type RedirectAuthErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type RedirectAuthError = RedirectAuthErrors[keyof RedirectAuthErrors]

export type RedirectAuthResponses = {
  /**
   * Generated token never expiring
   */
  200: AuthTokenReadable
}

export type RedirectAuthResponse =
  RedirectAuthResponses[keyof RedirectAuthResponses]

export type LoginAuthData = {
  /**
   * The credentials to authenticate
   */
  body: LoginAuthBody
  path?: never
  query?: never
  url: '/auth/login'
}

export type LoginAuthErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * Unauthorized with wrong credentials
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type LoginAuthError = LoginAuthErrors[keyof LoginAuthErrors]

export type LoginAuthResponses = {
  /**
   * Generated token with expire date
   */
  200: AuthTokenReadable
}

export type LoginAuthResponse = LoginAuthResponses[keyof LoginAuthResponses]

export type RefreshAuthData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/refresh'
}

export type RefreshAuthErrors = {
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type RefreshAuthError = RefreshAuthErrors[keyof RefreshAuthErrors]

export type RefreshAuthResponses = {
  /**
   * Refreshed token with expire date
   */
  200: AuthTokenReadable
}

export type RefreshAuthResponse =
  RefreshAuthResponses[keyof RefreshAuthResponses]

export type VerifyAuthData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/verify'
}

export type VerifyAuthErrors = {
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type VerifyAuthError = VerifyAuthErrors[keyof VerifyAuthErrors]

export type VerifyAuthResponses = {
  /**
   * Metadata of the auth token
   */
  200: AuthVerifyReadable
}

export type VerifyAuthResponse = VerifyAuthResponses[keyof VerifyAuthResponses]

export type TokenProfileData = {
  body?: never
  path?: never
  query?: never
  url: '/profile/token'
}

export type TokenProfileErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type TokenProfileError = TokenProfileErrors[keyof TokenProfileErrors]

export type TokenProfileResponses = {
  /**
   * Generated token never expiring
   */
  200: AuthTokenReadable
}

export type TokenProfileResponse =
  TokenProfileResponses[keyof TokenProfileResponses]

export type ShowProfileData = {
  body?: never
  path?: never
  query?: never
  url: '/profile/self'
}

export type ShowProfileErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProfileError = ShowProfileErrors[keyof ShowProfileErrors]

export type ShowProfileResponses = {
  /**
   * The current profile details
   */
  200: ProfileReadable
}

export type ShowProfileResponse =
  ShowProfileResponses[keyof ShowProfileResponses]

export type UpdateProfileData = {
  /**
   * The profile data to update
   */
  body: UpdateProfileBody
  path?: never
  query?: never
  url: '/profile/self'
}

export type UpdateProfileErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProfileError = UpdateProfileErrors[keyof UpdateProfileErrors]

export type UpdateProfileResponses = {
  /**
   * The current profile details
   */
  200: ProfileReadable
}

export type UpdateProfileResponse =
  UpdateProfileResponses[keyof UpdateProfileResponses]

export type ListProjectsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects'
}

export type ListProjectsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectsError = ListProjectsErrors[keyof ListProjectsErrors]

export type ListProjectsResponses = {
  /**
   * A collection of projects
   */
  200: {
    total: number
    limit: number
    offset: number
    projects: Array<ProjectReadable>
  }
}

export type ListProjectsResponse =
  ListProjectsResponses[keyof ListProjectsResponses]

export type CreateProjectData = {
  /**
   * The project data to create
   */
  body: CreateProjectBody
  path?: never
  query?: never
  url: '/projects'
}

export type CreateProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors]

export type CreateProjectResponses = {
  /**
   * The details for a project
   */
  200: ProjectReadable
}

export type CreateProjectResponse =
  CreateProjectResponses[keyof CreateProjectResponses]

export type DeleteProjectData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}'
}

export type DeleteProjectErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectError = DeleteProjectErrors[keyof DeleteProjectErrors]

export type DeleteProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectResponse =
  DeleteProjectResponses[keyof DeleteProjectResponses]

export type ShowProjectData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}'
}

export type ShowProjectErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectError = ShowProjectErrors[keyof ShowProjectErrors]

export type ShowProjectResponses = {
  /**
   * The details for a project
   */
  200: ProjectReadable
}

export type ShowProjectResponse =
  ShowProjectResponses[keyof ShowProjectResponses]

export type UpdateProjectData = {
  /**
   * The project data to update
   */
  body: UpdateProjectBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}'
}

export type UpdateProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectError = UpdateProjectErrors[keyof UpdateProjectErrors]

export type UpdateProjectResponses = {
  /**
   * The details for a project
   */
  200: ProjectReadable
}

export type UpdateProjectResponse =
  UpdateProjectResponses[keyof UpdateProjectResponses]

export type DeleteProjectFromUserData = {
  /**
   * The project user data to unlink
   */
  body: ProjectUserDropBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/users'
}

export type DeleteProjectFromUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectFromUserError =
  DeleteProjectFromUserErrors[keyof DeleteProjectFromUserErrors]

export type DeleteProjectFromUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectFromUserResponse =
  DeleteProjectFromUserResponses[keyof DeleteProjectFromUserResponses]

export type ListProjectUsersData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/users'
}

export type ListProjectUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectUsersError =
  ListProjectUsersErrors[keyof ListProjectUsersErrors]

export type ListProjectUsersResponses = {
  /**
   * A collection of project users
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    users: Array<UserProjectReadable>
  }
}

export type ListProjectUsersResponse =
  ListProjectUsersResponses[keyof ListProjectUsersResponses]

export type AttachProjectToUserData = {
  /**
   * The project user data to permit
   */
  body: ProjectUserPermBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/users'
}

export type AttachProjectToUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachProjectToUserError =
  AttachProjectToUserErrors[keyof AttachProjectToUserErrors]

export type AttachProjectToUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachProjectToUserResponse =
  AttachProjectToUserResponses[keyof AttachProjectToUserResponses]

export type PermitProjectUserData = {
  /**
   * The project user data to permit
   */
  body: ProjectUserPermBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/users'
}

export type PermitProjectUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitProjectUserError =
  PermitProjectUserErrors[keyof PermitProjectUserErrors]

export type PermitProjectUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitProjectUserResponse =
  PermitProjectUserResponses[keyof PermitProjectUserResponses]

export type DeleteProjectFromGroupData = {
  /**
   * The project group data to unlink
   */
  body: ProjectGroupDropBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/groups'
}

export type DeleteProjectFromGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectFromGroupError =
  DeleteProjectFromGroupErrors[keyof DeleteProjectFromGroupErrors]

export type DeleteProjectFromGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectFromGroupResponse =
  DeleteProjectFromGroupResponses[keyof DeleteProjectFromGroupResponses]

export type ListProjectGroupsData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/groups'
}

export type ListProjectGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectGroupsError =
  ListProjectGroupsErrors[keyof ListProjectGroupsErrors]

export type ListProjectGroupsResponses = {
  /**
   * A collection of project groups
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    groups: Array<GroupProjectReadable>
  }
}

export type ListProjectGroupsResponse =
  ListProjectGroupsResponses[keyof ListProjectGroupsResponses]

export type AttachProjectToGroupData = {
  /**
   * The project group data to permit
   */
  body: ProjectGroupPermBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/groups'
}

export type AttachProjectToGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachProjectToGroupError =
  AttachProjectToGroupErrors[keyof AttachProjectToGroupErrors]

export type AttachProjectToGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachProjectToGroupResponse =
  AttachProjectToGroupResponses[keyof AttachProjectToGroupResponses]

export type PermitProjectGroupData = {
  /**
   * The project group data to permit
   */
  body: ProjectGroupPermBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/groups'
}

export type PermitProjectGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitProjectGroupError =
  PermitProjectGroupErrors[keyof PermitProjectGroupErrors]

export type PermitProjectGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitProjectGroupResponse =
  PermitProjectGroupResponses[keyof PermitProjectGroupResponses]

export type ListProjectEventsData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/events'
}

export type ListProjectEventsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectEventsError =
  ListProjectEventsErrors[keyof ListProjectEventsErrors]

export type ListProjectEventsResponses = {
  /**
   * A collection of events for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    events: Array<EventReadable>
  }
}

export type ListProjectEventsResponse =
  ListProjectEventsResponses[keyof ListProjectEventsResponses]

export type ListProjectRunnersData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/runners'
}

export type ListProjectRunnersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectRunnersError =
  ListProjectRunnersErrors[keyof ListProjectRunnersErrors]

export type ListProjectRunnersResponses = {
  /**
   * A collection of runners for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    runners: Array<RunnerReadable>
  }
}

export type ListProjectRunnersResponse =
  ListProjectRunnersResponses[keyof ListProjectRunnersResponses]

export type CreateProjectRunnerData = {
  /**
   * The runner data to create
   */
  body: CreateProjectRunnerBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/runners'
}

export type CreateProjectRunnerErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectRunnerError =
  CreateProjectRunnerErrors[keyof CreateProjectRunnerErrors]

export type CreateProjectRunnerResponses = {
  /**
   * The details for a runner of a project
   */
  200: RunnerReadable
}

export type CreateProjectRunnerResponse =
  CreateProjectRunnerResponses[keyof CreateProjectRunnerResponses]

export type DeleteProjectRunnerData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/projects/{project_id}/runners/{runner_id}'
}

export type DeleteProjectRunnerErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectRunnerError =
  DeleteProjectRunnerErrors[keyof DeleteProjectRunnerErrors]

export type DeleteProjectRunnerResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectRunnerResponse =
  DeleteProjectRunnerResponses[keyof DeleteProjectRunnerResponses]

export type ShowProjectRunnerData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/projects/{project_id}/runners/{runner_id}'
}

export type ShowProjectRunnerErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectRunnerError =
  ShowProjectRunnerErrors[keyof ShowProjectRunnerErrors]

export type ShowProjectRunnerResponses = {
  /**
   * The details for a runner of a project
   */
  200: RunnerReadable
}

export type ShowProjectRunnerResponse =
  ShowProjectRunnerResponses[keyof ShowProjectRunnerResponses]

export type UpdateProjectRunnerData = {
  /**
   * The runner data to update
   */
  body: UpdateProjectRunnerBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/projects/{project_id}/runners/{runner_id}'
}

export type UpdateProjectRunnerErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectRunnerError =
  UpdateProjectRunnerErrors[keyof UpdateProjectRunnerErrors]

export type UpdateProjectRunnerResponses = {
  /**
   * The details for a runner of a project
   */
  200: RunnerReadable
}

export type UpdateProjectRunnerResponse =
  UpdateProjectRunnerResponses[keyof UpdateProjectRunnerResponses]

export type ListProjectCredentialsData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/credentials'
}

export type ListProjectCredentialsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectCredentialsError =
  ListProjectCredentialsErrors[keyof ListProjectCredentialsErrors]

export type ListProjectCredentialsResponses = {
  /**
   * A collection of credentials for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    credentials: Array<CredentialReadable>
  }
}

export type ListProjectCredentialsResponse =
  ListProjectCredentialsResponses[keyof ListProjectCredentialsResponses]

export type CreateProjectCredentialData = {
  /**
   * The credential data to create
   */
  body: CreateProjectCredentialBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/credentials'
}

export type CreateProjectCredentialErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectCredentialError =
  CreateProjectCredentialErrors[keyof CreateProjectCredentialErrors]

export type CreateProjectCredentialResponses = {
  /**
   * The details for a credential of a project
   */
  200: CredentialReadable
}

export type CreateProjectCredentialResponse =
  CreateProjectCredentialResponses[keyof CreateProjectCredentialResponses]

export type DeleteProjectCredentialData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A credential identifier or slug
     */
    credential_id: string
  }
  query?: never
  url: '/projects/{project_id}/credentials/{credential_id}'
}

export type DeleteProjectCredentialErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectCredentialError =
  DeleteProjectCredentialErrors[keyof DeleteProjectCredentialErrors]

export type DeleteProjectCredentialResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectCredentialResponse =
  DeleteProjectCredentialResponses[keyof DeleteProjectCredentialResponses]

export type ShowProjectCredentialData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A credential identifier or slug
     */
    credential_id: string
  }
  query?: never
  url: '/projects/{project_id}/credentials/{credential_id}'
}

export type ShowProjectCredentialErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectCredentialError =
  ShowProjectCredentialErrors[keyof ShowProjectCredentialErrors]

export type ShowProjectCredentialResponses = {
  /**
   * The details for a credential of a project
   */
  200: CredentialReadable
}

export type ShowProjectCredentialResponse =
  ShowProjectCredentialResponses[keyof ShowProjectCredentialResponses]

export type UpdateProjectCredentialData = {
  /**
   * The credential data to update
   */
  body: UpdateProjectCredentialBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A credential identifier or slug
     */
    credential_id: string
  }
  query?: never
  url: '/projects/{project_id}/credentials/{credential_id}'
}

export type UpdateProjectCredentialErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectCredentialError =
  UpdateProjectCredentialErrors[keyof UpdateProjectCredentialErrors]

export type UpdateProjectCredentialResponses = {
  /**
   * The details for a credential of a project
   */
  200: CredentialReadable
}

export type UpdateProjectCredentialResponse =
  UpdateProjectCredentialResponses[keyof UpdateProjectCredentialResponses]

export type ListProjectRepositoriesData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/repositories'
}

export type ListProjectRepositoriesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectRepositoriesError =
  ListProjectRepositoriesErrors[keyof ListProjectRepositoriesErrors]

export type ListProjectRepositoriesResponses = {
  /**
   * A collection of repositories for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    repositories: Array<RepositoryReadable>
  }
}

export type ListProjectRepositoriesResponse =
  ListProjectRepositoriesResponses[keyof ListProjectRepositoriesResponses]

export type CreateProjectRepositoryData = {
  /**
   * The repository data to create
   */
  body: CreateProjectRepositoryBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/repositories'
}

export type CreateProjectRepositoryErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectRepositoryError =
  CreateProjectRepositoryErrors[keyof CreateProjectRepositoryErrors]

export type CreateProjectRepositoryResponses = {
  /**
   * The details for a repository of a project
   */
  200: RepositoryReadable
}

export type CreateProjectRepositoryResponse =
  CreateProjectRepositoryResponses[keyof CreateProjectRepositoryResponses]

export type DeleteProjectRepositoryData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A repository identifier or slug
     */
    repository_id: string
  }
  query?: never
  url: '/projects/{project_id}/repositories/{repository_id}'
}

export type DeleteProjectRepositoryErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectRepositoryError =
  DeleteProjectRepositoryErrors[keyof DeleteProjectRepositoryErrors]

export type DeleteProjectRepositoryResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectRepositoryResponse =
  DeleteProjectRepositoryResponses[keyof DeleteProjectRepositoryResponses]

export type ShowProjectRepositoryData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A repository identifier or slug
     */
    repository_id: string
  }
  query?: never
  url: '/projects/{project_id}/repositories/{repository_id}'
}

export type ShowProjectRepositoryErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectRepositoryError =
  ShowProjectRepositoryErrors[keyof ShowProjectRepositoryErrors]

export type ShowProjectRepositoryResponses = {
  /**
   * The details for a repository of a project
   */
  200: RepositoryReadable
}

export type ShowProjectRepositoryResponse =
  ShowProjectRepositoryResponses[keyof ShowProjectRepositoryResponses]

export type UpdateProjectRepositoryData = {
  /**
   * The repository data to update
   */
  body: UpdateProjectRepositoryBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A repository identifier or slug
     */
    repository_id: string
  }
  query?: never
  url: '/projects/{project_id}/repositories/{repository_id}'
}

export type UpdateProjectRepositoryErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectRepositoryError =
  UpdateProjectRepositoryErrors[keyof UpdateProjectRepositoryErrors]

export type UpdateProjectRepositoryResponses = {
  /**
   * The details for a repository of a project
   */
  200: RepositoryReadable
}

export type UpdateProjectRepositoryResponse =
  UpdateProjectRepositoryResponses[keyof UpdateProjectRepositoryResponses]

export type ListProjectInventoriesData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/inventories'
}

export type ListProjectInventoriesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectInventoriesError =
  ListProjectInventoriesErrors[keyof ListProjectInventoriesErrors]

export type ListProjectInventoriesResponses = {
  /**
   * A collection of inventories for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    inventories: Array<InventoryReadable>
  }
}

export type ListProjectInventoriesResponse =
  ListProjectInventoriesResponses[keyof ListProjectInventoriesResponses]

export type CreateProjectInventoryData = {
  /**
   * The inventory data to create
   */
  body: CreateProjectInventoryBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/inventories'
}

export type CreateProjectInventoryErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectInventoryError =
  CreateProjectInventoryErrors[keyof CreateProjectInventoryErrors]

export type CreateProjectInventoryResponses = {
  /**
   * The details for a inventory of a project
   */
  200: InventoryReadable
}

export type CreateProjectInventoryResponse =
  CreateProjectInventoryResponses[keyof CreateProjectInventoryResponses]

export type DeleteProjectInventoryData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A inventory identifier or slug
     */
    inventory_id: string
  }
  query?: never
  url: '/projects/{project_id}/inventories/{inventory_id}'
}

export type DeleteProjectInventoryErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectInventoryError =
  DeleteProjectInventoryErrors[keyof DeleteProjectInventoryErrors]

export type DeleteProjectInventoryResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectInventoryResponse =
  DeleteProjectInventoryResponses[keyof DeleteProjectInventoryResponses]

export type ShowProjectInventoryData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A inventory identifier or slug
     */
    inventory_id: string
  }
  query?: never
  url: '/projects/{project_id}/inventories/{inventory_id}'
}

export type ShowProjectInventoryErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectInventoryError =
  ShowProjectInventoryErrors[keyof ShowProjectInventoryErrors]

export type ShowProjectInventoryResponses = {
  /**
   * The details for a inventory of a project
   */
  200: InventoryReadable
}

export type ShowProjectInventoryResponse =
  ShowProjectInventoryResponses[keyof ShowProjectInventoryResponses]

export type UpdateProjectInventoryData = {
  /**
   * The inventory data to update
   */
  body: UpdateProjectInventoryBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A inventory identifier or slug
     */
    inventory_id: string
  }
  query?: never
  url: '/projects/{project_id}/inventories/{inventory_id}'
}

export type UpdateProjectInventoryErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectInventoryError =
  UpdateProjectInventoryErrors[keyof UpdateProjectInventoryErrors]

export type UpdateProjectInventoryResponses = {
  /**
   * The details for a inventory of a project
   */
  200: InventoryReadable
}

export type UpdateProjectInventoryResponse =
  UpdateProjectInventoryResponses[keyof UpdateProjectInventoryResponses]

export type ListProjectEnvironmentsData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/environments'
}

export type ListProjectEnvironmentsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectEnvironmentsError =
  ListProjectEnvironmentsErrors[keyof ListProjectEnvironmentsErrors]

export type ListProjectEnvironmentsResponses = {
  /**
   * A collection of environments for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    environments: Array<EnvironmentReadable>
  }
}

export type ListProjectEnvironmentsResponse =
  ListProjectEnvironmentsResponses[keyof ListProjectEnvironmentsResponses]

export type CreateProjectEnvironmentData = {
  /**
   * The environment data to create
   */
  body: CreateProjectEnvironmentBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments'
}

export type CreateProjectEnvironmentErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectEnvironmentError =
  CreateProjectEnvironmentErrors[keyof CreateProjectEnvironmentErrors]

export type CreateProjectEnvironmentResponses = {
  /**
   * The details for a environment of a project
   */
  200: EnvironmentReadable
}

export type CreateProjectEnvironmentResponse =
  CreateProjectEnvironmentResponses[keyof CreateProjectEnvironmentResponses]

export type DeleteProjectEnvironmentData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}'
}

export type DeleteProjectEnvironmentErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectEnvironmentError =
  DeleteProjectEnvironmentErrors[keyof DeleteProjectEnvironmentErrors]

export type DeleteProjectEnvironmentResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectEnvironmentResponse =
  DeleteProjectEnvironmentResponses[keyof DeleteProjectEnvironmentResponses]

export type ShowProjectEnvironmentData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}'
}

export type ShowProjectEnvironmentErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectEnvironmentError =
  ShowProjectEnvironmentErrors[keyof ShowProjectEnvironmentErrors]

export type ShowProjectEnvironmentResponses = {
  /**
   * The details for a environment of a project
   */
  200: EnvironmentReadable
}

export type ShowProjectEnvironmentResponse =
  ShowProjectEnvironmentResponses[keyof ShowProjectEnvironmentResponses]

export type UpdateProjectEnvironmentData = {
  /**
   * The environment data to update
   */
  body: UpdateProjectEnvironmentBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}'
}

export type UpdateProjectEnvironmentErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectEnvironmentError =
  UpdateProjectEnvironmentErrors[keyof UpdateProjectEnvironmentErrors]

export type UpdateProjectEnvironmentResponses = {
  /**
   * The details for a environment of a project
   */
  200: EnvironmentReadable
}

export type UpdateProjectEnvironmentResponse =
  UpdateProjectEnvironmentResponses[keyof UpdateProjectEnvironmentResponses]

export type CreateProjectEnvironmentSecretData = {
  /**
   * The environment secret data to create
   */
  body: CreateProjectEnvironmentSecretBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/secrets'
}

export type CreateProjectEnvironmentSecretErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectEnvironmentSecretError =
  CreateProjectEnvironmentSecretErrors[keyof CreateProjectEnvironmentSecretErrors]

export type CreateProjectEnvironmentSecretResponses = {
  /**
   * The details for an environment secret of a project
   */
  200: EnvironmentSecret
}

export type CreateProjectEnvironmentSecretResponse =
  CreateProjectEnvironmentSecretResponses[keyof CreateProjectEnvironmentSecretResponses]

export type DeleteProjectEnvironmentSecretData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
    /**
     * A secret identifier or slug
     */
    secret_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}'
}

export type DeleteProjectEnvironmentSecretErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectEnvironmentSecretError =
  DeleteProjectEnvironmentSecretErrors[keyof DeleteProjectEnvironmentSecretErrors]

export type DeleteProjectEnvironmentSecretResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectEnvironmentSecretResponse =
  DeleteProjectEnvironmentSecretResponses[keyof DeleteProjectEnvironmentSecretResponses]

export type UpdateProjectEnvironmentSecretData = {
  /**
   * The environment secret data to create
   */
  body: UpdateProjectEnvironmentSecretBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
    /**
     * A secret identifier or slug
     */
    secret_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}'
}

export type UpdateProjectEnvironmentSecretErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectEnvironmentSecretError =
  UpdateProjectEnvironmentSecretErrors[keyof UpdateProjectEnvironmentSecretErrors]

export type UpdateProjectEnvironmentSecretResponses = {
  /**
   * The details for an environment secret of a project
   */
  200: EnvironmentSecret
}

export type UpdateProjectEnvironmentSecretResponse =
  UpdateProjectEnvironmentSecretResponses[keyof UpdateProjectEnvironmentSecretResponses]

export type CreateProjectEnvironmentValueData = {
  /**
   * The environment value data to create
   */
  body: CreateProjectEnvironmentValueBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/values'
}

export type CreateProjectEnvironmentValueErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectEnvironmentValueError =
  CreateProjectEnvironmentValueErrors[keyof CreateProjectEnvironmentValueErrors]

export type CreateProjectEnvironmentValueResponses = {
  /**
   * The details for an environment value of a project
   */
  200: EnvironmentValue
}

export type CreateProjectEnvironmentValueResponse =
  CreateProjectEnvironmentValueResponses[keyof CreateProjectEnvironmentValueResponses]

export type DeleteProjectEnvironmentValueData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
    /**
     * A value identifier or slug
     */
    value_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}'
}

export type DeleteProjectEnvironmentValueErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectEnvironmentValueError =
  DeleteProjectEnvironmentValueErrors[keyof DeleteProjectEnvironmentValueErrors]

export type DeleteProjectEnvironmentValueResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectEnvironmentValueResponse =
  DeleteProjectEnvironmentValueResponses[keyof DeleteProjectEnvironmentValueResponses]

export type UpdateProjectEnvironmentValueData = {
  /**
   * The environment value data to create
   */
  body: UpdateProjectEnvironmentValueBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A environment identifier or slug
     */
    environment_id: string
    /**
     * A value identifier or slug
     */
    value_id: string
  }
  query?: never
  url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}'
}

export type UpdateProjectEnvironmentValueErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectEnvironmentValueError =
  UpdateProjectEnvironmentValueErrors[keyof UpdateProjectEnvironmentValueErrors]

export type UpdateProjectEnvironmentValueResponses = {
  /**
   * The details for an environment value of a project
   */
  200: EnvironmentValue
}

export type UpdateProjectEnvironmentValueResponse =
  UpdateProjectEnvironmentValueResponses[keyof UpdateProjectEnvironmentValueResponses]

export type ListProjectTemplatesData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/templates'
}

export type ListProjectTemplatesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectTemplatesError =
  ListProjectTemplatesErrors[keyof ListProjectTemplatesErrors]

export type ListProjectTemplatesResponses = {
  /**
   * A collection of templates for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    templates: Array<TemplateReadable>
  }
}

export type ListProjectTemplatesResponse =
  ListProjectTemplatesResponses[keyof ListProjectTemplatesResponses]

export type CreateProjectTemplateData = {
  /**
   * The template data to create
   */
  body: CreateProjectTemplateBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates'
}

export type CreateProjectTemplateErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectTemplateError =
  CreateProjectTemplateErrors[keyof CreateProjectTemplateErrors]

export type CreateProjectTemplateResponses = {
  /**
   * The details for a template of a project
   */
  200: TemplateReadable
}

export type CreateProjectTemplateResponse =
  CreateProjectTemplateResponses[keyof CreateProjectTemplateResponses]

export type DeleteProjectTemplateData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}'
}

export type DeleteProjectTemplateErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectTemplateError =
  DeleteProjectTemplateErrors[keyof DeleteProjectTemplateErrors]

export type DeleteProjectTemplateResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectTemplateResponse =
  DeleteProjectTemplateResponses[keyof DeleteProjectTemplateResponses]

export type ShowProjectTemplateData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}'
}

export type ShowProjectTemplateErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectTemplateError =
  ShowProjectTemplateErrors[keyof ShowProjectTemplateErrors]

export type ShowProjectTemplateResponses = {
  /**
   * The details for a template of a project
   */
  200: TemplateReadable
}

export type ShowProjectTemplateResponse =
  ShowProjectTemplateResponses[keyof ShowProjectTemplateResponses]

export type UpdateProjectTemplateData = {
  /**
   * The template data to update
   */
  body: UpdateProjectTemplateBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}'
}

export type UpdateProjectTemplateErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectTemplateError =
  UpdateProjectTemplateErrors[keyof UpdateProjectTemplateErrors]

export type UpdateProjectTemplateResponses = {
  /**
   * The details for a template of a project
   */
  200: TemplateReadable
}

export type UpdateProjectTemplateResponse =
  UpdateProjectTemplateResponses[keyof UpdateProjectTemplateResponses]

export type CreateProjectTemplateSurveyData = {
  /**
   * The template data to create
   */
  body: CreateProjectTemplateSurveyBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/surveys'
}

export type CreateProjectTemplateSurveyErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectTemplateSurveyError =
  CreateProjectTemplateSurveyErrors[keyof CreateProjectTemplateSurveyErrors]

export type CreateProjectTemplateSurveyResponses = {
  /**
   * The details for a template survey of a project
   */
  200: TemplateSurvey
}

export type CreateProjectTemplateSurveyResponse =
  CreateProjectTemplateSurveyResponses[keyof CreateProjectTemplateSurveyResponses]

export type DeleteProjectTemplateSurveyData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
    /**
     * A survey identifier or slug
     */
    survey_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}'
}

export type DeleteProjectTemplateSurveyErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectTemplateSurveyError =
  DeleteProjectTemplateSurveyErrors[keyof DeleteProjectTemplateSurveyErrors]

export type DeleteProjectTemplateSurveyResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectTemplateSurveyResponse =
  DeleteProjectTemplateSurveyResponses[keyof DeleteProjectTemplateSurveyResponses]

export type UpdateProjectTemplateSurveyData = {
  /**
   * The template data to update
   */
  body: UpdateProjectTemplateSurveyBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
    /**
     * A survey identifier or slug
     */
    survey_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}'
}

export type UpdateProjectTemplateSurveyErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectTemplateSurveyError =
  UpdateProjectTemplateSurveyErrors[keyof UpdateProjectTemplateSurveyErrors]

export type UpdateProjectTemplateSurveyResponses = {
  /**
   * The details for a template survey of a project
   */
  200: TemplateSurvey
}

export type UpdateProjectTemplateSurveyResponse =
  UpdateProjectTemplateSurveyResponses[keyof UpdateProjectTemplateSurveyResponses]

export type CreateProjectTemplateVaultData = {
  /**
   * The template data to create
   */
  body: CreateProjectTemplateVaultBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/vaults'
}

export type CreateProjectTemplateVaultErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectTemplateVaultError =
  CreateProjectTemplateVaultErrors[keyof CreateProjectTemplateVaultErrors]

export type CreateProjectTemplateVaultResponses = {
  /**
   * The details for a template vault of a project
   */
  200: TemplateVaultReadable
}

export type CreateProjectTemplateVaultResponse =
  CreateProjectTemplateVaultResponses[keyof CreateProjectTemplateVaultResponses]

export type DeleteProjectTemplateVaultData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
    /**
     * A vault identifier or slug
     */
    vault_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}'
}

export type DeleteProjectTemplateVaultErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectTemplateVaultError =
  DeleteProjectTemplateVaultErrors[keyof DeleteProjectTemplateVaultErrors]

export type DeleteProjectTemplateVaultResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectTemplateVaultResponse =
  DeleteProjectTemplateVaultResponses[keyof DeleteProjectTemplateVaultResponses]

export type UpdateProjectTemplateVaultData = {
  /**
   * The template data to update
   */
  body: UpdateProjectTemplateVaultBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A template identifier or slug
     */
    template_id: string
    /**
     * A vault identifier or slug
     */
    vault_id: string
  }
  query?: never
  url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}'
}

export type UpdateProjectTemplateVaultErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectTemplateVaultError =
  UpdateProjectTemplateVaultErrors[keyof UpdateProjectTemplateVaultErrors]

export type UpdateProjectTemplateVaultResponses = {
  /**
   * The details for a template vault of a project
   */
  200: TemplateVaultReadable
}

export type UpdateProjectTemplateVaultResponse =
  UpdateProjectTemplateVaultResponses[keyof UpdateProjectTemplateVaultResponses]

export type ListProjectSchedulesData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/schedules'
}

export type ListProjectSchedulesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectSchedulesError =
  ListProjectSchedulesErrors[keyof ListProjectSchedulesErrors]

export type ListProjectSchedulesResponses = {
  /**
   * A collection of schedules for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    schedules: Array<ScheduleReadable>
  }
}

export type ListProjectSchedulesResponse =
  ListProjectSchedulesResponses[keyof ListProjectSchedulesResponses]

export type CreateProjectScheduleData = {
  /**
   * The schedule data to create
   */
  body: CreateProjectScheduleBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/schedules'
}

export type CreateProjectScheduleErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectScheduleError =
  CreateProjectScheduleErrors[keyof CreateProjectScheduleErrors]

export type CreateProjectScheduleResponses = {
  /**
   * The details for a schedule of a project
   */
  200: ScheduleReadable
}

export type CreateProjectScheduleResponse =
  CreateProjectScheduleResponses[keyof CreateProjectScheduleResponses]

export type DeleteProjectScheduleData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A schedule identifier or slug
     */
    schedule_id: string
  }
  query?: never
  url: '/projects/{project_id}/schedules/{schedule_id}'
}

export type DeleteProjectScheduleErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectScheduleError =
  DeleteProjectScheduleErrors[keyof DeleteProjectScheduleErrors]

export type DeleteProjectScheduleResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectScheduleResponse =
  DeleteProjectScheduleResponses[keyof DeleteProjectScheduleResponses]

export type ShowProjectScheduleData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A schedule identifier or slug
     */
    schedule_id: string
  }
  query?: never
  url: '/projects/{project_id}/schedules/{schedule_id}'
}

export type ShowProjectScheduleErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectScheduleError =
  ShowProjectScheduleErrors[keyof ShowProjectScheduleErrors]

export type ShowProjectScheduleResponses = {
  /**
   * The details for a schedule of a project
   */
  200: ScheduleReadable
}

export type ShowProjectScheduleResponse =
  ShowProjectScheduleResponses[keyof ShowProjectScheduleResponses]

export type UpdateProjectScheduleData = {
  /**
   * The schedule data to update
   */
  body: UpdateProjectScheduleBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A schedule identifier or slug
     */
    schedule_id: string
  }
  query?: never
  url: '/projects/{project_id}/schedules/{schedule_id}'
}

export type UpdateProjectScheduleErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProjectScheduleError =
  UpdateProjectScheduleErrors[keyof UpdateProjectScheduleErrors]

export type UpdateProjectScheduleResponses = {
  /**
   * The details for a schedule of a project
   */
  200: ScheduleReadable
}

export type UpdateProjectScheduleResponse =
  UpdateProjectScheduleResponses[keyof UpdateProjectScheduleResponses]

export type ListProjectExecutionsData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/projects/{project_id}/executions'
}

export type ListProjectExecutionsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListProjectExecutionsError =
  ListProjectExecutionsErrors[keyof ListProjectExecutionsErrors]

export type ListProjectExecutionsResponses = {
  /**
   * A collection of schedules for a project
   */
  200: {
    total: number
    limit: number
    offset: number
    project?: ProjectReadable
    executions: Array<ExecutionReadable>
  }
}

export type ListProjectExecutionsResponse =
  ListProjectExecutionsResponses[keyof ListProjectExecutionsResponses]

export type CreateProjectExecutionData = {
  /**
   * The execution data to create
   */
  body: CreateProjectExecutionBody
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
  }
  query?: never
  url: '/projects/{project_id}/executions'
}

export type CreateProjectExecutionErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateProjectExecutionError =
  CreateProjectExecutionErrors[keyof CreateProjectExecutionErrors]

export type CreateProjectExecutionResponses = {
  /**
   * The details for a schedule of a project
   */
  200: ExecutionReadable
}

export type CreateProjectExecutionResponse =
  CreateProjectExecutionResponses[keyof CreateProjectExecutionResponses]

export type DeleteProjectExecutionData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A execution identifier or slug
     */
    execution_id: string
  }
  query?: never
  url: '/projects/{project_id}/executions/{execution_id}'
}

export type DeleteProjectExecutionErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteProjectExecutionError =
  DeleteProjectExecutionErrors[keyof DeleteProjectExecutionErrors]

export type DeleteProjectExecutionResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteProjectExecutionResponse =
  DeleteProjectExecutionResponses[keyof DeleteProjectExecutionResponses]

export type ShowProjectExecutionData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A execution identifier or slug
     */
    execution_id: string
  }
  query?: never
  url: '/projects/{project_id}/executions/{execution_id}'
}

export type ShowProjectExecutionErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProjectExecutionError =
  ShowProjectExecutionErrors[keyof ShowProjectExecutionErrors]

export type ShowProjectExecutionResponses = {
  /**
   * The details for a schedule of a project
   */
  200: ExecutionReadable
}

export type ShowProjectExecutionResponse =
  ShowProjectExecutionResponses[keyof ShowProjectExecutionResponses]

export type PurgeProjectExecutionData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A execution identifier or slug
     */
    execution_id: string
  }
  query?: never
  url: '/projects/{project_id}/executions/{execution_id}/purge'
}

export type PurgeProjectExecutionErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PurgeProjectExecutionError =
  PurgeProjectExecutionErrors[keyof PurgeProjectExecutionErrors]

export type PurgeProjectExecutionResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PurgeProjectExecutionResponse =
  PurgeProjectExecutionResponses[keyof PurgeProjectExecutionResponses]

export type OutputProjectExecutionData = {
  body?: never
  path: {
    /**
     * A project identifier or slug
     */
    project_id: string
    /**
     * A execution identifier or slug
     */
    execution_id: string
  }
  query?: never
  url: '/projects/{project_id}/executions/{execution_id}/output'
}

export type OutputProjectExecutionErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type OutputProjectExecutionError =
  OutputProjectExecutionErrors[keyof OutputProjectExecutionErrors]

export type OutputProjectExecutionResponses = {
  /**
   * The logging for a execution of a project
   */
  200: Array<OutputReadable>
}

export type OutputProjectExecutionResponse =
  OutputProjectExecutionResponses[keyof OutputProjectExecutionResponses]

export type ListGlobalEventsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/events'
}

export type ListGlobalEventsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGlobalEventsError =
  ListGlobalEventsErrors[keyof ListGlobalEventsErrors]

export type ListGlobalEventsResponses = {
  /**
   * A collection of events
   */
  200: {
    total: number
    limit: number
    offset: number
    events: Array<EventReadable>
  }
}

export type ListGlobalEventsResponse =
  ListGlobalEventsResponses[keyof ListGlobalEventsResponses]

export type ListGlobalRunnersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/runners'
}

export type ListGlobalRunnersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGlobalRunnersError =
  ListGlobalRunnersErrors[keyof ListGlobalRunnersErrors]

export type ListGlobalRunnersResponses = {
  /**
   * A collection of runners
   */
  200: {
    total: number
    limit: number
    offset: number
    runners: Array<RunnerReadable>
  }
}

export type ListGlobalRunnersResponse =
  ListGlobalRunnersResponses[keyof ListGlobalRunnersResponses]

export type CreateGlobalRunnerData = {
  /**
   * The runner data to create
   */
  body: CreateGlobalRunnerBody
  path?: never
  query?: never
  url: '/runners'
}

export type CreateGlobalRunnerErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateGlobalRunnerError =
  CreateGlobalRunnerErrors[keyof CreateGlobalRunnerErrors]

export type CreateGlobalRunnerResponses = {
  /**
   * The details for a runner
   */
  200: RunnerReadable
}

export type CreateGlobalRunnerResponse =
  CreateGlobalRunnerResponses[keyof CreateGlobalRunnerResponses]

export type DeleteGlobalRunnerData = {
  body?: never
  path: {
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/runners/{runner_id}'
}

export type DeleteGlobalRunnerErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGlobalRunnerError =
  DeleteGlobalRunnerErrors[keyof DeleteGlobalRunnerErrors]

export type DeleteGlobalRunnerResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGlobalRunnerResponse =
  DeleteGlobalRunnerResponses[keyof DeleteGlobalRunnerResponses]

export type ShowGlobalRunnerData = {
  body?: never
  path: {
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/runners/{runner_id}'
}

export type ShowGlobalRunnerErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowGlobalRunnerError =
  ShowGlobalRunnerErrors[keyof ShowGlobalRunnerErrors]

export type ShowGlobalRunnerResponses = {
  /**
   * The details for a runner
   */
  200: RunnerReadable
}

export type ShowGlobalRunnerResponse =
  ShowGlobalRunnerResponses[keyof ShowGlobalRunnerResponses]

export type UpdateGlobalRunnerData = {
  /**
   * The runner data to update
   */
  body: UpdateGlobalRunnerBody
  path: {
    /**
     * A runner identifier or slug
     */
    runner_id: string
  }
  query?: never
  url: '/runners/{runner_id}'
}

export type UpdateGlobalRunnerErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateGlobalRunnerError =
  UpdateGlobalRunnerErrors[keyof UpdateGlobalRunnerErrors]

export type UpdateGlobalRunnerResponses = {
  /**
   * The details for a runner
   */
  200: RunnerReadable
}

export type UpdateGlobalRunnerResponse =
  UpdateGlobalRunnerResponses[keyof UpdateGlobalRunnerResponses]

export type ListGroupsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups'
}

export type ListGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupsError = ListGroupsErrors[keyof ListGroupsErrors]

export type ListGroupsResponses = {
  /**
   * A collection of groups
   */
  200: {
    total: number
    limit: number
    offset: number
    groups: Array<GroupReadable>
  }
}

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses]

export type CreateGroupData = {
  /**
   * The group data to create
   */
  body: CreateGroupBody
  path?: never
  query?: never
  url: '/groups'
}

export type CreateGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateGroupError = CreateGroupErrors[keyof CreateGroupErrors]

export type CreateGroupResponses = {
  /**
   * The details for a group
   */
  200: GroupReadable
}

export type CreateGroupResponse =
  CreateGroupResponses[keyof CreateGroupResponses]

export type DeleteGroupData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type DeleteGroupErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupError = DeleteGroupErrors[keyof DeleteGroupErrors]

export type DeleteGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupResponse =
  DeleteGroupResponses[keyof DeleteGroupResponses]

export type ShowGroupData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type ShowGroupErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowGroupError = ShowGroupErrors[keyof ShowGroupErrors]

export type ShowGroupResponses = {
  /**
   * The details for a group
   */
  200: GroupReadable
}

export type ShowGroupResponse = ShowGroupResponses[keyof ShowGroupResponses]

export type UpdateGroupData = {
  /**
   * The group data to update
   */
  body: UpdateGroupBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type UpdateGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateGroupError = UpdateGroupErrors[keyof UpdateGroupErrors]

export type UpdateGroupResponses = {
  /**
   * The details for a group
   */
  200: GroupReadable
}

export type UpdateGroupResponse =
  UpdateGroupResponses[keyof UpdateGroupResponses]

export type DeleteGroupFromUserData = {
  /**
   * The group user data to unlink
   */
  body: GroupUserDropBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type DeleteGroupFromUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupFromUserError =
  DeleteGroupFromUserErrors[keyof DeleteGroupFromUserErrors]

export type DeleteGroupFromUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupFromUserResponse =
  DeleteGroupFromUserResponses[keyof DeleteGroupFromUserResponses]

export type ListGroupUsersData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups/{group_id}/users'
}

export type ListGroupUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupUsersError =
  ListGroupUsersErrors[keyof ListGroupUsersErrors]

export type ListGroupUsersResponses = {
  /**
   * A collection of group users
   */
  200: {
    total: number
    limit: number
    offset: number
    group?: GroupReadable
    users: Array<UserGroupReadable>
  }
}

export type ListGroupUsersResponse =
  ListGroupUsersResponses[keyof ListGroupUsersResponses]

export type AttachGroupToUserData = {
  /**
   * The group user data to permit
   */
  body: GroupUserPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type AttachGroupToUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachGroupToUserError =
  AttachGroupToUserErrors[keyof AttachGroupToUserErrors]

export type AttachGroupToUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachGroupToUserResponse =
  AttachGroupToUserResponses[keyof AttachGroupToUserResponses]

export type PermitGroupUserData = {
  /**
   * The group user data to permit
   */
  body: GroupUserPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type PermitGroupUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitGroupUserError =
  PermitGroupUserErrors[keyof PermitGroupUserErrors]

export type PermitGroupUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitGroupUserResponse =
  PermitGroupUserResponses[keyof PermitGroupUserResponses]

export type DeleteGroupFromProjectData = {
  /**
   * The group project data to unlink
   */
  body: GroupProjectDropBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/projects'
}

export type DeleteGroupFromProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupFromProjectError =
  DeleteGroupFromProjectErrors[keyof DeleteGroupFromProjectErrors]

export type DeleteGroupFromProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupFromProjectResponse =
  DeleteGroupFromProjectResponses[keyof DeleteGroupFromProjectResponses]

export type ListGroupProjectsData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups/{group_id}/projects'
}

export type ListGroupProjectsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupProjectsError =
  ListGroupProjectsErrors[keyof ListGroupProjectsErrors]

export type ListGroupProjectsResponses = {
  /**
   * A collection of group projects
   */
  200: {
    total: number
    limit: number
    offset: number
    group?: GroupReadable
    projects: Array<GroupProjectReadable>
  }
}

export type ListGroupProjectsResponse =
  ListGroupProjectsResponses[keyof ListGroupProjectsResponses]

export type AttachGroupToProjectData = {
  /**
   * The group project data to permit
   */
  body: GroupProjectPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/projects'
}

export type AttachGroupToProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachGroupToProjectError =
  AttachGroupToProjectErrors[keyof AttachGroupToProjectErrors]

export type AttachGroupToProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachGroupToProjectResponse =
  AttachGroupToProjectResponses[keyof AttachGroupToProjectResponses]

export type PermitGroupProjectData = {
  /**
   * The group project data to permit
   */
  body: GroupProjectPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/projects'
}

export type PermitGroupProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitGroupProjectError =
  PermitGroupProjectErrors[keyof PermitGroupProjectErrors]

export type PermitGroupProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitGroupProjectResponse =
  PermitGroupProjectResponses[keyof PermitGroupProjectResponses]

export type ListUsersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users'
}

export type ListUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors]

export type ListUsersResponses = {
  /**
   * A collection of users
   */
  200: {
    total: number
    limit: number
    offset: number
    users: Array<UserReadable>
  }
}

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses]

export type CreateUserData = {
  /**
   * The user data to create
   */
  body: CreateUserBody
  path?: never
  query?: never
  url: '/users'
}

export type CreateUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors]

export type CreateUserResponses = {
  /**
   * The details for an user
   */
  200: UserReadable
}

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses]

export type DeleteUserData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type DeleteUserErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type ShowUserData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type ShowUserErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowUserError = ShowUserErrors[keyof ShowUserErrors]

export type ShowUserResponses = {
  /**
   * The details for an user
   */
  200: UserReadable
}

export type ShowUserResponse = ShowUserResponses[keyof ShowUserResponses]

export type UpdateUserData = {
  /**
   * The user data to update
   */
  body: UpdateUserBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type UpdateUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * The details for an user
   */
  200: UserReadable
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type DeleteUserFromGroupData = {
  /**
   * The user group data to unlink
   */
  body: UserGroupDropBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type DeleteUserFromGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserFromGroupError =
  DeleteUserFromGroupErrors[keyof DeleteUserFromGroupErrors]

export type DeleteUserFromGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserFromGroupResponse =
  DeleteUserFromGroupResponses[keyof DeleteUserFromGroupResponses]

export type ListUserGroupsData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users/{user_id}/groups'
}

export type ListUserGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUserGroupsError =
  ListUserGroupsErrors[keyof ListUserGroupsErrors]

export type ListUserGroupsResponses = {
  /**
   * A collection of user groups
   */
  200: {
    total: number
    limit: number
    offset: number
    user?: UserReadable
    groups: Array<UserGroupReadable>
  }
}

export type ListUserGroupsResponse =
  ListUserGroupsResponses[keyof ListUserGroupsResponses]

export type AttachUserToGroupData = {
  /**
   * The user group data to permit
   */
  body: UserGroupPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type AttachUserToGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachUserToGroupError =
  AttachUserToGroupErrors[keyof AttachUserToGroupErrors]

export type AttachUserToGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachUserToGroupResponse =
  AttachUserToGroupResponses[keyof AttachUserToGroupResponses]

export type PermitUserGroupData = {
  /**
   * The user group data to permit
   */
  body: UserGroupPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type PermitUserGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitUserGroupError =
  PermitUserGroupErrors[keyof PermitUserGroupErrors]

export type PermitUserGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitUserGroupResponse =
  PermitUserGroupResponses[keyof PermitUserGroupResponses]

export type DeleteUserFromProjectData = {
  /**
   * The user project data to unlink
   */
  body: UserProjectDropBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/projects'
}

export type DeleteUserFromProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserFromProjectError =
  DeleteUserFromProjectErrors[keyof DeleteUserFromProjectErrors]

export type DeleteUserFromProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserFromProjectResponse =
  DeleteUserFromProjectResponses[keyof DeleteUserFromProjectResponses]

export type ListUserProjectsData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users/{user_id}/projects'
}

export type ListUserProjectsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUserProjectsError =
  ListUserProjectsErrors[keyof ListUserProjectsErrors]

export type ListUserProjectsResponses = {
  /**
   * A collection of user projects
   */
  200: {
    total: number
    limit: number
    offset: number
    user?: UserReadable
    projects: Array<UserProjectReadable>
  }
}

export type ListUserProjectsResponse =
  ListUserProjectsResponses[keyof ListUserProjectsResponses]

export type AttachUserToProjectData = {
  /**
   * The user project data to permit
   */
  body: UserProjectPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/projects'
}

export type AttachUserToProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachUserToProjectError =
  AttachUserToProjectErrors[keyof AttachUserToProjectErrors]

export type AttachUserToProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachUserToProjectResponse =
  AttachUserToProjectResponses[keyof AttachUserToProjectResponses]

export type PermitUserProjectData = {
  /**
   * The user project data to permit
   */
  body: UserProjectPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/projects'
}

export type PermitUserProjectErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitUserProjectError =
  PermitUserProjectErrors[keyof PermitUserProjectErrors]

export type PermitUserProjectResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitUserProjectResponse =
  PermitUserProjectResponses[keyof PermitUserProjectResponses]

export type ClientOptions = {
  baseUrl: 'https://try.gexec.eu/api/v1' | (string & {})
}
