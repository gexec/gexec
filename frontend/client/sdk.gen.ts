// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-fetch'
import type {
  RequestProviderData,
  RequestProviderError,
  CallbackProviderData,
  CallbackProviderError,
  ListProvidersData,
  ListProvidersResponse,
  RedirectAuthData,
  RedirectAuthResponse,
  RedirectAuthError,
  LoginAuthData,
  LoginAuthResponse,
  LoginAuthError,
  RefreshAuthData,
  RefreshAuthResponse,
  RefreshAuthError,
  VerifyAuthData,
  VerifyAuthResponse,
  VerifyAuthError,
  TokenProfileData,
  TokenProfileResponse,
  TokenProfileError,
  ShowProfileData,
  ShowProfileResponse,
  ShowProfileError,
  UpdateProfileData,
  UpdateProfileResponse,
  UpdateProfileError,
  ListProjectsData,
  ListProjectsResponse,
  ListProjectsError,
  CreateProjectData,
  CreateProjectResponse,
  CreateProjectError,
  DeleteProjectData,
  DeleteProjectResponse,
  DeleteProjectError,
  ShowProjectData,
  ShowProjectResponse,
  ShowProjectError,
  UpdateProjectData,
  UpdateProjectResponse,
  UpdateProjectError,
  DeleteProjectFromUserData,
  DeleteProjectFromUserResponse,
  DeleteProjectFromUserError,
  ListProjectUsersData,
  ListProjectUsersResponse,
  ListProjectUsersError,
  AttachProjectToUserData,
  AttachProjectToUserResponse,
  AttachProjectToUserError,
  PermitProjectUserData,
  PermitProjectUserResponse,
  PermitProjectUserError,
  DeleteProjectFromGroupData,
  DeleteProjectFromGroupResponse,
  DeleteProjectFromGroupError,
  ListProjectGroupsData,
  ListProjectGroupsResponse,
  ListProjectGroupsError,
  AttachProjectToGroupData,
  AttachProjectToGroupResponse,
  AttachProjectToGroupError,
  PermitProjectGroupData,
  PermitProjectGroupResponse,
  PermitProjectGroupError,
  ListProjectEventsData,
  ListProjectEventsResponse,
  ListProjectEventsError,
  ListProjectRunnersData,
  ListProjectRunnersResponse,
  ListProjectRunnersError,
  CreateProjectRunnerData,
  CreateProjectRunnerResponse,
  CreateProjectRunnerError,
  DeleteProjectRunnerData,
  DeleteProjectRunnerResponse,
  DeleteProjectRunnerError,
  ShowProjectRunnerData,
  ShowProjectRunnerResponse,
  ShowProjectRunnerError,
  UpdateProjectRunnerData,
  UpdateProjectRunnerResponse,
  UpdateProjectRunnerError,
  ListProjectCredentialsData,
  ListProjectCredentialsResponse,
  ListProjectCredentialsError,
  CreateProjectCredentialData,
  CreateProjectCredentialResponse,
  CreateProjectCredentialError,
  DeleteProjectCredentialData,
  DeleteProjectCredentialResponse,
  DeleteProjectCredentialError,
  ShowProjectCredentialData,
  ShowProjectCredentialResponse,
  ShowProjectCredentialError,
  UpdateProjectCredentialData,
  UpdateProjectCredentialResponse,
  UpdateProjectCredentialError,
  ListProjectRepositoriesData,
  ListProjectRepositoriesResponse,
  ListProjectRepositoriesError,
  CreateProjectRepositoryData,
  CreateProjectRepositoryResponse,
  CreateProjectRepositoryError,
  DeleteProjectRepositoryData,
  DeleteProjectRepositoryResponse,
  DeleteProjectRepositoryError,
  ShowProjectRepositoryData,
  ShowProjectRepositoryResponse,
  ShowProjectRepositoryError,
  UpdateProjectRepositoryData,
  UpdateProjectRepositoryResponse,
  UpdateProjectRepositoryError,
  ListProjectInventoriesData,
  ListProjectInventoriesResponse,
  ListProjectInventoriesError,
  CreateProjectInventoryData,
  CreateProjectInventoryResponse,
  CreateProjectInventoryError,
  DeleteProjectInventoryData,
  DeleteProjectInventoryResponse,
  DeleteProjectInventoryError,
  ShowProjectInventoryData,
  ShowProjectInventoryResponse,
  ShowProjectInventoryError,
  UpdateProjectInventoryData,
  UpdateProjectInventoryResponse,
  UpdateProjectInventoryError,
  ListProjectEnvironmentsData,
  ListProjectEnvironmentsResponse,
  ListProjectEnvironmentsError,
  CreateProjectEnvironmentData,
  CreateProjectEnvironmentResponse,
  CreateProjectEnvironmentError,
  DeleteProjectEnvironmentData,
  DeleteProjectEnvironmentResponse,
  DeleteProjectEnvironmentError,
  ShowProjectEnvironmentData,
  ShowProjectEnvironmentResponse,
  ShowProjectEnvironmentError,
  UpdateProjectEnvironmentData,
  UpdateProjectEnvironmentResponse,
  UpdateProjectEnvironmentError,
  CreateProjectEnvironmentSecretData,
  CreateProjectEnvironmentSecretResponse,
  CreateProjectEnvironmentSecretError,
  DeleteProjectEnvironmentSecretData,
  DeleteProjectEnvironmentSecretResponse,
  DeleteProjectEnvironmentSecretError,
  UpdateProjectEnvironmentSecretData,
  UpdateProjectEnvironmentSecretResponse,
  UpdateProjectEnvironmentSecretError,
  CreateProjectEnvironmentValueData,
  CreateProjectEnvironmentValueResponse,
  CreateProjectEnvironmentValueError,
  DeleteProjectEnvironmentValueData,
  DeleteProjectEnvironmentValueResponse,
  DeleteProjectEnvironmentValueError,
  UpdateProjectEnvironmentValueData,
  UpdateProjectEnvironmentValueResponse,
  UpdateProjectEnvironmentValueError,
  ListProjectTemplatesData,
  ListProjectTemplatesResponse,
  ListProjectTemplatesError,
  CreateProjectTemplateData,
  CreateProjectTemplateResponse,
  CreateProjectTemplateError,
  DeleteProjectTemplateData,
  DeleteProjectTemplateResponse,
  DeleteProjectTemplateError,
  ShowProjectTemplateData,
  ShowProjectTemplateResponse,
  ShowProjectTemplateError,
  UpdateProjectTemplateData,
  UpdateProjectTemplateResponse,
  UpdateProjectTemplateError,
  CreateProjectTemplateSurveyData,
  CreateProjectTemplateSurveyResponse,
  CreateProjectTemplateSurveyError,
  DeleteProjectTemplateSurveyData,
  DeleteProjectTemplateSurveyResponse,
  DeleteProjectTemplateSurveyError,
  UpdateProjectTemplateSurveyData,
  UpdateProjectTemplateSurveyResponse,
  UpdateProjectTemplateSurveyError,
  CreateProjectTemplateVaultData,
  CreateProjectTemplateVaultResponse,
  CreateProjectTemplateVaultError,
  DeleteProjectTemplateVaultData,
  DeleteProjectTemplateVaultResponse,
  DeleteProjectTemplateVaultError,
  UpdateProjectTemplateVaultData,
  UpdateProjectTemplateVaultResponse,
  UpdateProjectTemplateVaultError,
  ListProjectSchedulesData,
  ListProjectSchedulesResponse,
  ListProjectSchedulesError,
  CreateProjectScheduleData,
  CreateProjectScheduleResponse,
  CreateProjectScheduleError,
  DeleteProjectScheduleData,
  DeleteProjectScheduleResponse,
  DeleteProjectScheduleError,
  ShowProjectScheduleData,
  ShowProjectScheduleResponse,
  ShowProjectScheduleError,
  UpdateProjectScheduleData,
  UpdateProjectScheduleResponse,
  UpdateProjectScheduleError,
  ListProjectExecutionsData,
  ListProjectExecutionsResponse,
  ListProjectExecutionsError,
  CreateProjectExecutionData,
  CreateProjectExecutionResponse,
  CreateProjectExecutionError,
  DeleteProjectExecutionData,
  DeleteProjectExecutionResponse,
  DeleteProjectExecutionError,
  ShowProjectExecutionData,
  ShowProjectExecutionResponse,
  ShowProjectExecutionError,
  PurgeProjectExecutionData,
  PurgeProjectExecutionResponse,
  PurgeProjectExecutionError,
  OutputProjectExecutionData,
  OutputProjectExecutionResponse,
  OutputProjectExecutionError,
  ListGlobalEventsData,
  ListGlobalEventsResponse,
  ListGlobalEventsError,
  ListGlobalRunnersData,
  ListGlobalRunnersResponse,
  ListGlobalRunnersError,
  CreateGlobalRunnerData,
  CreateGlobalRunnerResponse,
  CreateGlobalRunnerError,
  DeleteGlobalRunnerData,
  DeleteGlobalRunnerResponse,
  DeleteGlobalRunnerError,
  ShowGlobalRunnerData,
  ShowGlobalRunnerResponse,
  ShowGlobalRunnerError,
  UpdateGlobalRunnerData,
  UpdateGlobalRunnerResponse,
  UpdateGlobalRunnerError,
  ListGroupsData,
  ListGroupsResponse,
  ListGroupsError,
  CreateGroupData,
  CreateGroupResponse,
  CreateGroupError,
  DeleteGroupData,
  DeleteGroupResponse,
  DeleteGroupError,
  ShowGroupData,
  ShowGroupResponse,
  ShowGroupError,
  UpdateGroupData,
  UpdateGroupResponse,
  UpdateGroupError,
  DeleteGroupFromUserData,
  DeleteGroupFromUserResponse,
  DeleteGroupFromUserError,
  ListGroupUsersData,
  ListGroupUsersResponse,
  ListGroupUsersError,
  AttachGroupToUserData,
  AttachGroupToUserResponse,
  AttachGroupToUserError,
  PermitGroupUserData,
  PermitGroupUserResponse,
  PermitGroupUserError,
  DeleteGroupFromProjectData,
  DeleteGroupFromProjectResponse,
  DeleteGroupFromProjectError,
  ListGroupProjectsData,
  ListGroupProjectsResponse,
  ListGroupProjectsError,
  AttachGroupToProjectData,
  AttachGroupToProjectResponse,
  AttachGroupToProjectError,
  PermitGroupProjectData,
  PermitGroupProjectResponse,
  PermitGroupProjectError,
  ListUsersData,
  ListUsersResponse,
  ListUsersError,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserResponse,
  DeleteUserError,
  ShowUserData,
  ShowUserResponse,
  ShowUserError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  DeleteUserFromGroupData,
  DeleteUserFromGroupResponse,
  DeleteUserFromGroupError,
  ListUserGroupsData,
  ListUserGroupsResponse,
  ListUserGroupsError,
  AttachUserToGroupData,
  AttachUserToGroupResponse,
  AttachUserToGroupError,
  PermitUserGroupData,
  PermitUserGroupResponse,
  PermitUserGroupError,
  DeleteUserFromProjectData,
  DeleteUserFromProjectResponse,
  DeleteUserFromProjectError,
  ListUserProjectsData,
  ListUserProjectsResponse,
  ListUserProjectsError,
  AttachUserToProjectData,
  AttachUserToProjectResponse,
  AttachUserToProjectError,
  PermitUserProjectData,
  PermitUserProjectResponse,
  PermitUserProjectError,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Request the redirect to defined provider
 */
export const requestProvider = <ThrowOnError extends boolean = false>(
  options: Options<RequestProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    RequestProviderError,
    ThrowOnError
  >({
    url: '/auth/{provider}/request',
    ...options,
  })
}

/**
 * Callback to parse the defined provider
 */
export const callbackProvider = <ThrowOnError extends boolean = false>(
  options: Options<CallbackProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    CallbackProviderError,
    ThrowOnError
  >({
    url: '/auth/{provider}/callback',
    ...options,
  })
}

/**
 * Fetch the available auth providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(
  options?: Options<ListProvidersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProvidersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/providers',
    ...options,
  })
}

/**
 * Retrieve real token after redirect
 */
export const redirectAuth = <ThrowOnError extends boolean = false>(
  options: Options<RedirectAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RedirectAuthResponse,
    RedirectAuthError,
    ThrowOnError
  >({
    url: '/auth/redirect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(
  options: Options<LoginAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginAuthResponse,
    LoginAuthError,
    ThrowOnError
  >({
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(
  options?: Options<RefreshAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    RefreshAuthResponse,
    RefreshAuthError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/auth/refresh',
    ...options,
  })
}

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<VerifyAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    VerifyAuthResponse,
    VerifyAuthError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/auth/verify',
    ...options,
  })
}

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(
  options?: Options<TokenProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    TokenProfileResponse,
    TokenProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/token',
    ...options,
  })
}

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(
  options?: Options<ShowProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ShowProfileResponse,
    ShowProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/self',
    ...options,
  })
}

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProfileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProfileResponse,
    UpdateProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/self',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available projects
 */
export const listProjects = <ThrowOnError extends boolean = false>(
  options?: Options<ListProjectsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProjectsResponse,
    ListProjectsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects',
    ...options,
  })
}

/**
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponse,
    CreateProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectResponse,
    DeleteProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}',
    ...options,
  })
}

/**
 * Fetch a specific project
 */
export const showProject = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectResponse,
    ShowProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}',
    ...options,
  })
}

/**
 * Update a specific project
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectResponse,
    UpdateProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a user from project
 */
export const deleteProjectFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectFromUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectFromUserResponse,
    DeleteProjectFromUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all users attached to project
 */
export const listProjectUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectUsersResponse,
    ListProjectUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/users',
    ...options,
  })
}

/**
 * Attach a user to project
 */
export const attachProjectToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachProjectToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachProjectToUserResponse,
    AttachProjectToUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update user perms for project
 */
export const permitProjectUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitProjectUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitProjectUserResponse,
    PermitProjectUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a group from project
 */
export const deleteProjectFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectFromGroupResponse,
    DeleteProjectFromGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all groups attached to project
 */
export const listProjectGroups = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectGroupsResponse,
    ListProjectGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/groups',
    ...options,
  })
}

/**
 * Attach a group to project
 */
export const attachProjectToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AttachProjectToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachProjectToGroupResponse,
    AttachProjectToGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update group perms for project
 */
export const permitProjectGroup = <ThrowOnError extends boolean = false>(
  options: Options<PermitProjectGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitProjectGroupResponse,
    PermitProjectGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all events for a project
 */
export const listProjectEvents = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectEventsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectEventsResponse,
    ListProjectEventsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/events',
    ...options,
  })
}

/**
 * Fetch all runners for a project
 */
export const listProjectRunners = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectRunnersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectRunnersResponse,
    ListProjectRunnersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/runners',
    ...options,
  })
}

/**
 * Create a new runner
 */
export const createProjectRunner = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectRunnerResponse,
    CreateProjectRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/runners',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific runner for a project
 */
export const deleteProjectRunner = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectRunnerResponse,
    DeleteProjectRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/runners/{runner_id}',
    ...options,
  })
}

/**
 * Fetch a specific runner for a project
 */
export const showProjectRunner = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectRunnerResponse,
    ShowProjectRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/runners/{runner_id}',
    ...options,
  })
}

/**
 * Update a specific runner for a project
 */
export const updateProjectRunner = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectRunnerResponse,
    UpdateProjectRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/runners/{runner_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all credentials for a project
 */
export const listProjectCredentials = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectCredentialsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectCredentialsResponse,
    ListProjectCredentialsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/credentials',
    ...options,
  })
}

/**
 * Create a new credential
 */
export const createProjectCredential = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectCredentialData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectCredentialResponse,
    CreateProjectCredentialError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/credentials',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific credential for a project
 */
export const deleteProjectCredential = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectCredentialData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectCredentialResponse,
    DeleteProjectCredentialError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/credentials/{credential_id}',
    ...options,
  })
}

/**
 * Fetch a specific credential for a project
 */
export const showProjectCredential = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectCredentialData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectCredentialResponse,
    ShowProjectCredentialError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/credentials/{credential_id}',
    ...options,
  })
}

/**
 * Update a specific credential for a project
 */
export const updateProjectCredential = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectCredentialData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectCredentialResponse,
    UpdateProjectCredentialError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/credentials/{credential_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all repositories for a project
 */
export const listProjectRepositories = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectRepositoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectRepositoriesResponse,
    ListProjectRepositoriesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/repositories',
    ...options,
  })
}

/**
 * Create a new repository
 */
export const createProjectRepository = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectRepositoryResponse,
    CreateProjectRepositoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/repositories',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific repository for a project
 */
export const deleteProjectRepository = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectRepositoryResponse,
    DeleteProjectRepositoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/repositories/{repository_id}',
    ...options,
  })
}

/**
 * Fetch a specific repository for a project
 */
export const showProjectRepository = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectRepositoryResponse,
    ShowProjectRepositoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/repositories/{repository_id}',
    ...options,
  })
}

/**
 * Update a specific repository for a project
 */
export const updateProjectRepository = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectRepositoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectRepositoryResponse,
    UpdateProjectRepositoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/repositories/{repository_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all inventories for a project
 */
export const listProjectInventories = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectInventoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectInventoriesResponse,
    ListProjectInventoriesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/inventories',
    ...options,
  })
}

/**
 * Create a new inventory
 */
export const createProjectInventory = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectInventoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectInventoryResponse,
    CreateProjectInventoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/inventories',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific inventory for a project
 */
export const deleteProjectInventory = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectInventoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectInventoryResponse,
    DeleteProjectInventoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/inventories/{inventory_id}',
    ...options,
  })
}

/**
 * Fetch a specific inventory for a project
 */
export const showProjectInventory = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectInventoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectInventoryResponse,
    ShowProjectInventoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/inventories/{inventory_id}',
    ...options,
  })
}

/**
 * Update a specific inventory for a project
 */
export const updateProjectInventory = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectInventoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectInventoryResponse,
    UpdateProjectInventoryError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/inventories/{inventory_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all environments for a project
 */
export const listProjectEnvironments = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectEnvironmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectEnvironmentsResponse,
    ListProjectEnvironmentsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments',
    ...options,
  })
}

/**
 * Create a new environment
 */
export const createProjectEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectEnvironmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectEnvironmentResponse,
    CreateProjectEnvironmentError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific environment for a project
 */
export const deleteProjectEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectEnvironmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectEnvironmentResponse,
    DeleteProjectEnvironmentError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}',
    ...options,
  })
}

/**
 * Fetch a specific environment for a project
 */
export const showProjectEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectEnvironmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectEnvironmentResponse,
    ShowProjectEnvironmentError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}',
    ...options,
  })
}

/**
 * Update a specific environment for a project
 */
export const updateProjectEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectEnvironmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectEnvironmentResponse,
    UpdateProjectEnvironmentError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create a new secret on an environment
 */
export const createProjectEnvironmentSecret = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateProjectEnvironmentSecretData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectEnvironmentSecretResponse,
    CreateProjectEnvironmentSecretError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/secrets',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a secret on an environment for a project
 */
export const deleteProjectEnvironmentSecret = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteProjectEnvironmentSecretData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectEnvironmentSecretResponse,
    DeleteProjectEnvironmentSecretError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}',
    ...options,
  })
}

/**
 * Update a secret on an environment for a project
 */
export const updateProjectEnvironmentSecret = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateProjectEnvironmentSecretData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectEnvironmentSecretResponse,
    UpdateProjectEnvironmentSecretError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create a new value on an environment
 */
export const createProjectEnvironmentValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateProjectEnvironmentValueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectEnvironmentValueResponse,
    CreateProjectEnvironmentValueError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/values',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a value on an environment for a project
 */
export const deleteProjectEnvironmentValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteProjectEnvironmentValueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectEnvironmentValueResponse,
    DeleteProjectEnvironmentValueError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}',
    ...options,
  })
}

/**
 * Update a value on an environment for a project
 */
export const updateProjectEnvironmentValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateProjectEnvironmentValueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectEnvironmentValueResponse,
    UpdateProjectEnvironmentValueError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all templates for a project
 */
export const listProjectTemplates = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectTemplatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectTemplatesResponse,
    ListProjectTemplatesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates',
    ...options,
  })
}

/**
 * Create a new template
 */
export const createProjectTemplate = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectTemplateResponse,
    CreateProjectTemplateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific template for a project
 */
export const deleteProjectTemplate = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectTemplateResponse,
    DeleteProjectTemplateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}',
    ...options,
  })
}

/**
 * Fetch a specific template for a project
 */
export const showProjectTemplate = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectTemplateResponse,
    ShowProjectTemplateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}',
    ...options,
  })
}

/**
 * Update a specific template for a project
 */
export const updateProjectTemplate = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectTemplateResponse,
    UpdateProjectTemplateError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create a new survey on a template
 */
export const createProjectTemplateSurvey = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateProjectTemplateSurveyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectTemplateSurveyResponse,
    CreateProjectTemplateSurveyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/surveys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a survey on a template for a project
 */
export const deleteProjectTemplateSurvey = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteProjectTemplateSurveyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectTemplateSurveyResponse,
    DeleteProjectTemplateSurveyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}',
    ...options,
  })
}

/**
 * Update a survey on a template for a project
 */
export const updateProjectTemplateSurvey = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateProjectTemplateSurveyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectTemplateSurveyResponse,
    UpdateProjectTemplateSurveyError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Create a new vault on a template
 */
export const createProjectTemplateVault = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateProjectTemplateVaultData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectTemplateVaultResponse,
    CreateProjectTemplateVaultError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/vaults',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a vault on a template for a project
 */
export const deleteProjectTemplateVault = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteProjectTemplateVaultData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectTemplateVaultResponse,
    DeleteProjectTemplateVaultError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}',
    ...options,
  })
}

/**
 * Update a vault on a template for a project
 */
export const updateProjectTemplateVault = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateProjectTemplateVaultData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectTemplateVaultResponse,
    UpdateProjectTemplateVaultError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all schedules for a project
 */
export const listProjectSchedules = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectSchedulesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectSchedulesResponse,
    ListProjectSchedulesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/schedules',
    ...options,
  })
}

/**
 * Create a new schedule
 */
export const createProjectSchedule = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectScheduleResponse,
    CreateProjectScheduleError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/schedules',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific schedule for a project
 */
export const deleteProjectSchedule = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectScheduleResponse,
    DeleteProjectScheduleError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/schedules/{schedule_id}',
    ...options,
  })
}

/**
 * Fetch a specific schedule for a project
 */
export const showProjectSchedule = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectScheduleResponse,
    ShowProjectScheduleError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/schedules/{schedule_id}',
    ...options,
  })
}

/**
 * Update a specific schedule for a project
 */
export const updateProjectSchedule = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProjectScheduleResponse,
    UpdateProjectScheduleError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/schedules/{schedule_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all executions for a project
 */
export const listProjectExecutions = <ThrowOnError extends boolean = false>(
  options: Options<ListProjectExecutionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListProjectExecutionsResponse,
    ListProjectExecutionsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions',
    ...options,
  })
}

/**
 * Create a new execution
 */
export const createProjectExecution = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectExecutionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectExecutionResponse,
    CreateProjectExecutionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific execution for a project
 */
export const deleteProjectExecution = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectExecutionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectExecutionResponse,
    DeleteProjectExecutionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions/{execution_id}',
    ...options,
  })
}

/**
 * Fetch a specific execution for a project
 */
export const showProjectExecution = <ThrowOnError extends boolean = false>(
  options: Options<ShowProjectExecutionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowProjectExecutionResponse,
    ShowProjectExecutionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions/{execution_id}',
    ...options,
  })
}

/**
 * Purge a specific execution for a project
 */
export const purgeProjectExecution = <ThrowOnError extends boolean = false>(
  options: Options<PurgeProjectExecutionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PurgeProjectExecutionResponse,
    PurgeProjectExecutionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions/{execution_id}/purge',
    ...options,
  })
}

/**
 * Output a specific execution for a project
 */
export const outputProjectExecution = <ThrowOnError extends boolean = false>(
  options: Options<OutputProjectExecutionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    OutputProjectExecutionResponse,
    OutputProjectExecutionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/projects/{project_id}/executions/{execution_id}/output',
    ...options,
  })
}

/**
 * Fetch all events
 */
export const listGlobalEvents = <ThrowOnError extends boolean = false>(
  options?: Options<ListGlobalEventsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGlobalEventsResponse,
    ListGlobalEventsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/events',
    ...options,
  })
}

/**
 * Fetch all runners
 */
export const listGlobalRunners = <ThrowOnError extends boolean = false>(
  options?: Options<ListGlobalRunnersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGlobalRunnersResponse,
    ListGlobalRunnersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/runners',
    ...options,
  })
}

/**
 * Create a new global runner
 */
export const createGlobalRunner = <ThrowOnError extends boolean = false>(
  options: Options<CreateGlobalRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGlobalRunnerResponse,
    CreateGlobalRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/runners',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific runner
 */
export const deleteGlobalRunner = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGlobalRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGlobalRunnerResponse,
    DeleteGlobalRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/runners/{runner_id}',
    ...options,
  })
}

/**
 * Fetch a specific runner
 */
export const showGlobalRunner = <ThrowOnError extends boolean = false>(
  options: Options<ShowGlobalRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowGlobalRunnerResponse,
    ShowGlobalRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/runners/{runner_id}',
    ...options,
  })
}

/**
 * Update a specific runner
 */
export const updateGlobalRunner = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGlobalRunnerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGlobalRunnerResponse,
    UpdateGlobalRunnerError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/runners/{runner_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGroupsResponse,
    ListGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups',
    ...options,
  })
}

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGroupResponse,
    CreateGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupResponse,
    DeleteGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
  })
}

/**
 * Fetch a specific group
 */
export const showGroup = <ThrowOnError extends boolean = false>(
  options: Options<ShowGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowGroupResponse,
    ShowGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
  })
}

/**
 * Update a specific group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGroupResponse,
    UpdateGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a user from group
 */
export const deleteGroupFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupFromUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupFromUserResponse,
    DeleteGroupFromUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all users attached to group
 */
export const listGroupUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupUsersResponse,
    ListGroupUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
  })
}

/**
 * Attach a user to group
 */
export const attachGroupToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachGroupToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachGroupToUserResponse,
    AttachGroupToUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update user perms for group
 */
export const permitGroupUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitGroupUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitGroupUserResponse,
    PermitGroupUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a project from group
 */
export const deleteGroupFromProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupFromProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupFromProjectResponse,
    DeleteGroupFromProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all projects attached to group
 */
export const listGroupProjects = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupProjectsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupProjectsResponse,
    ListGroupProjectsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/projects',
    ...options,
  })
}

/**
 * Attach a project to group
 */
export const attachGroupToProject = <ThrowOnError extends boolean = false>(
  options: Options<AttachGroupToProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachGroupToProjectResponse,
    AttachGroupToProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update project perms for group
 */
export const permitGroupProject = <ThrowOnError extends boolean = false>(
  options: Options<PermitGroupProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitGroupProjectResponse,
    PermitGroupProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersResponse,
    ListUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
  })
}

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
  })
}

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(
  options: Options<ShowUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowUserResponse,
    ShowUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
  })
}

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a group from user
 */
export const deleteUserFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserFromGroupResponse,
    DeleteUserFromGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all groups attached to user
 */
export const listUserGroups = <ThrowOnError extends boolean = false>(
  options: Options<ListUserGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserGroupsResponse,
    ListUserGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
  })
}

/**
 * Attach a group to user
 */
export const attachUserToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachUserToGroupResponse,
    AttachUserToGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update group perms for user
 */
export const permitUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitUserGroupResponse,
    PermitUserGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a project from user
 */
export const deleteUserFromProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserFromProjectResponse,
    DeleteUserFromProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all projects attached to user
 */
export const listUserProjects = <ThrowOnError extends boolean = false>(
  options: Options<ListUserProjectsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserProjectsResponse,
    ListUserProjectsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/projects',
    ...options,
  })
}

/**
 * Attach a project to user
 */
export const attachUserToProject = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachUserToProjectResponse,
    AttachUserToProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update project perms for user
 */
export const permitUserProject = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitUserProjectResponse,
    PermitUserProjectError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}
