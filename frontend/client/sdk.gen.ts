// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RequestProviderData, RequestProviderErrors, CallbackProviderData, CallbackProviderErrors, ListProvidersData, ListProvidersResponses, RedirectAuthData, RedirectAuthResponses, RedirectAuthErrors, LoginAuthData, LoginAuthResponses, LoginAuthErrors, RefreshAuthData, RefreshAuthResponses, RefreshAuthErrors, VerifyAuthData, VerifyAuthResponses, VerifyAuthErrors, TokenProfileData, TokenProfileResponses, TokenProfileErrors, ShowProfileData, ShowProfileResponses, ShowProfileErrors, UpdateProfileData, UpdateProfileResponses, UpdateProfileErrors, ListProjectsData, ListProjectsResponses, ListProjectsErrors, CreateProjectData, CreateProjectResponses, CreateProjectErrors, DeleteProjectData, DeleteProjectResponses, DeleteProjectErrors, ShowProjectData, ShowProjectResponses, ShowProjectErrors, UpdateProjectData, UpdateProjectResponses, UpdateProjectErrors, DeleteProjectFromUserData, DeleteProjectFromUserResponses, DeleteProjectFromUserErrors, ListProjectUsersData, ListProjectUsersResponses, ListProjectUsersErrors, AttachProjectToUserData, AttachProjectToUserResponses, AttachProjectToUserErrors, PermitProjectUserData, PermitProjectUserResponses, PermitProjectUserErrors, DeleteProjectFromGroupData, DeleteProjectFromGroupResponses, DeleteProjectFromGroupErrors, ListProjectGroupsData, ListProjectGroupsResponses, ListProjectGroupsErrors, AttachProjectToGroupData, AttachProjectToGroupResponses, AttachProjectToGroupErrors, PermitProjectGroupData, PermitProjectGroupResponses, PermitProjectGroupErrors, ListProjectEventsData, ListProjectEventsResponses, ListProjectEventsErrors, ListProjectRunnersData, ListProjectRunnersResponses, ListProjectRunnersErrors, CreateProjectRunnerData, CreateProjectRunnerResponses, CreateProjectRunnerErrors, DeleteProjectRunnerData, DeleteProjectRunnerResponses, DeleteProjectRunnerErrors, ShowProjectRunnerData, ShowProjectRunnerResponses, ShowProjectRunnerErrors, UpdateProjectRunnerData, UpdateProjectRunnerResponses, UpdateProjectRunnerErrors, ListProjectCredentialsData, ListProjectCredentialsResponses, ListProjectCredentialsErrors, CreateProjectCredentialData, CreateProjectCredentialResponses, CreateProjectCredentialErrors, DeleteProjectCredentialData, DeleteProjectCredentialResponses, DeleteProjectCredentialErrors, ShowProjectCredentialData, ShowProjectCredentialResponses, ShowProjectCredentialErrors, UpdateProjectCredentialData, UpdateProjectCredentialResponses, UpdateProjectCredentialErrors, ListProjectRepositoriesData, ListProjectRepositoriesResponses, ListProjectRepositoriesErrors, CreateProjectRepositoryData, CreateProjectRepositoryResponses, CreateProjectRepositoryErrors, DeleteProjectRepositoryData, DeleteProjectRepositoryResponses, DeleteProjectRepositoryErrors, ShowProjectRepositoryData, ShowProjectRepositoryResponses, ShowProjectRepositoryErrors, UpdateProjectRepositoryData, UpdateProjectRepositoryResponses, UpdateProjectRepositoryErrors, ListProjectInventoriesData, ListProjectInventoriesResponses, ListProjectInventoriesErrors, CreateProjectInventoryData, CreateProjectInventoryResponses, CreateProjectInventoryErrors, DeleteProjectInventoryData, DeleteProjectInventoryResponses, DeleteProjectInventoryErrors, ShowProjectInventoryData, ShowProjectInventoryResponses, ShowProjectInventoryErrors, UpdateProjectInventoryData, UpdateProjectInventoryResponses, UpdateProjectInventoryErrors, ListProjectEnvironmentsData, ListProjectEnvironmentsResponses, ListProjectEnvironmentsErrors, CreateProjectEnvironmentData, CreateProjectEnvironmentResponses, CreateProjectEnvironmentErrors, DeleteProjectEnvironmentData, DeleteProjectEnvironmentResponses, DeleteProjectEnvironmentErrors, ShowProjectEnvironmentData, ShowProjectEnvironmentResponses, ShowProjectEnvironmentErrors, UpdateProjectEnvironmentData, UpdateProjectEnvironmentResponses, UpdateProjectEnvironmentErrors, CreateProjectEnvironmentSecretData, CreateProjectEnvironmentSecretResponses, CreateProjectEnvironmentSecretErrors, DeleteProjectEnvironmentSecretData, DeleteProjectEnvironmentSecretResponses, DeleteProjectEnvironmentSecretErrors, UpdateProjectEnvironmentSecretData, UpdateProjectEnvironmentSecretResponses, UpdateProjectEnvironmentSecretErrors, CreateProjectEnvironmentValueData, CreateProjectEnvironmentValueResponses, CreateProjectEnvironmentValueErrors, DeleteProjectEnvironmentValueData, DeleteProjectEnvironmentValueResponses, DeleteProjectEnvironmentValueErrors, UpdateProjectEnvironmentValueData, UpdateProjectEnvironmentValueResponses, UpdateProjectEnvironmentValueErrors, ListProjectTemplatesData, ListProjectTemplatesResponses, ListProjectTemplatesErrors, CreateProjectTemplateData, CreateProjectTemplateResponses, CreateProjectTemplateErrors, DeleteProjectTemplateData, DeleteProjectTemplateResponses, DeleteProjectTemplateErrors, ShowProjectTemplateData, ShowProjectTemplateResponses, ShowProjectTemplateErrors, UpdateProjectTemplateData, UpdateProjectTemplateResponses, UpdateProjectTemplateErrors, CreateProjectTemplateSurveyData, CreateProjectTemplateSurveyResponses, CreateProjectTemplateSurveyErrors, DeleteProjectTemplateSurveyData, DeleteProjectTemplateSurveyResponses, DeleteProjectTemplateSurveyErrors, UpdateProjectTemplateSurveyData, UpdateProjectTemplateSurveyResponses, UpdateProjectTemplateSurveyErrors, CreateProjectTemplateVaultData, CreateProjectTemplateVaultResponses, CreateProjectTemplateVaultErrors, DeleteProjectTemplateVaultData, DeleteProjectTemplateVaultResponses, DeleteProjectTemplateVaultErrors, UpdateProjectTemplateVaultData, UpdateProjectTemplateVaultResponses, UpdateProjectTemplateVaultErrors, ListProjectSchedulesData, ListProjectSchedulesResponses, ListProjectSchedulesErrors, CreateProjectScheduleData, CreateProjectScheduleResponses, CreateProjectScheduleErrors, DeleteProjectScheduleData, DeleteProjectScheduleResponses, DeleteProjectScheduleErrors, ShowProjectScheduleData, ShowProjectScheduleResponses, ShowProjectScheduleErrors, UpdateProjectScheduleData, UpdateProjectScheduleResponses, UpdateProjectScheduleErrors, ListProjectExecutionsData, ListProjectExecutionsResponses, ListProjectExecutionsErrors, CreateProjectExecutionData, CreateProjectExecutionResponses, CreateProjectExecutionErrors, DeleteProjectExecutionData, DeleteProjectExecutionResponses, DeleteProjectExecutionErrors, ShowProjectExecutionData, ShowProjectExecutionResponses, ShowProjectExecutionErrors, PurgeProjectExecutionData, PurgeProjectExecutionResponses, PurgeProjectExecutionErrors, OutputProjectExecutionData, OutputProjectExecutionResponses, OutputProjectExecutionErrors, ListGlobalEventsData, ListGlobalEventsResponses, ListGlobalEventsErrors, ListGlobalRunnersData, ListGlobalRunnersResponses, ListGlobalRunnersErrors, CreateGlobalRunnerData, CreateGlobalRunnerResponses, CreateGlobalRunnerErrors, DeleteGlobalRunnerData, DeleteGlobalRunnerResponses, DeleteGlobalRunnerErrors, ShowGlobalRunnerData, ShowGlobalRunnerResponses, ShowGlobalRunnerErrors, UpdateGlobalRunnerData, UpdateGlobalRunnerResponses, UpdateGlobalRunnerErrors, ListGroupsData, ListGroupsResponses, ListGroupsErrors, CreateGroupData, CreateGroupResponses, CreateGroupErrors, DeleteGroupData, DeleteGroupResponses, DeleteGroupErrors, ShowGroupData, ShowGroupResponses, ShowGroupErrors, UpdateGroupData, UpdateGroupResponses, UpdateGroupErrors, DeleteGroupFromUserData, DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ListGroupUsersData, ListGroupUsersResponses, ListGroupUsersErrors, AttachGroupToUserData, AttachGroupToUserResponses, AttachGroupToUserErrors, PermitGroupUserData, PermitGroupUserResponses, PermitGroupUserErrors, DeleteGroupFromProjectData, DeleteGroupFromProjectResponses, DeleteGroupFromProjectErrors, ListGroupProjectsData, ListGroupProjectsResponses, ListGroupProjectsErrors, AttachGroupToProjectData, AttachGroupToProjectResponses, AttachGroupToProjectErrors, PermitGroupProjectData, PermitGroupProjectResponses, PermitGroupProjectErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, ShowUserData, ShowUserResponses, ShowUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, DeleteUserFromGroupData, DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ListUserGroupsData, ListUserGroupsResponses, ListUserGroupsErrors, AttachUserToGroupData, AttachUserToGroupResponses, AttachUserToGroupErrors, PermitUserGroupData, PermitUserGroupResponses, PermitUserGroupErrors, DeleteUserFromProjectData, DeleteUserFromProjectResponses, DeleteUserFromProjectErrors, ListUserProjectsData, ListUserProjectsResponses, ListUserProjectsErrors, AttachUserToProjectData, AttachUserToProjectResponses, AttachUserToProjectErrors, PermitUserProjectData, PermitUserProjectResponses, PermitUserProjectErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Request the redirect to defined provider
 */
export const requestProvider = <ThrowOnError extends boolean = false>(options: Options<RequestProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, RequestProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/request',
        ...options
    });
};

/**
 * Callback to parse the defined provider
 */
export const callbackProvider = <ThrowOnError extends boolean = false>(options: Options<CallbackProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, CallbackProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/callback',
        ...options
    });
};

/**
 * Fetch the available auth providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(options?: Options<ListProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProvidersResponses, unknown, ThrowOnError>({
        url: '/auth/providers',
        ...options
    });
};

/**
 * Retrieve real token after redirect
 */
export const redirectAuth = <ThrowOnError extends boolean = false>(options: Options<RedirectAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedirectAuthResponses, RedirectAuthErrors, ThrowOnError>({
        url: '/auth/redirect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(options: Options<LoginAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAuthResponses, LoginAuthErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(options?: Options<RefreshAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RefreshAuthResponses, RefreshAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(options?: Options<VerifyAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyAuthResponses, VerifyAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/verify',
        ...options
    });
};

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(options?: Options<TokenProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TokenProfileResponses, TokenProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/token',
        ...options
    });
};

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(options?: Options<ShowProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ShowProfileResponses, ShowProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options
    });
};

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProfileResponses, UpdateProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available projects
 */
export const listProjects = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsResponses, ListProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects',
        ...options
    });
};

/**
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectResponses, CreateProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectResponses, DeleteProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Fetch a specific project
 */
export const showProject = <ThrowOnError extends boolean = false>(options: Options<ShowProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectResponses, ShowProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Update a specific project
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectResponses, UpdateProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a user from project
 */
export const deleteProjectFromUser = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectFromUserResponses, DeleteProjectFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to project
 */
export const listProjectUsers = <ThrowOnError extends boolean = false>(options: Options<ListProjectUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectUsersResponses, ListProjectUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/users',
        ...options
    });
};

/**
 * Attach a user to project
 */
export const attachProjectToUser = <ThrowOnError extends boolean = false>(options: Options<AttachProjectToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachProjectToUserResponses, AttachProjectToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for project
 */
export const permitProjectUser = <ThrowOnError extends boolean = false>(options: Options<PermitProjectUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitProjectUserResponses, PermitProjectUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from project
 */
export const deleteProjectFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectFromGroupResponses, DeleteProjectFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to project
 */
export const listProjectGroups = <ThrowOnError extends boolean = false>(options: Options<ListProjectGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectGroupsResponses, ListProjectGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/groups',
        ...options
    });
};

/**
 * Attach a group to project
 */
export const attachProjectToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachProjectToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachProjectToGroupResponses, AttachProjectToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for project
 */
export const permitProjectGroup = <ThrowOnError extends boolean = false>(options: Options<PermitProjectGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitProjectGroupResponses, PermitProjectGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all events for a project
 */
export const listProjectEvents = <ThrowOnError extends boolean = false>(options: Options<ListProjectEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectEventsResponses, ListProjectEventsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/events',
        ...options
    });
};

/**
 * Fetch all runners for a project
 */
export const listProjectRunners = <ThrowOnError extends boolean = false>(options: Options<ListProjectRunnersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectRunnersResponses, ListProjectRunnersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/runners',
        ...options
    });
};

/**
 * Create a new runner
 */
export const createProjectRunner = <ThrowOnError extends boolean = false>(options: Options<CreateProjectRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectRunnerResponses, CreateProjectRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/runners',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific runner for a project
 */
export const deleteProjectRunner = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectRunnerResponses, DeleteProjectRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/runners/{runner_id}',
        ...options
    });
};

/**
 * Fetch a specific runner for a project
 */
export const showProjectRunner = <ThrowOnError extends boolean = false>(options: Options<ShowProjectRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectRunnerResponses, ShowProjectRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/runners/{runner_id}',
        ...options
    });
};

/**
 * Update a specific runner for a project
 */
export const updateProjectRunner = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectRunnerResponses, UpdateProjectRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/runners/{runner_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all credentials for a project
 */
export const listProjectCredentials = <ThrowOnError extends boolean = false>(options: Options<ListProjectCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectCredentialsResponses, ListProjectCredentialsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/credentials',
        ...options
    });
};

/**
 * Create a new credential
 */
export const createProjectCredential = <ThrowOnError extends boolean = false>(options: Options<CreateProjectCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectCredentialResponses, CreateProjectCredentialErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific credential for a project
 */
export const deleteProjectCredential = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectCredentialResponses, DeleteProjectCredentialErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/credentials/{credential_id}',
        ...options
    });
};

/**
 * Fetch a specific credential for a project
 */
export const showProjectCredential = <ThrowOnError extends boolean = false>(options: Options<ShowProjectCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectCredentialResponses, ShowProjectCredentialErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/credentials/{credential_id}',
        ...options
    });
};

/**
 * Update a specific credential for a project
 */
export const updateProjectCredential = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectCredentialData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectCredentialResponses, UpdateProjectCredentialErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/credentials/{credential_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all repositories for a project
 */
export const listProjectRepositories = <ThrowOnError extends boolean = false>(options: Options<ListProjectRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectRepositoriesResponses, ListProjectRepositoriesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/repositories',
        ...options
    });
};

/**
 * Create a new repository
 */
export const createProjectRepository = <ThrowOnError extends boolean = false>(options: Options<CreateProjectRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectRepositoryResponses, CreateProjectRepositoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/repositories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific repository for a project
 */
export const deleteProjectRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectRepositoryResponses, DeleteProjectRepositoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/repositories/{repository_id}',
        ...options
    });
};

/**
 * Fetch a specific repository for a project
 */
export const showProjectRepository = <ThrowOnError extends boolean = false>(options: Options<ShowProjectRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectRepositoryResponses, ShowProjectRepositoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/repositories/{repository_id}',
        ...options
    });
};

/**
 * Update a specific repository for a project
 */
export const updateProjectRepository = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectRepositoryResponses, UpdateProjectRepositoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/repositories/{repository_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all inventories for a project
 */
export const listProjectInventories = <ThrowOnError extends boolean = false>(options: Options<ListProjectInventoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectInventoriesResponses, ListProjectInventoriesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/inventories',
        ...options
    });
};

/**
 * Create a new inventory
 */
export const createProjectInventory = <ThrowOnError extends boolean = false>(options: Options<CreateProjectInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectInventoryResponses, CreateProjectInventoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/inventories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific inventory for a project
 */
export const deleteProjectInventory = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectInventoryResponses, DeleteProjectInventoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/inventories/{inventory_id}',
        ...options
    });
};

/**
 * Fetch a specific inventory for a project
 */
export const showProjectInventory = <ThrowOnError extends boolean = false>(options: Options<ShowProjectInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectInventoryResponses, ShowProjectInventoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/inventories/{inventory_id}',
        ...options
    });
};

/**
 * Update a specific inventory for a project
 */
export const updateProjectInventory = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectInventoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectInventoryResponses, UpdateProjectInventoryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/inventories/{inventory_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all environments for a project
 */
export const listProjectEnvironments = <ThrowOnError extends boolean = false>(options: Options<ListProjectEnvironmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectEnvironmentsResponses, ListProjectEnvironmentsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments',
        ...options
    });
};

/**
 * Create a new environment
 */
export const createProjectEnvironment = <ThrowOnError extends boolean = false>(options: Options<CreateProjectEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectEnvironmentResponses, CreateProjectEnvironmentErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific environment for a project
 */
export const deleteProjectEnvironment = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectEnvironmentResponses, DeleteProjectEnvironmentErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}',
        ...options
    });
};

/**
 * Fetch a specific environment for a project
 */
export const showProjectEnvironment = <ThrowOnError extends boolean = false>(options: Options<ShowProjectEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectEnvironmentResponses, ShowProjectEnvironmentErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}',
        ...options
    });
};

/**
 * Update a specific environment for a project
 */
export const updateProjectEnvironment = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectEnvironmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectEnvironmentResponses, UpdateProjectEnvironmentErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new secret on an environment
 */
export const createProjectEnvironmentSecret = <ThrowOnError extends boolean = false>(options: Options<CreateProjectEnvironmentSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectEnvironmentSecretResponses, CreateProjectEnvironmentSecretErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a secret on an environment for a project
 */
export const deleteProjectEnvironmentSecret = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectEnvironmentSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectEnvironmentSecretResponses, DeleteProjectEnvironmentSecretErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}',
        ...options
    });
};

/**
 * Update a secret on an environment for a project
 */
export const updateProjectEnvironmentSecret = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectEnvironmentSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectEnvironmentSecretResponses, UpdateProjectEnvironmentSecretErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/secrets/{secret_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new value on an environment
 */
export const createProjectEnvironmentValue = <ThrowOnError extends boolean = false>(options: Options<CreateProjectEnvironmentValueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectEnvironmentValueResponses, CreateProjectEnvironmentValueErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/values',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a value on an environment for a project
 */
export const deleteProjectEnvironmentValue = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectEnvironmentValueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectEnvironmentValueResponses, DeleteProjectEnvironmentValueErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}',
        ...options
    });
};

/**
 * Update a value on an environment for a project
 */
export const updateProjectEnvironmentValue = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectEnvironmentValueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectEnvironmentValueResponses, UpdateProjectEnvironmentValueErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/environments/{environment_id}/values/{value_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all templates for a project
 */
export const listProjectTemplates = <ThrowOnError extends boolean = false>(options: Options<ListProjectTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectTemplatesResponses, ListProjectTemplatesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates',
        ...options
    });
};

/**
 * Create a new template
 */
export const createProjectTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateProjectTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectTemplateResponses, CreateProjectTemplateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific template for a project
 */
export const deleteProjectTemplate = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectTemplateResponses, DeleteProjectTemplateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}',
        ...options
    });
};

/**
 * Fetch a specific template for a project
 */
export const showProjectTemplate = <ThrowOnError extends boolean = false>(options: Options<ShowProjectTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectTemplateResponses, ShowProjectTemplateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}',
        ...options
    });
};

/**
 * Update a specific template for a project
 */
export const updateProjectTemplate = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectTemplateResponses, UpdateProjectTemplateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new survey on a template
 */
export const createProjectTemplateSurvey = <ThrowOnError extends boolean = false>(options: Options<CreateProjectTemplateSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectTemplateSurveyResponses, CreateProjectTemplateSurveyErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/surveys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a survey on a template for a project
 */
export const deleteProjectTemplateSurvey = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectTemplateSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectTemplateSurveyResponses, DeleteProjectTemplateSurveyErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}',
        ...options
    });
};

/**
 * Update a survey on a template for a project
 */
export const updateProjectTemplateSurvey = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectTemplateSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectTemplateSurveyResponses, UpdateProjectTemplateSurveyErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/surveys/{survey_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new vault on a template
 */
export const createProjectTemplateVault = <ThrowOnError extends boolean = false>(options: Options<CreateProjectTemplateVaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectTemplateVaultResponses, CreateProjectTemplateVaultErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/vaults',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a vault on a template for a project
 */
export const deleteProjectTemplateVault = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectTemplateVaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectTemplateVaultResponses, DeleteProjectTemplateVaultErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}',
        ...options
    });
};

/**
 * Update a vault on a template for a project
 */
export const updateProjectTemplateVault = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectTemplateVaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectTemplateVaultResponses, UpdateProjectTemplateVaultErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/templates/{template_id}/vaults/{vault_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all schedules for a project
 */
export const listProjectSchedules = <ThrowOnError extends boolean = false>(options: Options<ListProjectSchedulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectSchedulesResponses, ListProjectSchedulesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/schedules',
        ...options
    });
};

/**
 * Create a new schedule
 */
export const createProjectSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateProjectScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectScheduleResponses, CreateProjectScheduleErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific schedule for a project
 */
export const deleteProjectSchedule = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectScheduleResponses, DeleteProjectScheduleErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/schedules/{schedule_id}',
        ...options
    });
};

/**
 * Fetch a specific schedule for a project
 */
export const showProjectSchedule = <ThrowOnError extends boolean = false>(options: Options<ShowProjectScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectScheduleResponses, ShowProjectScheduleErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/schedules/{schedule_id}',
        ...options
    });
};

/**
 * Update a specific schedule for a project
 */
export const updateProjectSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectScheduleResponses, UpdateProjectScheduleErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/schedules/{schedule_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all executions for a project
 */
export const listProjectExecutions = <ThrowOnError extends boolean = false>(options: Options<ListProjectExecutionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectExecutionsResponses, ListProjectExecutionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions',
        ...options
    });
};

/**
 * Create a new execution
 */
export const createProjectExecution = <ThrowOnError extends boolean = false>(options: Options<CreateProjectExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectExecutionResponses, CreateProjectExecutionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific execution for a project
 */
export const deleteProjectExecution = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectExecutionResponses, DeleteProjectExecutionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions/{execution_id}',
        ...options
    });
};

/**
 * Fetch a specific execution for a project
 */
export const showProjectExecution = <ThrowOnError extends boolean = false>(options: Options<ShowProjectExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProjectExecutionResponses, ShowProjectExecutionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions/{execution_id}',
        ...options
    });
};

/**
 * Purge a specific execution for a project
 */
export const purgeProjectExecution = <ThrowOnError extends boolean = false>(options: Options<PurgeProjectExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PurgeProjectExecutionResponses, PurgeProjectExecutionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions/{execution_id}/purge',
        ...options
    });
};

/**
 * Output a specific execution for a project
 */
export const outputProjectExecution = <ThrowOnError extends boolean = false>(options: Options<OutputProjectExecutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OutputProjectExecutionResponses, OutputProjectExecutionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/projects/{project_id}/executions/{execution_id}/output',
        ...options
    });
};

/**
 * Fetch all events
 */
export const listGlobalEvents = <ThrowOnError extends boolean = false>(options?: Options<ListGlobalEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGlobalEventsResponses, ListGlobalEventsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

/**
 * Fetch all runners
 */
export const listGlobalRunners = <ThrowOnError extends boolean = false>(options?: Options<ListGlobalRunnersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGlobalRunnersResponses, ListGlobalRunnersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/runners',
        ...options
    });
};

/**
 * Create a new global runner
 */
export const createGlobalRunner = <ThrowOnError extends boolean = false>(options: Options<CreateGlobalRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGlobalRunnerResponses, CreateGlobalRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/runners',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific runner
 */
export const deleteGlobalRunner = <ThrowOnError extends boolean = false>(options: Options<DeleteGlobalRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGlobalRunnerResponses, DeleteGlobalRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/runners/{runner_id}',
        ...options
    });
};

/**
 * Fetch a specific runner
 */
export const showGlobalRunner = <ThrowOnError extends boolean = false>(options: Options<ShowGlobalRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowGlobalRunnerResponses, ShowGlobalRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/runners/{runner_id}',
        ...options
    });
};

/**
 * Update a specific runner
 */
export const updateGlobalRunner = <ThrowOnError extends boolean = false>(options: Options<UpdateGlobalRunnerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGlobalRunnerResponses, UpdateGlobalRunnerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/runners/{runner_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGroupsResponses, ListGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options
    });
};

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(options: Options<CreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupResponses, CreateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, DeleteGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Fetch a specific group
 */
export const showGroup = <ThrowOnError extends boolean = false>(options: Options<ShowGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowGroupResponses, ShowGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Update a specific group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupResponses, UpdateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a user from group
 */
export const deleteGroupFromUser = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to group
 */
export const listGroupUsers = <ThrowOnError extends boolean = false>(options: Options<ListGroupUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupUsersResponses, ListGroupUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options
    });
};

/**
 * Attach a user to group
 */
export const attachGroupToUser = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToUserResponses, AttachGroupToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for group
 */
export const permitGroupUser = <ThrowOnError extends boolean = false>(options: Options<PermitGroupUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupUserResponses, PermitGroupUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a project from group
 */
export const deleteGroupFromProject = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromProjectResponses, DeleteGroupFromProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all projects attached to group
 */
export const listGroupProjects = <ThrowOnError extends boolean = false>(options: Options<ListGroupProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupProjectsResponses, ListGroupProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/projects',
        ...options
    });
};

/**
 * Attach a project to group
 */
export const attachGroupToProject = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToProjectResponses, AttachGroupToProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update project perms for group
 */
export const permitGroupProject = <ThrowOnError extends boolean = false>(options: Options<PermitGroupProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupProjectResponses, PermitGroupProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(options: Options<ShowUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowUserResponses, ShowUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from user
 */
export const deleteUserFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to user
 */
export const listUserGroups = <ThrowOnError extends boolean = false>(options: Options<ListUserGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserGroupsResponses, ListUserGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options
    });
};

/**
 * Attach a group to user
 */
export const attachUserToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachUserToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToGroupResponses, AttachUserToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for user
 */
export const permitUserGroup = <ThrowOnError extends boolean = false>(options: Options<PermitUserGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserGroupResponses, PermitUserGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a project from user
 */
export const deleteUserFromProject = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromProjectResponses, DeleteUserFromProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all projects attached to user
 */
export const listUserProjects = <ThrowOnError extends boolean = false>(options: Options<ListUserProjectsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserProjectsResponses, ListUserProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/projects',
        ...options
    });
};

/**
 * Attach a project to user
 */
export const attachUserToProject = <ThrowOnError extends boolean = false>(options: Options<AttachUserToProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToProjectResponses, AttachUserToProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update project perms for user
 */
export const permitUserProject = <ThrowOnError extends boolean = false>(options: Options<PermitUserProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserProjectResponses, PermitUserProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};